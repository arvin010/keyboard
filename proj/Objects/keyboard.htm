<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\keyboard.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\keyboard.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Jul 20 18:41:02 2022
<BR><P>
<H3>Maximum Stack Usage =        568 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_IRQHandler &rArr; USB_Reset &rArr; USB_Endpoint0 &rArr; USB_Endpoint0_Command &rArr; USB_StdDev_Req &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[16]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC1_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[13]">DMA1_Channel1_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[14]">DMA1_Channel2_3_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[15]">DMA1_Channel4_5_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[10]">EXTI0_1_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[11]">EXTI2_3_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[12]">EXTI4_15_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[1f]">I2C1_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[20]">I2C2_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[c]">PVD_VDDIO_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[21]">SPI1_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[22]">SPI2_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from systick.o(i.SysTick_Handler) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[26]">SystemInit</a> from system_ft32f0xx.o(i.SystemInit) referenced from startup_ft32f072xb.o(.text)
 <LI><a href="#[1b]">TIM14_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[1c]">TIM15_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[1d]">TIM16_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[1e]">TIM17_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[17]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[18]">TIM1_CC_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[19]">TIM3_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[1a]">TIM6_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[23]">USART1_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[24]">USART2_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[25]">USB_IRQHandler</a> from usb_core.o(i.USB_IRQHandler) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_ft32f072xb.o(.text) referenced from startup_ft32f072xb.o(RESET)
 <LI><a href="#[28]">__main</a> from __main.o(!!!main) referenced from startup_ft32f072xb.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[29]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[99]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[9b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[30]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[af]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[35]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b1]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[b2]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[b4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[b6]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[b7]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b9]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[ba]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[31]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; send_acpi_media_keycode &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bb]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[41]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[34]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[bc]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[36]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_VDDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_ft32f072xb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7c]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_key_handle
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keycode
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[be]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[3a]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_key_handle
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_clear
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keycode
</UL>

<P><STRONG><a name="[bf]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_key_handle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_keycode
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_uread4</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StdDev_Req
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0_Tx
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_row
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_col
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scan_row
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scan_col
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_matrix_gpio
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ghost
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_key
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_again
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_key_handle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotKey
</UL>

<P><STRONG><a name="[c1]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_uwrite4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReportEvent
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetProtocolEvent
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetIdleEvent
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportEvent
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetProtocolEvent
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetIdleEvent
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StdDev_Req
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0_Tx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0_Rx
</UL>

<P><STRONG><a name="[c2]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bright_light
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[c5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[33]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[ca]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>CRS_AutomaticCalibrationCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ft32f0xx_crs.o(i.CRS_AutomaticCalibrationCmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[79]"></a>CRS_FrequencyErrorCounterCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ft32f0xx_crs.o(i.CRS_FrequencyErrorCounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[42]"></a>EndpointBulkIn</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, usb_core.o(i.EndpointBulkIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EndpointBulkIn &rArr; FIFOWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Tx
</UL>

<P><STRONG><a name="[44]"></a>EndpointBulkOut</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, usb_core.o(i.EndpointBulkOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EndpointBulkOut &rArr; FIFORead
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFORead
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
</UL>

<P><STRONG><a name="[45]"></a>FIFORead</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, usb_core.o(i.FIFORead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FIFORead
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndpointBulkOut
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0_Rx
</UL>

<P><STRONG><a name="[43]"></a>FIFOWrite</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, usb_core.o(i.FIFOWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FIFOWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndpointBulkIn
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0_Tx
</UL>

<P><STRONG><a name="[5e]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, ft32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IO_PinMode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[5f]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, ft32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[96]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ft32f0xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_row
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_col
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_again
</UL>

<P><STRONG><a name="[6e]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ft32f0xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0_Rx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scan_row
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scan_col
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_again
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_light_pin
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotKey
</UL>

<P><STRONG><a name="[46]"></a>HID_GetIdleEvent</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usb_core.o(i.HID_GetIdleEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_GetIdleEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Class_Req
</UL>

<P><STRONG><a name="[48]"></a>HID_GetProtocolEvent</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usb_core.o(i.HID_GetProtocolEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_GetProtocolEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Class_Req
</UL>

<P><STRONG><a name="[49]"></a>HID_GetReportEvent</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_core.o(i.HID_GetReportEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_GetReportEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Class_Req
</UL>

<P><STRONG><a name="[4a]"></a>HID_SetIdleEvent</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usb_core.o(i.HID_SetIdleEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_SetIdleEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Class_Req
</UL>

<P><STRONG><a name="[4b]"></a>HID_SetProtocolEvent</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usb_core.o(i.HID_SetProtocolEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_SetProtocolEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Class_Req
</UL>

<P><STRONG><a name="[4c]"></a>HID_SetReportEvent</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_core.o(i.HID_SetReportEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_SetReportEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Class_Req
</UL>

<P><STRONG><a name="[78]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, ft32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[5d]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ft32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_rcc
</UL>

<P><STRONG><a name="[75]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ft32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[61]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ft32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[72]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ft32f0xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[73]"></a>RCC_HSI48Cmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ft32f0xx_rcc.o(i.RCC_HSI48Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[74]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ft32f0xx_rcc.o(i.RCC_USBCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[4d]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[4f]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[53]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, segger_rtt_printf.o(i.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StdDev_Req
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_acpi_media_keycode
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 536 bytes, Stack size 136 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[5b]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ft32f0xx_misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Init
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_ft32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>Systick_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, systick.o(i.Systick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Systick_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ft32f0xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[5c]"></a>TIM_Config</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, timer.o(i.TIM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TIM_Config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ft32f0xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[63]"></a>TIM_OC1Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ft32f0xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bright_light
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[62]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ft32f0xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[66]"></a>USB_EP_Tx</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, usb_core.o(i.USB_EP_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_EP_Tx &rArr; EndpointBulkIn &rArr; FIFOWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndpointBulkIn
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keycode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_acpi_media_keycode
</UL>

<P><STRONG><a name="[67]"></a>USB_Endpoint0</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, usb_core.o(i.USB_Endpoint0))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = USB_Endpoint0 &rArr; USB_Endpoint0_Command &rArr; USB_StdDev_Req &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFORead
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0_Tx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0_Rx
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0_Command
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>USB_HID_Class_Req</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usb_core.o(i.USB_HID_Class_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_HID_Class_Req &rArr; HID_SetReportEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReportEvent
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetProtocolEvent
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetIdleEvent
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportEvent
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetProtocolEvent
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetIdleEvent
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0_Command
</UL>

<P><STRONG><a name="[25]"></a>USB_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usb_core.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = USB_IRQHandler &rArr; USB_Reset &rArr; USB_Endpoint0 &rArr; USB_Endpoint0_Command &rArr; USB_StdDev_Req &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>USB_ITConfig</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, usb_core.o(i.USB_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[71]"></a>USB_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, usb_core.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_Init &rArr; USB_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSI48Cmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRS_FrequencyErrorCounterCmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRS_AutomaticCalibrationCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_PDCTRLConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>USB_PDCTRLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_core.o(i.USB_PDCTRLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[70]"></a>USB_Reset</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, usb_core.o(i.USB_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = USB_Reset &rArr; USB_Endpoint0 &rArr; USB_Endpoint0_Command &rArr; USB_StdDev_Req &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndpointBulkOut
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndpointBulkIn
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Class_Req
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StdDev_Req
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IO_PinMode
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_media_key
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_keycode
</UL>

<P><STRONG><a name="[7e]"></a>build_keycode</STRONG> (Thumb, 200 bytes, Stack size 152 bytes, main.o(i.build_keycode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = build_keycode &rArr; get_key_down_list
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_clear
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key_down_list
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_super_key
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>build_media_key</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, main.o(i.build_media_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = build_media_key &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_acpi_media_keycode
</UL>

<P><STRONG><a name="[82]"></a>get_key</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, key_buffer.o(i.get_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_key
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_key_handle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotKey
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_keycode
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_fun
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_super_key
</UL>

<P><STRONG><a name="[81]"></a>get_key_down_list</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, key_buffer.o(i.get_key_down_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_key_down_list
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_keycode
</UL>

<P><STRONG><a name="[88]"></a>hotKey</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, main.o(i.hotKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hotKey &rArr; set_bright_light &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bright_light
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_up
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_down
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_fun
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>init_device_rcc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.init_device_rcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_device_rcc
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>init_light_pin</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.init_light_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = init_light_pin &rArr; set_IO_PinMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IO_PinMode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>key_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key_buffer.o(i.key_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_key_handle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_keycode
</UL>

<P><STRONG><a name="[86]"></a>key_down</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, key_buffer.o(i.key_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_down
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ghost
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_key_handle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotKey
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_fun
</UL>

<P><STRONG><a name="[87]"></a>key_up</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, key_buffer.o(i.key_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_up
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotKey
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_fun
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_super_key
</UL>

<P><STRONG><a name="[32]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = main &rArr; send_acpi_media_keycode &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_key
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_again
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_key_handle
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keycode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_acpi_media_keycode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_light_pin
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_rcc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotKey
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_keycode
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[93]"></a>matrix_key_handle</STRONG> (Thumb, 212 bytes, Stack size 160 bytes, matrix.o(i.matrix_key_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = matrix_key_handle &rArr; ghost &rArr; key_down
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ghost
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_down
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_clear
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>matrix_scan_again</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, matrix.o(i.matrix_scan_again))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = matrix_scan_again &rArr; init_matrix_gpio &rArr; set_IO_PinMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_matrix_gpio
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IO_PinMode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>matrix_scan_key</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, matrix.o(i.matrix_scan_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = matrix_scan_key &rArr; init_scan_row &rArr; set_IO_PinMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_row
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_col
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scan_row
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scan_col
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_matrix_gpio
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>send_acpi_media_keycode</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, main.o(i.send_acpi_media_keycode))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = send_acpi_media_keycode &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Tx
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_media_key
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>send_keycode</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, main.o(i.send_keycode))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = send_keycode &rArr; USB_EP_Tx &rArr; EndpointBulkIn &rArr; FIFOWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Tx
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>set_IO_PinMode</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, io.o(i.set_IO_PinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = set_IO_PinMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scan_row
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scan_col
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_matrix_gpio
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_again
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_light_pin
</UL>

<P><STRONG><a name="[8a]"></a>set_bright_light</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, timer.o(i.set_bright_light))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_bright_light &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotKey
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[80]"></a>handle_super_key</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, main.o(i.handle_super_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = handle_super_key &rArr; key_up
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_up
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_keycode
</UL>

<P><STRONG><a name="[89]"></a>remap_fun</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(i.remap_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = remap_fun &rArr; key_up
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_up
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_down
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotKey
</UL>

<P><STRONG><a name="[5a]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, systick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Init
</UL>

<P><STRONG><a name="[85]"></a>ghost</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, matrix.o(i.ghost))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ghost &rArr; key_down
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_down
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_key_handle
</UL>

<P><STRONG><a name="[8e]"></a>init_matrix_gpio</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, matrix.o(i.init_matrix_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = init_matrix_gpio &rArr; set_IO_PinMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IO_PinMode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_key
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_again
</UL>

<P><STRONG><a name="[8f]"></a>init_scan_col</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, matrix.o(i.init_scan_col))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = init_scan_col &rArr; set_IO_PinMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IO_PinMode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_key
</UL>

<P><STRONG><a name="[90]"></a>init_scan_row</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, matrix.o(i.init_scan_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = init_scan_row &rArr; set_IO_PinMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IO_PinMode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_key
</UL>

<P><STRONG><a name="[98]"></a>scan_col</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, matrix.o(i.scan_col))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scan_col
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_key
</UL>

<P><STRONG><a name="[97]"></a>scan_row</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, matrix.o(i.scan_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scan_row
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_key
</UL>

<P><STRONG><a name="[7b]"></a>ConfigureIfs</STRONG> (Thumb, 276 bytes, Stack size 36 bytes, usb_core.o(i.ConfigureIfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ConfigureIfs
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StdDev_Req
</UL>

<P><STRONG><a name="[69]"></a>USB_Endpoint0_Command</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_core.o(i.USB_Endpoint0_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = USB_Endpoint0_Command &rArr; USB_StdDev_Req &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Class_Req
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StdDev_Req
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0
</UL>

<P><STRONG><a name="[6b]"></a>USB_Endpoint0_Rx</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, usb_core.o(i.USB_Endpoint0_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_Endpoint0_Rx &rArr; FIFORead
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFORead
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0
</UL>

<P><STRONG><a name="[6a]"></a>USB_Endpoint0_Tx</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, usb_core.o(i.USB_Endpoint0_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_Endpoint0_Tx &rArr; FIFOWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0
</UL>

<P><STRONG><a name="[6c]"></a>USB_StdDev_Req</STRONG> (Thumb, 2450 bytes, Stack size 56 bytes, usb_core.o(i.USB_StdDev_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = USB_StdDev_Req &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureIfs
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Endpoint0_Command
</UL>

<P><STRONG><a name="[58]"></a>SetSysClock</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, system_ft32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4e]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _DoInit &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[50]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[52]"></a>_WriteBlocking</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[51]"></a>_WriteNoCheck</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[56]"></a>_PrintInt</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[57]"></a>_PrintUnsigned</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[55]"></a>_StoreChar</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
