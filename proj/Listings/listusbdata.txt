; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\listusbdata.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\listusbdata.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I..\iap2 -IC:\Users\dell1\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -D__UVISION_VERSION=534 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\listusbdata.crf ..\iap2\ListUsbData.c]
                          THUMB

                          AREA ||i.ListUsbData_AddTail||, CODE, READONLY, ALIGN=2

                  ListUsbData_AddTail PROC
;;;13     
;;;14     ListUsbData* ListUsbData_AddTail(ListUsbData* pHead, ListUsbData* pNode)
000000  b570              PUSH     {r4-r6,lr}
;;;15     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;16     	ListUsbData* pListNode = pHead;
000006  4635              MOV      r5,r6
;;;17          if(!(pNode))
000008  2c00              CMP      r4,#0
00000a  d101              BNE      |L1.16|
;;;18     	 	return Null;
00000c  2000              MOVS     r0,#0
                  |L1.14|
;;;19     	//ASRT(pNode);
;;;20     	//SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;21     	pNode->m_pNext = Null;
;;;22     	if(pHead == Null)
;;;23     	{
;;;24     		pNode->m_pPre = Null;
;;;25     		pHead = pNode;
;;;26     		
;;;27     		SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;28     		goto END;
;;;29     	}
;;;30     
;;;31     	//Get the tail node
;;;32     	while(pListNode->m_pNext)
;;;33     	{
;;;34     		pListNode = pListNode->m_pNext;
;;;35     		//ASRT(pListNode != pNode);
;;;36     		 if(!(pListNode != pNode))
;;;37     		 	{
;;;38     		 	
;;;39     		//	SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;40     	 	return Null;
;;;41     		 	}
;;;42     	}
;;;43     	//SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;44     
;;;45     	pListNode->m_pNext = pNode;
;;;46     	
;;;47     	//SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;48     	pNode->m_pPre = pListNode;
;;;49     END:
;;;50     	
;;;51     //	SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;52     //	PF(DL_LISTEX, ("List_AddTail(), count=%d\n", List_Count(pHead)));
;;;53     	g_count++;
;;;54     
;;;55     	return pHead;
;;;56     }
00000e  bd70              POP      {r4-r6,pc}
                  |L1.16|
000010  2000              MOVS     r0,#0                 ;21
000012  6020              STR      r0,[r4,#0]            ;21
000014  2e00              CMP      r6,#0                 ;22
000016  d107              BNE      |L1.40|
000018  6060              STR      r0,[r4,#4]            ;24
00001a  4626              MOV      r6,r4                 ;25
00001c  231b              MOVS     r3,#0x1b              ;27
00001e  4a0c              LDR      r2,|L1.80|
000020  a10c              ADR      r1,|L1.84|
000022  f7fffffe          BL       SEGGER_RTT_printf
000026  e00b              B        |L1.64|
                  |L1.40|
000028  e004              B        |L1.52|
                  |L1.42|
00002a  682d              LDR      r5,[r5,#0]            ;34
00002c  42a5              CMP      r5,r4                 ;36
00002e  d101              BNE      |L1.52|
000030  2000              MOVS     r0,#0                 ;40
000032  e7ec              B        |L1.14|
                  |L1.52|
000034  6828              LDR      r0,[r5,#0]            ;32
000036  2800              CMP      r0,#0                 ;32
000038  d1f7              BNE      |L1.42|
00003a  602c              STR      r4,[r5,#0]            ;45
00003c  6065              STR      r5,[r4,#4]            ;48
00003e  bf00              NOP                            ;49
                  |L1.64|
000040  480b              LDR      r0,|L1.112|
000042  6800              LDR      r0,[r0,#0]            ;53  ; g_count
000044  1c40              ADDS     r0,r0,#1              ;53
000046  490a              LDR      r1,|L1.112|
000048  6008              STR      r0,[r1,#0]            ;53  ; g_count
00004a  4630              MOV      r0,r6                 ;55
00004c  e7df              B        |L1.14|
;;;57     
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      __FUNCTION__
                  |L1.84|
000054  23232323          DCB      "##### function=%s line=%d \n",0
000058  23206675
00005c  6e637469
000060  6f6e3d25
000064  73206c69
000068  6e653d25
00006c  64200a00
                  |L1.112|
                          DCD      g_count

                          AREA ||i.ListUsbData_Count||, CODE, READONLY, ALIGN=2

                  ListUsbData_Count PROC
;;;168    
;;;169    int ListUsbData_Count(/*ListUsbData* pNode*/)
000000  4801              LDR      r0,|L2.8|
;;;170    {
;;;171    return  g_count;
000002  6800              LDR      r0,[r0,#0]  ; g_count
;;;172    #if 0
;;;173    	ListUsbData* pHead = pNode;
;;;174    	int nCount = 0;
;;;175    
;;;176    	if(pNode == Null)
;;;177    	{
;;;178    		return 0;
;;;179    	}
;;;180    
;;;181    	while(pHead)
;;;182    	{
;;;183    		pHead = pHead->m_pPre;
;;;184    		nCount++;
;;;185    	}
;;;186    
;;;187    	pNode = pNode->m_pNext;
;;;188    	while(pNode)
;;;189    	{
;;;190    		pNode = pNode->m_pNext;
;;;191    		nCount++;
;;;192    	}	
;;;193    
;;;194    	return nCount;
;;;195    	#endif
;;;196    }
000004  4770              BX       lr
;;;197    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      g_count

                          AREA ||i.ListUsbData_Init||, CODE, READONLY, ALIGN=1

                  ListUsbData_Init PROC
;;;7      extern int g_count ;
;;;8      void ListUsbData_Init(ListUsbData* pList)
000000  4770              BX       lr
;;;9      {
;;;10     
;;;11     	//memset(pList, 0, sizeof(ListUsbData));
;;;12     }
;;;13     
                          ENDP


                          AREA ||i.ListUsbData_Remove||, CODE, READONLY, ALIGN=2

                  ListUsbData_Remove PROC
;;;70     //Return: head node
;;;71     ListUsbData* ListUsbData_Remove(ListUsbData* pNode)
000000  b570              PUSH     {r4-r6,lr}
;;;72     {
000002  4604              MOV      r4,r0
;;;73     	ListUsbData* pHead = pNode;
000004  4625              MOV      r5,r4
;;;74     	
;;;75     	SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
000006  234b              MOVS     r3,#0x4b
000008  4a42              LDR      r2,|L4.276|
00000a  a143              ADR      r1,|L4.280|
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       SEGGER_RTT_printf
;;;76     	//ASRT(pNode);
;;;77     	if(!(pNode))
000012  2c00              CMP      r4,#0
000014  d107              BNE      |L4.38|
;;;78     		{
;;;79     				SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
000016  234f              MOVS     r3,#0x4f
000018  4a3e              LDR      r2,|L4.276|
00001a  a146              ADR      r1,|L4.308|
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       SEGGER_RTT_printf
;;;80     		   return Null;
000022  2000              MOVS     r0,#0
                  |L4.36|
;;;81     		}
;;;82     	SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;83     
;;;84     	//Head of list
;;;85     	if(pNode->m_pPre == Null)
;;;86     	{
;;;87     	
;;;88     	SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;89     		pHead = pNode->m_pNext;
;;;90     		if(pHead)
;;;91     		{
;;;92     			pHead->m_pPre = Null;
;;;93     		}
;;;94     		
;;;95     		SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;96     		goto END;
;;;97     	}
;;;98     	else
;;;99     	{
;;;100    	
;;;101    	SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;102    		pNode->m_pPre->m_pNext = pNode->m_pNext;
;;;103    		
;;;104    		SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;105    		if(pNode->m_pNext)
;;;106    		{
;;;107    		
;;;108    		SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;109    			pNode->m_pNext->m_pPre = pNode->m_pPre;
;;;110    		}
;;;111    		
;;;112    		SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;113    	}
;;;114    	SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;115    
;;;116    	while(pHead->m_pPre)
;;;117    	{
;;;118    		SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;119    		pHead = pHead->m_pPre;
;;;120    		
;;;121    		SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;122    	}
;;;123    	
;;;124    	SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;125    
;;;126    END:
;;;127    	
;;;128    	SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;129    	pNode->m_pPre = Null;
;;;130    	
;;;131    	SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;132    	pNode->m_pNext = Null;
;;;133    	
;;;134    	SEGGER_RTT_printf(0,"##### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;135    	
;;;136    //	PF(DL_LISTEX, ("List_Remove(), count=%d\n", List_Count(pHead)));
;;;137    	if(g_count>0)
;;;138    		g_count--;
;;;139    
;;;140    	return pHead;
;;;141    }
000024  bd70              POP      {r4-r6,pc}
                  |L4.38|
000026  2352              MOVS     r3,#0x52              ;82
000028  4a3a              LDR      r2,|L4.276|
00002a  a13b              ADR      r1,|L4.280|
00002c  2000              MOVS     r0,#0                 ;82
00002e  f7fffffe          BL       SEGGER_RTT_printf
000032  6860              LDR      r0,[r4,#4]            ;85
000034  2800              CMP      r0,#0                 ;85
000036  d110              BNE      |L4.90|
000038  2358              MOVS     r3,#0x58              ;88
00003a  4a36              LDR      r2,|L4.276|
00003c  a136              ADR      r1,|L4.280|
00003e  f7fffffe          BL       SEGGER_RTT_printf
000042  6825              LDR      r5,[r4,#0]            ;89
000044  2d00              CMP      r5,#0                 ;90
000046  d001              BEQ      |L4.76|
000048  2000              MOVS     r0,#0                 ;92
00004a  6068              STR      r0,[r5,#4]            ;92
                  |L4.76|
00004c  235f              MOVS     r3,#0x5f              ;95
00004e  4a31              LDR      r2,|L4.276|
000050  a131              ADR      r1,|L4.280|
000052  2000              MOVS     r0,#0                 ;95
000054  f7fffffe          BL       SEGGER_RTT_printf
000058  e03d              B        |L4.214|
                  |L4.90|
00005a  2365              MOVS     r3,#0x65              ;101
00005c  4a2d              LDR      r2,|L4.276|
00005e  a12e              ADR      r1,|L4.280|
000060  2000              MOVS     r0,#0                 ;101
000062  f7fffffe          BL       SEGGER_RTT_printf
000066  6861              LDR      r1,[r4,#4]            ;102
000068  6820              LDR      r0,[r4,#0]            ;102
00006a  6008              STR      r0,[r1,#0]            ;102
00006c  2368              MOVS     r3,#0x68              ;104
00006e  4a29              LDR      r2,|L4.276|
000070  a129              ADR      r1,|L4.280|
000072  2000              MOVS     r0,#0                 ;104
000074  f7fffffe          BL       SEGGER_RTT_printf
000078  6820              LDR      r0,[r4,#0]            ;105
00007a  2800              CMP      r0,#0                 ;105
00007c  d008              BEQ      |L4.144|
00007e  236c              MOVS     r3,#0x6c              ;108
000080  4a24              LDR      r2,|L4.276|
000082  a125              ADR      r1,|L4.280|
000084  2000              MOVS     r0,#0                 ;108
000086  f7fffffe          BL       SEGGER_RTT_printf
00008a  6821              LDR      r1,[r4,#0]            ;109
00008c  6860              LDR      r0,[r4,#4]            ;109
00008e  6048              STR      r0,[r1,#4]            ;109
                  |L4.144|
000090  2370              MOVS     r3,#0x70              ;112
000092  4a20              LDR      r2,|L4.276|
000094  a120              ADR      r1,|L4.280|
000096  2000              MOVS     r0,#0                 ;112
000098  f7fffffe          BL       SEGGER_RTT_printf
00009c  2372              MOVS     r3,#0x72              ;114
00009e  4a1d              LDR      r2,|L4.276|
0000a0  a11d              ADR      r1,|L4.280|
0000a2  2000              MOVS     r0,#0                 ;114
0000a4  f7fffffe          BL       SEGGER_RTT_printf
0000a8  e00c              B        |L4.196|
                  |L4.170|
0000aa  2376              MOVS     r3,#0x76              ;118
0000ac  4a19              LDR      r2,|L4.276|
0000ae  a11a              ADR      r1,|L4.280|
0000b0  2000              MOVS     r0,#0                 ;118
0000b2  f7fffffe          BL       SEGGER_RTT_printf
0000b6  686d              LDR      r5,[r5,#4]            ;119
0000b8  2379              MOVS     r3,#0x79              ;121
0000ba  4a16              LDR      r2,|L4.276|
0000bc  a116              ADR      r1,|L4.280|
0000be  2000              MOVS     r0,#0                 ;121
0000c0  f7fffffe          BL       SEGGER_RTT_printf
                  |L4.196|
0000c4  6868              LDR      r0,[r5,#4]            ;116
0000c6  2800              CMP      r0,#0                 ;116
0000c8  d1ef              BNE      |L4.170|
0000ca  237c              MOVS     r3,#0x7c              ;124
0000cc  4a11              LDR      r2,|L4.276|
0000ce  a112              ADR      r1,|L4.280|
0000d0  f7fffffe          BL       SEGGER_RTT_printf
0000d4  bf00              NOP                            ;126
                  |L4.214|
0000d6  2380              MOVS     r3,#0x80              ;128
0000d8  4a0e              LDR      r2,|L4.276|
0000da  a10f              ADR      r1,|L4.280|
0000dc  2000              MOVS     r0,#0                 ;128
0000de  f7fffffe          BL       SEGGER_RTT_printf
0000e2  2000              MOVS     r0,#0                 ;129
0000e4  6060              STR      r0,[r4,#4]            ;129
0000e6  2383              MOVS     r3,#0x83              ;131
0000e8  4a0a              LDR      r2,|L4.276|
0000ea  a10b              ADR      r1,|L4.280|
0000ec  f7fffffe          BL       SEGGER_RTT_printf
0000f0  2000              MOVS     r0,#0                 ;132
0000f2  6020              STR      r0,[r4,#0]            ;132
0000f4  2386              MOVS     r3,#0x86              ;134
0000f6  4a07              LDR      r2,|L4.276|
0000f8  a107              ADR      r1,|L4.280|
0000fa  f7fffffe          BL       SEGGER_RTT_printf
0000fe  4814              LDR      r0,|L4.336|
000100  6800              LDR      r0,[r0,#0]            ;137  ; g_count
000102  2800              CMP      r0,#0                 ;137
000104  dd04              BLE      |L4.272|
000106  4812              LDR      r0,|L4.336|
000108  6800              LDR      r0,[r0,#0]            ;138  ; g_count
00010a  1e40              SUBS     r0,r0,#1              ;138
00010c  4910              LDR      r1,|L4.336|
00010e  6008              STR      r0,[r1,#0]            ;138  ; g_count
                  |L4.272|
000110  4628              MOV      r0,r5                 ;140
000112  e787              B        |L4.36|
;;;142    
                          ENDP

                  |L4.276|
                          DCD      |symbol_number.21|
                  |L4.280|
000118  23232323          DCB      "##### function=%s line=%d \n",0
00011c  23206675
000120  6e637469
000124  6f6e3d25
000128  73206c69
00012c  6e653d25
000130  64200a00
                  |L4.308|
000134  23232320          DCB      "### function=%s line=%d\n",0
000138  66756e63
00013c  74696f6e
000140  3d257320
000144  6c696e65
000148  3d25640a
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
                  |L4.336|
                          DCD      g_count

                          AREA ||i.ListUsbData_RemoveAll||, CODE, READONLY, ALIGN=2

                  ListUsbData_RemoveAll PROC
;;;57     
;;;58     void ListUsbData_RemoveAll(ListUsbData* pNode)
000000  b570              PUSH     {r4-r6,lr}
;;;59     {
000002  4604              MOV      r4,r0
;;;60     	ListUsbData* pTemp = pNode;
000004  4625              MOV      r5,r4
;;;61     
;;;62     	while(pTemp)
000006  e003              B        |L5.16|
                  |L5.8|
;;;63     	{
;;;64     		pTemp = ListUsbData_Remove(pNode);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       ListUsbData_Remove
00000e  4605              MOV      r5,r0
                  |L5.16|
000010  2d00              CMP      r5,#0                 ;62
000012  d1f9              BNE      |L5.8|
;;;65     	}
;;;66     	g_count = 0;
000014  2000              MOVS     r0,#0
000016  4901              LDR      r1,|L5.28|
000018  6008              STR      r0,[r1,#0]  ; g_count
;;;67     }
00001a  bd70              POP      {r4-r6,pc}
;;;68     
                          ENDP

                  |L5.28|
                          DCD      g_count

                          AREA ||i.ListUsbData_isIn||, CODE, READONLY, ALIGN=1

                  ListUsbData_isIn PROC
;;;142    
;;;143    Bool ListUsbData_isIn(ListUsbData* pHead, ListUsbData* pNode)
000000  4602              MOV      r2,r0
;;;144    {
;;;145    	if(Null == pHead || Null == pNode)
000002  2a00              CMP      r2,#0
000004  d001              BEQ      |L6.10|
000006  2900              CMP      r1,#0
000008  d101              BNE      |L6.14|
                  |L6.10|
;;;146    	{
;;;147    		return False;
00000a  2000              MOVS     r0,#0
                  |L6.12|
;;;148    	}
;;;149    
;;;150    	if(pHead == pNode)
;;;151    	{
;;;152    		return True;
;;;153    	}
;;;154    	
;;;155    	pHead = pHead->m_pNext;
;;;156    	while(pHead)
;;;157    	{
;;;158    		if(pHead == pNode)
;;;159    		{
;;;160    			return True;
;;;161    		}
;;;162    
;;;163    		pHead = pHead->m_pNext;
;;;164    	}
;;;165    
;;;166    	return False;
;;;167    }
00000c  4770              BX       lr
                  |L6.14|
00000e  428a              CMP      r2,r1                 ;150
000010  d101              BNE      |L6.22|
000012  2001              MOVS     r0,#1                 ;152
000014  e7fa              B        |L6.12|
                  |L6.22|
000016  6812              LDR      r2,[r2,#0]            ;155
000018  e004              B        |L6.36|
                  |L6.26|
00001a  428a              CMP      r2,r1                 ;158
00001c  d101              BNE      |L6.34|
00001e  2001              MOVS     r0,#1                 ;160
000020  e7f4              B        |L6.12|
                  |L6.34|
000022  6812              LDR      r2,[r2,#0]            ;163
                  |L6.36|
000024  2a00              CMP      r2,#0                 ;156
000026  d1f8              BNE      |L6.26|
000028  2000              MOVS     r0,#0                 ;166
00002a  e7ef              B        |L6.12|
;;;168    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  4c697374          DCB      0x4c,0x69,0x73,0x74
000004  55736244          DCB      0x55,0x73,0x62,0x44
000008  6174615f          DCB      0x61,0x74,0x61,0x5f
00000c  41646454          DCB      0x41,0x64,0x64,0x54
000010  61696c00          DCB      0x61,0x69,0x6c,0x00
                  |symbol_number.21|
000014  4c697374          DCB      0x4c,0x69,0x73,0x74
000018  55736244          DCB      0x55,0x73,0x62,0x44
00001c  6174615f          DCB      0x61,0x74,0x61,0x5f
000020  52656d6f          DCB      0x52,0x65,0x6d,0x6f
000024  766500            DCB      0x76,0x65,0x00
