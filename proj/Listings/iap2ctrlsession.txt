; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\iap2ctrlsession.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\iap2ctrlsession.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I..\iap2 -IC:\Users\dell1\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -D__UVISION_VERSION=534 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\iap2ctrlsession.crf ..\iap2\Iap2CtrlSession.c]
                          THUMB

                          AREA ||i.Iap2CtrlSessionMsg_AddParam||, CODE, READONLY, ALIGN=1

                  Iap2CtrlSessionMsg_AddParam PROC
;;;49     
;;;50     int Iap2CtrlSessionMsg_AddParam(Iap2CtrlSessionMsg* pMsg
000000  b5ff              PUSH     {r0-r7,lr}
;;;51     	, uint16 paramId
;;;52     	, const uint8* pData
;;;53     	, uint16 len)
;;;54     {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  461e              MOV      r6,r3
;;;55     	uint8* pByte = (uint8*)pMsg;
000008  4627              MOV      r7,r4
;;;56     	uint16 i = 2;//SWAP16(pMsg->m_Len);
00000a  2502              MOVS     r5,#2
;;;57     	
;;;58     	pByte[i++] = U16_MSB(len);		//Parameter Length MSB
00000c  1231              ASRS     r1,r6,#8
00000e  462a              MOV      r2,r5
000010  1c6d              ADDS     r5,r5,#1
000012  54b9              STRB     r1,[r7,r2]
;;;59     	pByte[i++] = U16_LSB(len);		//Parameter Length LSB
000014  462a              MOV      r2,r5
000016  1c6d              ADDS     r5,r5,#1
000018  54be              STRB     r6,[r7,r2]
;;;60     	
;;;61     	pByte[i++] = U16_MSB(paramId);	//Parameter ID MSB
00001a  9802              LDR      r0,[sp,#8]
00001c  1201              ASRS     r1,r0,#8
00001e  462a              MOV      r2,r5
000020  1c6d              ADDS     r5,r5,#1
000022  54b9              STRB     r1,[r7,r2]
;;;62     	pByte[i++] = U16_LSB(paramId);	//Parameter ID LSB
000024  462a              MOV      r2,r5
000026  1c6d              ADDS     r5,r5,#1
000028  9802              LDR      r0,[sp,#8]
00002a  54b8              STRB     r0,[r7,r2]
;;;63     	
;;;64     	memcpy(&pByte[i], pData, len);	//Parameter Data
00002c  1978              ADDS     r0,r7,r5
00002e  4632              MOV      r2,r6
000030  9903              LDR      r1,[sp,#0xc]
000032  f7fffffe          BL       __aeabi_memcpy
;;;65     	
;;;66     	//i += len;
;;;67     	
;;;68     	//pMsg->m_Len = SWAP16(i);
;;;69     	pMsg->m_Len = SWAP16(len);
000036  70a6              STRB     r6,[r4,#2]
000038  0a30              LSRS     r0,r6,#8
00003a  70e0              STRB     r0,[r4,#3]
;;;70     	
;;;71     
;;;72     	return i;
00003c  4628              MOV      r0,r5
;;;73     }
00003e  b005              ADD      sp,sp,#0x14
000040  bdf0              POP      {r4-r7,pc}
;;;74     
                          ENDP


                          AREA ||i.Iap2CtrlSessionMsg_Init||, CODE, READONLY, ALIGN=2

                  Iap2CtrlSessionMsg_Init PROC
;;;36     
;;;37     int Iap2CtrlSessionMsg_Init(Iap2CtrlSessionMsg* pMsg, uint16 MsgId)
000000  b570              PUSH     {r4-r6,lr}
;;;38     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;39     	memset(pMsg, 0, sizeof(Iap2CtrlSessionMsg));
000006  210e              MOVS     r1,#0xe
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       __aeabi_memclr
;;;40     
;;;41     	pMsg->m_Sof = IAP2_CTRL_SESSION_MSG_SOM;
00000e  4806              LDR      r0,|L2.40|
000010  7020              STRB     r0,[r4,#0]
000012  0a00              LSRS     r0,r0,#8
000014  7060              STRB     r0,[r4,#1]
;;;42     	
;;;43     	pMsg->m_Len   = SWAP16(IAP2_CTRL_SESSION_MSG_HEAD_SIZE);
000016  2006              MOVS     r0,#6
000018  70a0              STRB     r0,[r4,#2]
00001a  2000              MOVS     r0,#0
00001c  70e0              STRB     r0,[r4,#3]
;;;44     	
;;;45     	pMsg->m_MsgId   = SWAP16(MsgId);
00001e  7125              STRB     r5,[r4,#4]
000020  0a28              LSRS     r0,r5,#8
000022  7160              STRB     r0,[r4,#5]
;;;46     
;;;47     	return IAP2_CTRL_SESSION_MSG_HEAD_SIZE;
000024  2006              MOVS     r0,#6
;;;48     }
000026  bd70              POP      {r4-r6,pc}
;;;49     
                          ENDP

                  |L2.40|
                          DCD      0x00004040

                          AREA ||i.Iap2CtrlSessionMsg_swap||, CODE, READONLY, ALIGN=1

                  Iap2CtrlSessionMsg_swap PROC
;;;15     
;;;16     void Iap2CtrlSessionMsg_swap(Iap2CtrlSessionMsg* pMsg)
000000  b530              PUSH     {r4,r5,lr}
;;;17     {
;;;18     	
;;;19     	uint16 i = 0;
000002  2200              MOVS     r2,#0
;;;20     	uint8* pByte = (uint8*)&pMsg->m_Param;
000004  1d83              ADDS     r3,r0,#6
;;;21     	Iap2CtrlSessionMsgParam* pParam = Null;
000006  2100              MOVS     r1,#0
;;;22     	
;;;23     	pMsg->m_Len   = SWAP16(pMsg->m_Len);
000008  78c4              LDRB     r4,[r0,#3]
00000a  7885              LDRB     r5,[r0,#2]
00000c  0224              LSLS     r4,r4,#8
00000e  432c              ORRS     r4,r4,r5
000010  7084              STRB     r4,[r0,#2]
000012  0a24              LSRS     r4,r4,#8
000014  70c4              STRB     r4,[r0,#3]
;;;24     	pMsg->m_MsgId = SWAP16(pMsg->m_MsgId);
000016  7944              LDRB     r4,[r0,#5]
000018  7905              LDRB     r5,[r0,#4]
00001a  0224              LSLS     r4,r4,#8
00001c  432c              ORRS     r4,r4,r5
00001e  7104              STRB     r4,[r0,#4]
000020  0a24              LSRS     r4,r4,#8
000022  7144              STRB     r4,[r0,#5]
;;;25     
;;;26     	while(i < pMsg->m_Len)
000024  e014              B        |L3.80|
                  |L3.38|
;;;27     	{
;;;28     		pParam = (Iap2CtrlSessionMsgParam*)&pByte[i];
000026  1899              ADDS     r1,r3,r2
;;;29     
;;;30     		pParam->m_Len 	= SWAP16(pParam->m_Len);
000028  784c              LDRB     r4,[r1,#1]
00002a  780d              LDRB     r5,[r1,#0]
00002c  0224              LSLS     r4,r4,#8
00002e  432c              ORRS     r4,r4,r5
000030  700c              STRB     r4,[r1,#0]
000032  0a24              LSRS     r4,r4,#8
000034  704c              STRB     r4,[r1,#1]
;;;31     		pParam->m_MsgId = SWAP16(pParam->m_MsgId);
000036  78cc              LDRB     r4,[r1,#3]
000038  788d              LDRB     r5,[r1,#2]
00003a  0224              LSLS     r4,r4,#8
00003c  432c              ORRS     r4,r4,r5
00003e  708c              STRB     r4,[r1,#2]
000040  0a24              LSRS     r4,r4,#8
000042  70cc              STRB     r4,[r1,#3]
;;;32     
;;;33     		i += pParam->m_Len;
000044  784c              LDRB     r4,[r1,#1]
000046  780d              LDRB     r5,[r1,#0]
000048  0224              LSLS     r4,r4,#8
00004a  432c              ORRS     r4,r4,r5
00004c  18a4              ADDS     r4,r4,r2
00004e  b2a2              UXTH     r2,r4
                  |L3.80|
000050  78c4              LDRB     r4,[r0,#3]            ;26
000052  7885              LDRB     r5,[r0,#2]            ;26
000054  0224              LSLS     r4,r4,#8              ;26
000056  432c              ORRS     r4,r4,r5              ;26
000058  4294              CMP      r4,r2                 ;26
00005a  dce4              BGT      |L3.38|
;;;34     	}
;;;35     }
00005c  bd30              POP      {r4,r5,pc}
;;;36     
                          ENDP


                          AREA ||i.Iap2CtrlSession_AuthenticationCerticate||, CODE, READONLY, ALIGN=2

                  Iap2CtrlSession_AuthenticationCerticate PROC
;;;74     
;;;75     static int Iap2CtrlSession_AuthenticationCerticate(const Iap2CtrlSessionMsg* pReq, uint8* pData, uint16* pLen)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;76     {
000002  b088              SUB      sp,sp,#0x20
;;;77     
;;;78     #if 1
;;;79     
;;;80     
;;;81     
;;;82     
;;;83     
;;;84     	 int			 fd = -1;
000004  2000              MOVS     r0,#0
000006  43c0              MVNS     r0,r0
000008  9006              STR      r0,[sp,#0x18]
;;;85     	 int			 err = -1;
00000a  9005              STR      r0,[sp,#0x14]
;;;86     	 uint8_t		 buf[ 2 ];
;;;87     	 uint8_t		 *certificateBuf;
;;;88     	 int certificateLen;
;;;89     	 
;;;90     
;;;91     	 err = i2c_readdata(I2C1,0x20,kMFiAuthReg_DeviceCertificateSize,buf,2);
00000c  2002              MOVS     r0,#2
00000e  ab04              ADD      r3,sp,#0x10
000010  2230              MOVS     r2,#0x30
000012  2120              MOVS     r1,#0x20
000014  9000              STR      r0,[sp,#0]
000016  4843              LDR      r0,|L4.292|
000018  f7fffffe          BL       i2c_readdata
00001c  9005              STR      r0,[sp,#0x14]
;;;92     	 if(err < 0)
00001e  9805              LDR      r0,[sp,#0x14]
000020  2800              CMP      r0,#0
000022  da02              BGE      |L4.42|
;;;93     	 {
;;;94     		 return err;
000024  9805              LDR      r0,[sp,#0x14]
                  |L4.38|
;;;95     	 }
;;;96     	certificateLen = ( buf[ 0 ] << 8 ) | buf[ 1 ];
;;;97     
;;;98     
;;;99     	certificateBuf = (uint8_t *) malloc( certificateLen );
;;;100    	memset(certificateBuf,0,certificateLen);
;;;101    
;;;102    	err = i2c_readdata(I2C1,0x20,kMFiAuthReg_DeviceCertificateData1,certificateBuf,certificateLen);
;;;103    	 if(err < 0)
;;;104    	 	{
;;;105    	 	
;;;106    	 	free(certificateBuf);
;;;107    		 return err;
;;;108    	 	}
;;;109    	
;;;110    	//  iAP2Packet_t* packet = iAP2PacketCreateEmptySendPacket();
;;;111    	   unsigned short parameterLen = ( unsigned short)certificateLen+4;
;;;112    		unsigned short messageLen = ( unsigned short)certificateLen+10;
;;;113    
;;;114    		 uint32_t payloadLen = messageLen;
;;;115    		 uint8_t payload[messageLen];
;;;116    		payload[0]= 0x40;//start of message MSB
;;;117    		 payload[1]= 0x40;// start of message LSB
;;;118    		 payload[2]= (uint8_t)(((messageLen & 0xff00)>> 8)& 0x00ff);// Message Length MSB
;;;119    		 payload[3]= (uint8_t)(messageLen & 0x00ff);// Message Length LSB
;;;120    		  
;;;121    		 payload[4]= 0xAA;// message id MSB
;;;122    		 payload[5]= 0x01;// message id LSB
;;;123    		 payload[6]= (uint8_t)(((parameterLen & 0xff00) >> 8)& 0xff);// parameter length MSB
;;;124    		 payload[7]= (uint8_t)(parameterLen & 0x00ff);// parameter lenth LSB 35 =  31+4
;;;125    		 payload[8]= 0x0;// parameter id id MSB
;;;126    		 payload[9]= 0x0;// parameter id LSB
;;;127    		 memcpy(&(payload[10]),certificateBuf,messageLen-10);
;;;128    
;;;129    
;;;130    		 	 * pLen = sizeof(payload);  //0xaa01 huanghagnjing
;;;131    
;;;132    	 Iap2CtrlSessionMsgParam *pParam = (Iap2CtrlSessionMsgParam *)pData;
;;;133    	 pParam->m_MsgId=0xaa01;
;;;134    	 pParam->m_Len = sizeof(payload);
;;;135    	 if(pParam->m_Data==NULL)
;;;136    	 pParam->m_Data = (uint8*)malloc(pParam->m_Len);
;;;137    	 memcpy(pParam->m_Data,payload,pParam->m_Len);
;;;138    
;;;139    	 
;;;140    		/* iAP2LinkQueueSendData (g_iap2handle->runloop->link,
;;;141    								payload,
;;;142    								payloadLen,
;;;143    								session,
;;;144    								NULL,
;;;145    								NULL);
;;;146    */
;;;147    		 	free(certificateBuf);
;;;148    	 return err;
;;;149    
;;;150    
;;;151    
;;;152    #else
;;;153        uint16 page_num = 0;
;;;154    	uint16 i, len = 0;
;;;155    	uint8 j = 0;
;;;156            	
;;;157    	*pLen = 0;
;;;158        //read data from MFI IC via IIC
;;;159        if(!IicDrv_Read(0x30, pData, 2))
;;;160        {
;;;161    //		SEGGER_RTT_SEGGER_RTT_printf(0,0,"IIC Read data(2) error.\n");
;;;162    		goto End;
;;;163        }
;;;164        
;;;165        len = (pData[0] << 8) + pData[1];
;;;166        if(len > 1024)
;;;167        {
;;;168            len = 1024;
;;;169        }
;;;170    	
;;;171        page_num = len / MFI_IC_PAGE_SIZE;
;;;172        if(len % 128)
;;;173        {
;;;174            page_num ++;
;;;175        }
;;;176        
;;;177        j = 0x31;
;;;178        for(i = 0; i < page_num; i++)
;;;179        {
;;;180            if(!IicDrv_Read(j, pData + (128 * i), 128))
;;;181        	{
;;;182    			SEGGER_RTT_SEGGER_RTT_printf(0,0,"IIC Read Page[%d] len[128] error.\n", i);
;;;183    			goto End;
;;;184            }
;;;185            j++;
;;;186        }
;;;187    
;;;188    	*pLen = len;
;;;189    
;;;190    	return RC_SUCCESS;
;;;191    End:
;;;192    	return RC_FAILED;
;;;193    #endif
;;;194    	
;;;195    }
000026  b00b              ADD      sp,sp,#0x2c
000028  bdf0              POP      {r4-r7,pc}
                  |L4.42|
00002a  4669              MOV      r1,sp                 ;96
00002c  7c08              LDRB     r0,[r1,#0x10]         ;96
00002e  0200              LSLS     r0,r0,#8              ;96
000030  7c49              LDRB     r1,[r1,#0x11]         ;96
000032  4308              ORRS     r0,r0,r1              ;96
000034  9002              STR      r0,[sp,#8]            ;96
000036  9802              LDR      r0,[sp,#8]            ;99
000038  f7fffffe          BL       malloc
00003c  9003              STR      r0,[sp,#0xc]          ;99
00003e  9902              LDR      r1,[sp,#8]            ;100
000040  9803              LDR      r0,[sp,#0xc]          ;100
000042  f7fffffe          BL       __aeabi_memclr
000046  9802              LDR      r0,[sp,#8]            ;102
000048  9000              STR      r0,[sp,#0]            ;102
00004a  2231              MOVS     r2,#0x31              ;102
00004c  2120              MOVS     r1,#0x20              ;102
00004e  4835              LDR      r0,|L4.292|
000050  9b03              LDR      r3,[sp,#0xc]          ;102
000052  f7fffffe          BL       i2c_readdata
000056  9005              STR      r0,[sp,#0x14]         ;102
000058  9805              LDR      r0,[sp,#0x14]         ;103
00005a  2800              CMP      r0,#0                 ;103
00005c  da04              BGE      |L4.104|
00005e  9803              LDR      r0,[sp,#0xc]          ;106
000060  f7fffffe          BL       free
000064  9805              LDR      r0,[sp,#0x14]         ;107
000066  e7de              B        |L4.38|
                  |L4.104|
000068  9802              LDR      r0,[sp,#8]            ;111
00006a  1d00              ADDS     r0,r0,#4              ;111
00006c  b280              UXTH     r0,r0                 ;111
00006e  9001              STR      r0,[sp,#4]            ;111
000070  9802              LDR      r0,[sp,#8]            ;112
000072  300a              ADDS     r0,r0,#0xa            ;112
000074  b286              UXTH     r6,r0                 ;112
000076  bf00              NOP                            ;114
000078  4635              MOV      r5,r6                 ;115
00007a  4628              MOV      r0,r5                 ;115
00007c  f7fffffe          BL       malloc
000080  4604              MOV      r4,r0                 ;115
000082  2040              MOVS     r0,#0x40              ;116
000084  7020              STRB     r0,[r4,#0]            ;116
000086  7060              STRB     r0,[r4,#1]            ;117
000088  20ff              MOVS     r0,#0xff              ;118
00008a  0200              LSLS     r0,r0,#8              ;118
00008c  4030              ANDS     r0,r0,r6              ;118
00008e  1200              ASRS     r0,r0,#8              ;118
000090  70a0              STRB     r0,[r4,#2]            ;118
000092  70e6              STRB     r6,[r4,#3]            ;119
000094  20aa              MOVS     r0,#0xaa              ;121
000096  7120              STRB     r0,[r4,#4]            ;121
000098  2001              MOVS     r0,#1                 ;122
00009a  7160              STRB     r0,[r4,#5]            ;122
00009c  21ff              MOVS     r1,#0xff              ;123
00009e  0209              LSLS     r1,r1,#8              ;123
0000a0  9801              LDR      r0,[sp,#4]            ;123
0000a2  4008              ANDS     r0,r0,r1              ;123
0000a4  1200              ASRS     r0,r0,#8              ;123
0000a6  71a0              STRB     r0,[r4,#6]            ;123
0000a8  9801              LDR      r0,[sp,#4]            ;124
0000aa  71e0              STRB     r0,[r4,#7]            ;124
0000ac  2000              MOVS     r0,#0                 ;125
0000ae  7220              STRB     r0,[r4,#8]            ;125
0000b0  7260              STRB     r0,[r4,#9]            ;126
0000b2  4632              MOV      r2,r6                 ;127
0000b4  3a0a              SUBS     r2,r2,#0xa            ;127
0000b6  4620              MOV      r0,r4                 ;127
0000b8  300a              ADDS     r0,r0,#0xa            ;127
0000ba  9903              LDR      r1,[sp,#0xc]          ;127
0000bc  f7fffffe          BL       __aeabi_memcpy
0000c0  980a              LDR      r0,[sp,#0x28]         ;130
0000c2  8005              STRH     r5,[r0,#0]            ;130
0000c4  9f09              LDR      r7,[sp,#0x24]         ;132
0000c6  4818              LDR      r0,|L4.296|
0000c8  70b8              STRB     r0,[r7,#2]            ;133
0000ca  0a00              LSRS     r0,r0,#8              ;133
0000cc  70f8              STRB     r0,[r7,#3]            ;133
0000ce  703d              STRB     r5,[r7,#0]            ;134
0000d0  0a28              LSRS     r0,r5,#8              ;134
0000d2  7078              STRB     r0,[r7,#1]            ;134
0000d4  1d38              ADDS     r0,r7,#4              ;135
0000d6  f7fffffe          BL       __aeabi_uread4
0000da  2800              CMP      r0,#0                 ;135
0000dc  d10a              BNE      |L4.244|
0000de  7879              LDRB     r1,[r7,#1]            ;136
0000e0  783a              LDRB     r2,[r7,#0]            ;136
0000e2  0209              LSLS     r1,r1,#8              ;136
0000e4  4311              ORRS     r1,r1,r2              ;136
0000e6  4608              MOV      r0,r1                 ;136
0000e8  f7fffffe          BL       malloc
0000ec  1d39              ADDS     r1,r7,#4              ;136
0000ee  9000              STR      r0,[sp,#0]            ;136
0000f0  f7fffffe          BL       __aeabi_uwrite4
                  |L4.244|
0000f4  1d38              ADDS     r0,r7,#4              ;137
0000f6  f7fffffe          BL       __aeabi_uread4
0000fa  9000              STR      r0,[sp,#0]            ;137
0000fc  7878              LDRB     r0,[r7,#1]            ;137
0000fe  7839              LDRB     r1,[r7,#0]            ;137
000100  0200              LSLS     r0,r0,#8              ;137
000102  4308              ORRS     r0,r0,r1              ;137
000104  4602              MOV      r2,r0                 ;137
000106  4621              MOV      r1,r4                 ;137
000108  9800              LDR      r0,[sp,#0]            ;137
00010a  f7fffffe          BL       __aeabi_memcpy
00010e  9803              LDR      r0,[sp,#0xc]          ;147
000110  f7fffffe          BL       free
000114  9805              LDR      r0,[sp,#0x14]         ;148
000116  9007              STR      r0,[sp,#0x1c]         ;148
000118  4620              MOV      r0,r4                 ;148
00011a  f7fffffe          BL       free
00011e  9807              LDR      r0,[sp,#0x1c]         ;148
000120  e781              B        |L4.38|
;;;196    
                          ENDP

000122  0000              DCW      0x0000
                  |L4.292|
                          DCD      0x40005400
                  |L4.296|
                          DCD      0x0000aa01

                          AREA ||i.Iap2CtrlSession_ChallengeRsp||, CODE, READONLY, ALIGN=2

                  Iap2CtrlSession_ChallengeRsp PROC
;;;196    
;;;197    static int Iap2CtrlSession_ChallengeRsp(const Iap2CtrlSessionMsg* pReq, uint8* pData, uint16* pLen)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;198    {
000002  b08c              SUB      sp,sp,#0x30
;;;199    
;;;200     int			 fd = -1;
000004  2000              MOVS     r0,#0
000006  43c0              MVNS     r0,r0
000008  900a              STR      r0,[sp,#0x28]
;;;201     int			 err = -1;
00000a  4605              MOV      r5,r0
;;;202     uint8_t		 buf[ 2 ];
;;;203     uint8_t *   data = pReq->m_Param->m_Data;
00000c  980c              LDR      r0,[sp,#0x30]
00000e  300a              ADDS     r0,r0,#0xa
000010  f7fffffe          BL       __aeabi_uread4
000014  9008              STR      r0,[sp,#0x20]
;;;204    
;;;205     uint8_t * challengReciveBuf ;
;;;206     int challengLen = ((data[11]&0x00ff) <<8)|((data[12]&0x00ff));
000016  9808              LDR      r0,[sp,#0x20]
000018  7ac0              LDRB     r0,[r0,#0xb]
00001a  0200              LSLS     r0,r0,#8
00001c  9908              LDR      r1,[sp,#0x20]
00001e  7b09              LDRB     r1,[r1,#0xc]
000020  4308              ORRS     r0,r0,r1
000022  9006              STR      r0,[sp,#0x18]
;;;207    	if(challengLen > 6)
000024  9806              LDR      r0,[sp,#0x18]
000026  2806              CMP      r0,#6
000028  dd0c              BLE      |L5.68|
;;;208    		{
;;;209    		challengReciveBuf = (uint8_t *)malloc(challengLen-6);
00002a  9906              LDR      r1,[sp,#0x18]
00002c  1f88              SUBS     r0,r1,#6
00002e  f7fffffe          BL       malloc
000032  9007              STR      r0,[sp,#0x1c]
;;;210    		memcpy(challengReciveBuf,&data[15],challengLen-6);
000034  9806              LDR      r0,[sp,#0x18]
000036  1f82              SUBS     r2,r0,#6
000038  9908              LDR      r1,[sp,#0x20]
00003a  310f              ADDS     r1,r1,#0xf
00003c  9807              LDR      r0,[sp,#0x1c]
00003e  f7fffffe          BL       __aeabi_memcpy
000042  e003              B        |L5.76|
                  |L5.68|
;;;211    		}
;;;212    		else
;;;213    			return -1;
000044  2000              MOVS     r0,#0
000046  43c0              MVNS     r0,r0
                  |L5.72|
;;;214    
;;;215       
;;;216    			
;;;217    		
;;;218    			   buf[ 0 ] = (uint8_t)( ( (challengLen-6) >> 8 ) & 0xFF );
;;;219    			   buf[ 1 ] = (uint8_t)(   (challengLen -6)   & 0xFF );
;;;220     err =    i2c_senddata(I2C1,0x20,kMFiAuthReg_ChallengeSize,buf,2);
;;;221    	 if(err < 0)
;;;222    		{
;;;223    	
;;;224    		free(challengReciveBuf);
;;;225    			   return err;
;;;226    		}
;;;227    	  err = i2c_senddata(I2C1,0x20,kMFiAuthReg_ChallengeData,challengReciveBuf,challengLen-6);
;;;228    	 if(err < 0)
;;;229    		{
;;;230    	
;;;231    		free(challengReciveBuf);
;;;232    			   return err;
;;;233    		}
;;;234    
;;;235      buf[ 0 ] = kMFiAuthControl_GenerateSignature;
;;;236    			 
;;;237     err = i2c_senddata(I2C1,0x20,kMFiAuthReg_AuthControlStatus,&buf[0],1);
;;;238      if(err < 0)
;;;239    	{
;;;240    
;;;241    	free(challengReciveBuf);
;;;242    			   return err;
;;;243    	}
;;;244    
;;;245    		
;;;246      buf[ 0 ] = 0;
;;;247    			 
;;;248     err =i2c_readdata(I2C1,0x20,kMFiAuthReg_AuthControlStatus,&buf[0],1);
;;;249      if(err < 0)
;;;250    	{
;;;251    
;;;252    	free(challengReciveBuf);
;;;253    			   return err;
;;;254    	}
;;;255    	 uint8_t staus = (uint8_t)(buf[0]>>4)& 0x0f;
;;;256    	 if(kMFiAuthControl_GenerateSignature!=staus)
;;;257    		{
;;;258    	
;;;259    		free(challengReciveBuf);
;;;260    		return -1;
;;;261    		}
;;;262    
;;;263    				buf[ 0 ] = 0;
;;;264    				buf[ 1 ] = 0;
;;;265    				  err = i2c_readdata(I2C1,0x20,kMFiAuthReg_SignatureSize,buf,2);
;;;266    					  if(err < 0)
;;;267    						{
;;;268    						
;;;269    						free(challengReciveBuf);
;;;270    								return err;
;;;271    						}
;;;272    
;;;273    					 int  signatureLen = ( buf[ 0 ] << 8 ) | buf[ 1 ];
;;;274    
;;;275    					buf[ 0 ] = 0;
;;;276    					buf[ 1 ] = 0;
;;;277    	  err = i2c_readdata(I2C1,0x20,kMFiAuthReg_ChallengeSize,buf,2);
;;;278    		  if(err < 0)
;;;279    			{
;;;280    		
;;;281    			free(challengReciveBuf);
;;;282    					return err;
;;;283    			}
;;;284    		  if(buf[1]==0 && buf[0]==0)
;;;285    			{
;;;286    		
;;;287    			free(challengReciveBuf);
;;;288    			return -1;
;;;289    			}
;;;290    				 challengLen = ( buf[ 0 ] << 8 ) | buf[ 1 ];
;;;291    		  // challengLen = ((buf[1]&0x00ff) <<8)|((buf[0]&0x00ff));
;;;292    			free(challengReciveBuf);
;;;293    		  challengReciveBuf = (uint8_t *)malloc(signatureLen);
;;;294    			err = i2c_readdata(I2C1,0x20,kMFiAuthReg_SignatureData,challengReciveBuf,signatureLen);
;;;295    							if(err < 0)
;;;296    								{
;;;297    							
;;;298    									free(challengReciveBuf);
;;;299    									  return err;
;;;300    								}
;;;301    
;;;302    
;;;303    	  
;;;304    //	iAP2Packet_t* packet = iAP2PacketCreateEmptySendPacket();
;;;305       int parameterLen = signatureLen+4;
;;;306    	int messageLen = signatureLen+10;
;;;307    
;;;308    	 uint32_t payloadLen = messageLen;
;;;309    	 uint8_t payload[messageLen];
;;;310    	
;;;311    	payload[0]= 0x40;//start of message MSB
;;;312    	payload[1]= 0x40;// start of message LSB
;;;313    	payload[2]= (uint8_t)(((messageLen & 0xff00)>> 8)& 0x00ff);// Message Length MSB
;;;314    	payload[3]= (uint8_t)(messageLen & 0x00ff);// Message Length LSB
;;;315    	payload[4]= 0xAA;// message id MSB
;;;316    	payload[5]= 0x03;// message id LSB
;;;317    	payload[6]= (uint8_t)(((parameterLen & 0xff00) >> 8)& 0xff);// parameter length MSB
;;;318    	payload[7]= (uint8_t)(parameterLen & 0x00ff);// parameter lenth LSB 35 =  31+4
;;;319    	payload[8]= 0x0;// parameter id id MSB
;;;320    	payload[9]= 0x0;// parameter id LSB
;;;321    /*
;;;322    	 memcpy(&(payload[10]),challengReciveBuf,messageLen-10);
;;;323    	 iAP2LinkQueueSendData (g_iap2handle->runloop->link,
;;;324    							payload,
;;;325    							payloadLen,
;;;326    							session,
;;;327    							NULL,
;;;328    							NULL);
;;;329    	
;;;330    	 */
;;;331    
;;;332     * pLen = sizeof(payload);	//0xaa01 huanghagnjing
;;;333     
;;;334     Iap2CtrlSessionMsgParam *pParam = (Iap2CtrlSessionMsgParam *)pData;
;;;335     pParam->m_MsgId=0xaa01;
;;;336     pParam->m_Len = sizeof(payload);
;;;337    	 if(pParam->m_Data==NULL)
;;;338    	 pParam->m_Data = (uint8*)malloc(pParam->m_Len);
;;;339     memcpy(pParam->m_Data,payload,pParam->m_Len);
;;;340    
;;;341    
;;;342    
;;;343     free(challengReciveBuf);
;;;344     return err;
;;;345    
;;;346     
;;;347     
;;;348    }
000048  b00f              ADD      sp,sp,#0x3c
00004a  bdf0              POP      {r4-r7,pc}
                  |L5.76|
00004c  9806              LDR      r0,[sp,#0x18]         ;218
00004e  1f80              SUBS     r0,r0,#6              ;218
000050  0400              LSLS     r0,r0,#16             ;218
000052  0e01              LSRS     r1,r0,#24             ;218
000054  a808              ADD      r0,sp,#0x20           ;218
000056  7101              STRB     r1,[r0,#4]            ;218
000058  9806              LDR      r0,[sp,#0x18]         ;219
00005a  1f80              SUBS     r0,r0,#6              ;219
00005c  b2c1              UXTB     r1,r0                 ;219
00005e  a808              ADD      r0,sp,#0x20           ;219
000060  7141              STRB     r1,[r0,#5]            ;219
000062  2002              MOVS     r0,#2                 ;220
000064  ab09              ADD      r3,sp,#0x24           ;220
000066  2220              MOVS     r2,#0x20              ;220
000068  4611              MOV      r1,r2                 ;220
00006a  9000              STR      r0,[sp,#0]            ;220
00006c  487f              LDR      r0,|L5.620|
00006e  f7fffffe          BL       i2c_senddata
000072  4605              MOV      r5,r0                 ;220
000074  2d00              CMP      r5,#0                 ;221
000076  da04              BGE      |L5.130|
000078  9807              LDR      r0,[sp,#0x1c]         ;224
00007a  f7fffffe          BL       free
00007e  4628              MOV      r0,r5                 ;225
000080  e7e2              B        |L5.72|
                  |L5.130|
000082  9806              LDR      r0,[sp,#0x18]         ;227
000084  1f80              SUBS     r0,r0,#6              ;227
000086  9000              STR      r0,[sp,#0]            ;227
000088  2221              MOVS     r2,#0x21              ;227
00008a  2120              MOVS     r1,#0x20              ;227
00008c  4877              LDR      r0,|L5.620|
00008e  9b07              LDR      r3,[sp,#0x1c]         ;227
000090  f7fffffe          BL       i2c_senddata
000094  4605              MOV      r5,r0                 ;227
000096  2d00              CMP      r5,#0                 ;228
000098  da04              BGE      |L5.164|
00009a  9807              LDR      r0,[sp,#0x1c]         ;231
00009c  f7fffffe          BL       free
0000a0  4628              MOV      r0,r5                 ;232
0000a2  e7d1              B        |L5.72|
                  |L5.164|
0000a4  2001              MOVS     r0,#1                 ;235
0000a6  a908              ADD      r1,sp,#0x20           ;235
0000a8  7108              STRB     r0,[r1,#4]            ;235
0000aa  ab09              ADD      r3,sp,#0x24           ;237
0000ac  2210              MOVS     r2,#0x10              ;237
0000ae  2120              MOVS     r1,#0x20              ;237
0000b0  9000              STR      r0,[sp,#0]            ;237
0000b2  486e              LDR      r0,|L5.620|
0000b4  f7fffffe          BL       i2c_senddata
0000b8  4605              MOV      r5,r0                 ;237
0000ba  2d00              CMP      r5,#0                 ;238
0000bc  da04              BGE      |L5.200|
0000be  9807              LDR      r0,[sp,#0x1c]         ;241
0000c0  f7fffffe          BL       free
0000c4  4628              MOV      r0,r5                 ;242
0000c6  e7bf              B        |L5.72|
                  |L5.200|
0000c8  2000              MOVS     r0,#0                 ;246
0000ca  a908              ADD      r1,sp,#0x20           ;246
0000cc  7108              STRB     r0,[r1,#4]            ;246
0000ce  2001              MOVS     r0,#1                 ;248
0000d0  ab09              ADD      r3,sp,#0x24           ;248
0000d2  2210              MOVS     r2,#0x10              ;248
0000d4  2120              MOVS     r1,#0x20              ;248
0000d6  9000              STR      r0,[sp,#0]            ;248
0000d8  4864              LDR      r0,|L5.620|
0000da  f7fffffe          BL       i2c_readdata
0000de  4605              MOV      r5,r0                 ;248
0000e0  2d00              CMP      r5,#0                 ;249
0000e2  da04              BGE      |L5.238|
0000e4  9807              LDR      r0,[sp,#0x1c]         ;252
0000e6  f7fffffe          BL       free
0000ea  4628              MOV      r0,r5                 ;253
0000ec  e7ac              B        |L5.72|
                  |L5.238|
0000ee  a808              ADD      r0,sp,#0x20           ;255
0000f0  7900              LDRB     r0,[r0,#4]            ;255
0000f2  1100              ASRS     r0,r0,#4              ;255
0000f4  9005              STR      r0,[sp,#0x14]         ;255
0000f6  9805              LDR      r0,[sp,#0x14]         ;256
0000f8  2801              CMP      r0,#1                 ;256
0000fa  d005              BEQ      |L5.264|
0000fc  9807              LDR      r0,[sp,#0x1c]         ;259
0000fe  f7fffffe          BL       free
000102  2000              MOVS     r0,#0                 ;260
000104  43c0              MVNS     r0,r0                 ;260
000106  e79f              B        |L5.72|
                  |L5.264|
000108  2100              MOVS     r1,#0                 ;263
00010a  a808              ADD      r0,sp,#0x20           ;263
00010c  7101              STRB     r1,[r0,#4]            ;263
00010e  7141              STRB     r1,[r0,#5]            ;264
000110  2002              MOVS     r0,#2                 ;265
000112  ab09              ADD      r3,sp,#0x24           ;265
000114  2211              MOVS     r2,#0x11              ;265
000116  2120              MOVS     r1,#0x20              ;265
000118  9000              STR      r0,[sp,#0]            ;265
00011a  4854              LDR      r0,|L5.620|
00011c  f7fffffe          BL       i2c_readdata
000120  4605              MOV      r5,r0                 ;265
000122  2d00              CMP      r5,#0                 ;266
000124  da04              BGE      |L5.304|
000126  9807              LDR      r0,[sp,#0x1c]         ;269
000128  f7fffffe          BL       free
00012c  4628              MOV      r0,r5                 ;270
00012e  e78b              B        |L5.72|
                  |L5.304|
000130  a808              ADD      r0,sp,#0x20           ;273
000132  7900              LDRB     r0,[r0,#4]            ;273
000134  0201              LSLS     r1,r0,#8              ;273
000136  a808              ADD      r0,sp,#0x20           ;273
000138  7940              LDRB     r0,[r0,#5]            ;273
00013a  4308              ORRS     r0,r0,r1              ;273
00013c  9004              STR      r0,[sp,#0x10]         ;273
00013e  2100              MOVS     r1,#0                 ;275
000140  a808              ADD      r0,sp,#0x20           ;275
000142  7101              STRB     r1,[r0,#4]            ;275
000144  7141              STRB     r1,[r0,#5]            ;276
000146  2002              MOVS     r0,#2                 ;277
000148  ab09              ADD      r3,sp,#0x24           ;277
00014a  2220              MOVS     r2,#0x20              ;277
00014c  4611              MOV      r1,r2                 ;277
00014e  9000              STR      r0,[sp,#0]            ;277
000150  4846              LDR      r0,|L5.620|
000152  f7fffffe          BL       i2c_readdata
000156  4605              MOV      r5,r0                 ;277
000158  2d00              CMP      r5,#0                 ;278
00015a  da04              BGE      |L5.358|
00015c  9807              LDR      r0,[sp,#0x1c]         ;281
00015e  f7fffffe          BL       free
000162  4628              MOV      r0,r5                 ;282
000164  e770              B        |L5.72|
                  |L5.358|
000166  a808              ADD      r0,sp,#0x20           ;284
000168  7940              LDRB     r0,[r0,#5]            ;284
00016a  2800              CMP      r0,#0                 ;284
00016c  d109              BNE      |L5.386|
00016e  a808              ADD      r0,sp,#0x20           ;284
000170  7900              LDRB     r0,[r0,#4]            ;284
000172  2800              CMP      r0,#0                 ;284
000174  d105              BNE      |L5.386|
000176  9807              LDR      r0,[sp,#0x1c]         ;287
000178  f7fffffe          BL       free
00017c  2000              MOVS     r0,#0                 ;288
00017e  43c0              MVNS     r0,r0                 ;288
000180  e762              B        |L5.72|
                  |L5.386|
000182  a908              ADD      r1,sp,#0x20           ;290
000184  7908              LDRB     r0,[r1,#4]            ;290
000186  0200              LSLS     r0,r0,#8              ;290
000188  7949              LDRB     r1,[r1,#5]            ;290
00018a  4308              ORRS     r0,r0,r1              ;290
00018c  9006              STR      r0,[sp,#0x18]         ;290
00018e  9807              LDR      r0,[sp,#0x1c]         ;292
000190  f7fffffe          BL       free
000194  9804              LDR      r0,[sp,#0x10]         ;293
000196  f7fffffe          BL       malloc
00019a  9007              STR      r0,[sp,#0x1c]         ;293
00019c  9804              LDR      r0,[sp,#0x10]         ;294
00019e  9000              STR      r0,[sp,#0]            ;294
0001a0  2212              MOVS     r2,#0x12              ;294
0001a2  2120              MOVS     r1,#0x20              ;294
0001a4  4831              LDR      r0,|L5.620|
0001a6  9b07              LDR      r3,[sp,#0x1c]         ;294
0001a8  f7fffffe          BL       i2c_readdata
0001ac  4605              MOV      r5,r0                 ;294
0001ae  2d00              CMP      r5,#0                 ;295
0001b0  da04              BGE      |L5.444|
0001b2  9807              LDR      r0,[sp,#0x1c]         ;298
0001b4  f7fffffe          BL       free
0001b8  4628              MOV      r0,r5                 ;299
0001ba  e745              B        |L5.72|
                  |L5.444|
0001bc  9804              LDR      r0,[sp,#0x10]         ;305
0001be  1d00              ADDS     r0,r0,#4              ;305
0001c0  9003              STR      r0,[sp,#0xc]          ;305
0001c2  9804              LDR      r0,[sp,#0x10]         ;306
0001c4  4607              MOV      r7,r0                 ;306
0001c6  370a              ADDS     r7,r7,#0xa            ;306
0001c8  9702              STR      r7,[sp,#8]            ;306
0001ca  bf00              NOP                            ;308
0001cc  9f02              LDR      r7,[sp,#8]            ;309
0001ce  4638              MOV      r0,r7                 ;309
0001d0  f7fffffe          BL       malloc
0001d4  4604              MOV      r4,r0                 ;309
0001d6  2040              MOVS     r0,#0x40              ;311
0001d8  7020              STRB     r0,[r4,#0]            ;311
0001da  7060              STRB     r0,[r4,#1]            ;312
0001dc  20ff              MOVS     r0,#0xff              ;313
0001de  0200              LSLS     r0,r0,#8              ;313
0001e0  9f02              LDR      r7,[sp,#8]            ;313
0001e2  4038              ANDS     r0,r0,r7              ;313
0001e4  1200              ASRS     r0,r0,#8              ;313
0001e6  70a0              STRB     r0,[r4,#2]            ;313
0001e8  9f02              LDR      r7,[sp,#8]            ;314
0001ea  70e7              STRB     r7,[r4,#3]            ;314
0001ec  20aa              MOVS     r0,#0xaa              ;315
0001ee  7120              STRB     r0,[r4,#4]            ;315
0001f0  2003              MOVS     r0,#3                 ;316
0001f2  7160              STRB     r0,[r4,#5]            ;316
0001f4  21ff              MOVS     r1,#0xff              ;317
0001f6  0209              LSLS     r1,r1,#8              ;317
0001f8  9803              LDR      r0,[sp,#0xc]          ;317
0001fa  4008              ANDS     r0,r0,r1              ;317
0001fc  1200              ASRS     r0,r0,#8              ;317
0001fe  71a0              STRB     r0,[r4,#6]            ;317
000200  9803              LDR      r0,[sp,#0xc]          ;318
000202  71e0              STRB     r0,[r4,#7]            ;318
000204  2000              MOVS     r0,#0                 ;319
000206  7220              STRB     r0,[r4,#8]            ;319
000208  7260              STRB     r0,[r4,#9]            ;320
00020a  980e              LDR      r0,[sp,#0x38]         ;332
00020c  8007              STRH     r7,[r0,#0]            ;332
00020e  9e0d              LDR      r6,[sp,#0x34]         ;334
000210  4817              LDR      r0,|L5.624|
000212  70b0              STRB     r0,[r6,#2]            ;335
000214  0a00              LSRS     r0,r0,#8              ;335
000216  70f0              STRB     r0,[r6,#3]            ;335
000218  b2b8              UXTH     r0,r7                 ;336
00021a  7030              STRB     r0,[r6,#0]            ;336
00021c  0a00              LSRS     r0,r0,#8              ;336
00021e  7070              STRB     r0,[r6,#1]            ;336
000220  1d30              ADDS     r0,r6,#4              ;337
000222  f7fffffe          BL       __aeabi_uread4
000226  2800              CMP      r0,#0                 ;337
000228  d10a              BNE      |L5.576|
00022a  7871              LDRB     r1,[r6,#1]            ;338
00022c  7832              LDRB     r2,[r6,#0]            ;338
00022e  0209              LSLS     r1,r1,#8              ;338
000230  4311              ORRS     r1,r1,r2              ;338
000232  4608              MOV      r0,r1                 ;338
000234  f7fffffe          BL       malloc
000238  1d31              ADDS     r1,r6,#4              ;338
00023a  9001              STR      r0,[sp,#4]            ;338
00023c  f7fffffe          BL       __aeabi_uwrite4
                  |L5.576|
000240  1d30              ADDS     r0,r6,#4              ;339
000242  f7fffffe          BL       __aeabi_uread4
000246  9001              STR      r0,[sp,#4]            ;339
000248  7870              LDRB     r0,[r6,#1]            ;339
00024a  7831              LDRB     r1,[r6,#0]            ;339
00024c  0200              LSLS     r0,r0,#8              ;339
00024e  4308              ORRS     r0,r0,r1              ;339
000250  4602              MOV      r2,r0                 ;339
000252  4621              MOV      r1,r4                 ;339
000254  9801              LDR      r0,[sp,#4]            ;339
000256  f7fffffe          BL       __aeabi_memcpy
00025a  9807              LDR      r0,[sp,#0x1c]         ;343
00025c  f7fffffe          BL       free
000260  4620              MOV      r0,r4                 ;344
000262  950b              STR      r5,[sp,#0x2c]         ;344
000264  f7fffffe          BL       free
000268  980b              LDR      r0,[sp,#0x2c]         ;344
00026a  e6ed              B        |L5.72|
;;;349    
                          ENDP

                  |L5.620|
                          DCD      0x40005400
                  |L5.624|
                          DCD      0x0000aa01

                          AREA ||i.Iap2CtrlSession_EventProc||, CODE, READONLY, ALIGN=2

                  Iap2CtrlSession_EventProc PROC
;;;438    
;;;439    int Iap2CtrlSession_EventProc(Iap2CtrlSession* pSession, Iap2Event eventId)
000000  b570              PUSH     {r4-r6,lr}
;;;440    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;441    	//PF_VAR(DL_MAIN, eventId);
;;;442    	
;;;443    	if(IAP2_EVENT_SESSION_DONE == eventId)
000006  2d08              CMP      r5,#8
000008  d127              BNE      |L6.90|
;;;444    	{
;;;445    		if(IAP2_REQ_AUTH == pSession->m_MsgId
00000a  7c60              LDRB     r0,[r4,#0x11]
00000c  7c21              LDRB     r1,[r4,#0x10]
00000e  0200              LSLS     r0,r0,#8
000010  4308              ORRS     r0,r0,r1
000012  2155              MOVS     r1,#0x55
000014  0249              LSLS     r1,r1,#9
000016  4288              CMP      r0,r1
000018  d00e              BEQ      |L6.56|
;;;446    			|| IAP2_REQ_AUTH_CHA_RSP == pSession->m_MsgId
00001a  7c60              LDRB     r0,[r4,#0x11]
00001c  7c21              LDRB     r1,[r4,#0x10]
00001e  0200              LSLS     r0,r0,#8
000020  4308              ORRS     r0,r0,r1
000022  4912              LDR      r1,|L6.108|
000024  4288              CMP      r0,r1
000026  d007              BEQ      |L6.56|
;;;447    			|| IAP2_RSP_AUTH_RESULT_SUCCESS == pSession->m_MsgId)
000028  7c60              LDRB     r0,[r4,#0x11]
00002a  7c21              LDRB     r1,[r4,#0x10]
00002c  0200              LSLS     r0,r0,#8
00002e  4308              ORRS     r0,r0,r1
000030  490e              LDR      r1,|L6.108|
000032  1cc9              ADDS     r1,r1,#3
000034  4288              CMP      r0,r1
000036  d103              BNE      |L6.64|
                  |L6.56|
;;;448    		{
;;;449    			SessionMgr_RxReq((SessionMgr*)pSession);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       SessionMgr_RxReq
00003e  e013              B        |L6.104|
                  |L6.64|
;;;450    		}
;;;451    		else if(IAP2_REQ_ID_ACCEPTED == pSession->m_MsgId)
000040  7c60              LDRB     r0,[r4,#0x11]
000042  7c21              LDRB     r1,[r4,#0x10]
000044  0200              LSLS     r0,r0,#8
000046  4308              ORRS     r0,r0,r1
000048  4909              LDR      r1,|L6.112|
00004a  4288              CMP      r0,r1
00004c  d10c              BNE      |L6.104|
;;;452    		{
;;;453    			SessionMgr_TxReq((SessionMgr*)pSession, Null, 0);
00004e  2200              MOVS     r2,#0
000050  4611              MOV      r1,r2
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       SessionMgr_TxReq
000058  e006              B        |L6.104|
                  |L6.90|
;;;454    		}
;;;455    	}
;;;456    	else if(IAP2_EVENT_LINK_SYNC_DONE == eventId)
00005a  2d05              CMP      r5,#5
00005c  d103              BNE      |L6.102|
;;;457    	{
;;;458    		SessionMgr_RxReq((SessionMgr*)pSession);
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       SessionMgr_RxReq
000064  e000              B        |L6.104|
                  |L6.102|
;;;459    	}
;;;460    	else if(IAP2_EVENT_TRANSFER_FAILED == eventId)
000066  bf00              NOP      
                  |L6.104|
;;;461    	{
;;;462    		//Break the session
;;;463    	}
;;;464    	return IAP2RC_SUCCESS;
000068  2000              MOVS     r0,#0
;;;465    }
00006a  bd70              POP      {r4-r6,pc}
;;;466     uint8_t	 keyboard_reportDescriptor[] = {
                          ENDP

                  |L6.108|
                          DCD      0x0000aa02
                  |L6.112|
                          DCD      0x00001d02

                          AREA ||i.Iap2CtrlSession_GetIDInfo||, CODE, READONLY, ALIGN=2

                  Iap2CtrlSession_GetIDInfo PROC
;;;421    
;;;422    static int Iap2CtrlSession_GetIDInfo(const Iap2CtrlSessionMsg* pReq, uint8* pData, uint16* pLen)
000000  b5f8              PUSH     {r3-r7,lr}
;;;423    {
000002  460d              MOV      r5,r1
000004  4616              MOV      r6,r2
;;;424    	* pLen = sizeof(iAP2_identificationInformation);  //0xaa01 huanghagnjing
000006  20ea              MOVS     r0,#0xea
000008  8030              STRH     r0,[r6,#0]
;;;425    	// uint8* pDataInfo = iAP2_identificationInformation;
;;;426    	Iap2CtrlSessionMsgParam *pParam = (Iap2CtrlSessionMsgParam *)pData;
00000a  462c              MOV      r4,r5
;;;427    	pParam->m_MsgId=0x1d01;
00000c  4813              LDR      r0,|L7.92|
00000e  70a0              STRB     r0,[r4,#2]
000010  0a00              LSRS     r0,r0,#8
000012  70e0              STRB     r0,[r4,#3]
;;;428    	pParam->m_Len = sizeof(iAP2_identificationInformation);
000014  20ea              MOVS     r0,#0xea
000016  7020              STRB     r0,[r4,#0]
000018  2000              MOVS     r0,#0
00001a  7060              STRB     r0,[r4,#1]
;;;429    	if(pParam->m_Data == NULL)
00001c  1d20              ADDS     r0,r4,#4
00001e  f7fffffe          BL       __aeabi_uread4
000022  2800              CMP      r0,#0
000024  d10a              BNE      |L7.60|
;;;430    		pParam->m_Data = (uint8*)malloc(pParam->m_Len);
000026  7861              LDRB     r1,[r4,#1]
000028  7822              LDRB     r2,[r4,#0]
00002a  0209              LSLS     r1,r1,#8
00002c  4311              ORRS     r1,r1,r2
00002e  4608              MOV      r0,r1
000030  f7fffffe          BL       malloc
000034  4607              MOV      r7,r0
000036  1d21              ADDS     r1,r4,#4
000038  f7fffffe          BL       __aeabi_uwrite4
                  |L7.60|
;;;431    	memcpy(pParam->m_Data,iAP2_identificationInformation,pParam->m_Len);
00003c  1d20              ADDS     r0,r4,#4
00003e  f7fffffe          BL       __aeabi_uread4
000042  4607              MOV      r7,r0
000044  7860              LDRB     r0,[r4,#1]
000046  7821              LDRB     r1,[r4,#0]
000048  0200              LSLS     r0,r0,#8
00004a  4308              ORRS     r0,r0,r1
00004c  4602              MOV      r2,r0
00004e  4904              LDR      r1,|L7.96|
000050  4638              MOV      r0,r7
000052  f7fffffe          BL       __aeabi_memcpy
;;;432    	//pParam->m_Data = pDataInfo; 
;;;433    	//pParam->m_Data = iAP2_identificationInformation;
;;;434    	//iAP2_identificationInformation;
;;;435    	
;;;436    	return IAP2RC_SUCCESS;
000056  2000              MOVS     r0,#0
;;;437    }
000058  bdf8              POP      {r3-r7,pc}
;;;438    
                          ENDP

00005a  0000              DCW      0x0000
                  |L7.92|
                          DCD      0x00001d01
                  |L7.96|
                          DCD      iAP2_identificationInformation

                          AREA ||i.Iap2CtrlSession_Init||, CODE, READONLY, ALIGN=2

                  Iap2CtrlSession_Init PROC
;;;661    
;;;662    Bool Iap2CtrlSession_Init(Iap2CtrlSession* pIap2CtrlSession)
000000  b570              PUSH     {r4-r6,lr}
;;;663    {
000002  4604              MOV      r4,r0
;;;664    	SessionIden* pSessionIden = (SessionIden*)pIap2CtrlSession;
000004  4626              MOV      r6,r4
;;;665    	SessionMgr* pSession = (SessionMgr*)pIap2CtrlSession;
000006  4625              MOV      r5,r4
;;;666    
;;;667    	memset(pIap2CtrlSession, 0, sizeof(Iap2CtrlSession));
000008  212e              MOVS     r1,#0x2e
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       __aeabi_memclr
;;;668    	SessionMgr_Init(pSession);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       SessionMgr_Init
;;;669    	
;;;670    	pSessionIden->m_ID   = CONTROL_SESSION_ID;
000016  200a              MOVS     r0,#0xa
000018  7030              STRB     r0,[r6,#0]
;;;671    	pSessionIden->m_Type = CONTROL_SESSION_TYPE;
00001a  2000              MOVS     r0,#0
00001c  7070              STRB     r0,[r6,#1]
;;;672    	pSessionIden->m_Ver  = CONTROL_SESSION_VERSION;
00001e  2001              MOVS     r0,#1
000020  70b0              STRB     r0,[r6,#2]
;;;673    	
;;;674    	pSession->EventProc = (Iap2EventFn)Iap2CtrlSession_EventProc;
000022  1d29              ADDS     r1,r5,#4
000024  4809              LDR      r0,|L8.76|
000026  f7fffffe          BL       __aeabi_uwrite4
;;;675    	pSession->ReqProc 	= (Iap2ReqFn)Iap2CtrlSession_ReqProc;
00002a  4629              MOV      r1,r5
00002c  3108              ADDS     r1,r1,#8
00002e  4808              LDR      r0,|L8.80|
000030  f7fffffe          BL       __aeabi_uwrite4
;;;676    	pSession->RspProc 	= (Iap2RspFn)Iap2CtrlSession_RspProc;
000034  4629              MOV      r1,r5
000036  310c              ADDS     r1,r1,#0xc
000038  4806              LDR      r0,|L8.84|
00003a  f7fffffe          BL       __aeabi_uwrite4
;;;677    
;;;678    	Iap2Link_RegSession(g_pIap2Link, pSession);
00003e  4629              MOV      r1,r5
000040  4805              LDR      r0,|L8.88|
000042  6800              LDR      r0,[r0,#0]  ; g_pIap2Link
000044  f7fffffe          BL       Iap2Link_RegSession
;;;679    
;;;680    	return True;
000048  2001              MOVS     r0,#1
;;;681    }
00004a  bd70              POP      {r4-r6,pc}
;;;682    
                          ENDP

                  |L8.76|
                          DCD      Iap2CtrlSession_EventProc
                  |L8.80|
                          DCD      Iap2CtrlSession_ReqProc
                  |L8.84|
                          DCD      Iap2CtrlSession_RspProc
                  |L8.88|
                          DCD      g_pIap2Link

                          AREA ||i.Iap2CtrlSession_ReqProc||, CODE, READONLY, ALIGN=2

                  Iap2CtrlSession_ReqProc PROC
;;;606    
;;;607    int Iap2CtrlSession_ReqProc(Iap2CtrlSession* pSession, const Iap2CtrlSessionMsg* pReq, Iap2CtrlSessionMsg* pRsp, uint16* pLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;608    {	
000002  b081              SUB      sp,sp,#4
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
000008  461f              MOV      r7,r3
;;;609    	uint16 nRspLen = 0;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;610    //	int nRet = RC_UNKNOWN;
;;;611    	uint16 msgId = SWAP16(pReq->m_MsgId);
00000e  7970              LDRB     r0,[r6,#5]
000010  7931              LDRB     r1,[r6,#4]
000012  0200              LSLS     r0,r0,#8
000014  4308              ORRS     r0,r0,r1
000016  4605              MOV      r5,r0
;;;612    
;;;613    	*pLen = 0;
000018  2000              MOVS     r0,#0
00001a  8038              STRH     r0,[r7,#0]
;;;614    	Iap2CtrlSessionMsg_Init(pRsp, msgId + 1);
00001c  1c68              ADDS     r0,r5,#1
00001e  b281              UXTH     r1,r0
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       Iap2CtrlSessionMsg_Init
;;;615    
;;;616    	pSession->m_MsgId = msgId;
000026  9801              LDR      r0,[sp,#4]
000028  7405              STRB     r5,[r0,#0x10]
00002a  0a29              LSRS     r1,r5,#8
00002c  7441              STRB     r1,[r0,#0x11]
;;;617    	if(IAP2_REQ_AUTH == msgId) //aa00
00002e  2055              MOVS     r0,#0x55
000030  0240              LSLS     r0,r0,#9
000032  4285              CMP      r5,r0
000034  d105              BNE      |L9.66|
;;;618    	{
;;;619    		Iap2CtrlSession_AuthenticationCerticate(pReq, (uint8*)pRsp->m_Param, &nRspLen);
000036  466a              MOV      r2,sp
000038  1da1              ADDS     r1,r4,#6
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       Iap2CtrlSession_AuthenticationCerticate
000040  e02b              B        |L9.154|
                  |L9.66|
;;;620    	}
;;;621    	else if(IAP2_REQ_AUTH_CHA_RSP == msgId) //aa02
000042  481d              LDR      r0,|L9.184|
000044  4285              CMP      r5,r0
000046  d105              BNE      |L9.84|
;;;622    	{
;;;623    		Iap2CtrlSession_ChallengeRsp(pReq, (uint8*)pRsp->m_Param, &nRspLen);
000048  466a              MOV      r2,sp
00004a  1da1              ADDS     r1,r4,#6
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       Iap2CtrlSession_ChallengeRsp
000052  e022              B        |L9.154|
                  |L9.84|
;;;624    	}
;;;625    	else if(IAP2_RSP_AUTH_RESULT_SUCCESS == msgId)
000054  4818              LDR      r0,|L9.184|
000056  1cc0              ADDS     r0,r0,#3
000058  4285              CMP      r5,r0
00005a  d01e              BEQ      |L9.154|
;;;626    	{
;;;627    		//No Response
;;;628    	}
;;;629    	else if(IAP2_REQ_ID == msgId)
00005c  201d              MOVS     r0,#0x1d
00005e  0200              LSLS     r0,r0,#8
000060  4285              CMP      r5,r0
000062  d105              BNE      |L9.112|
;;;630    	{
;;;631    		Iap2CtrlSession_GetIDInfo(pReq, (uint8*)pRsp->m_Param, &nRspLen);
000064  466a              MOV      r2,sp
000066  1da1              ADDS     r1,r4,#6
000068  4630              MOV      r0,r6
00006a  f7fffffe          BL       Iap2CtrlSession_GetIDInfo
00006e  e014              B        |L9.154|
                  |L9.112|
;;;632    	}
;;;633    	else if(IAP2_REQ_ID_ACCEPTED == msgId)
000070  4812              LDR      r0,|L9.188|
000072  4285              CMP      r5,r0
000074  d108              BNE      |L9.136|
;;;634    	{
;;;635    	startKeyboardHid(pReq, (uint8*)pRsp->m_Param, &nRspLen);
000076  466a              MOV      r2,sp
000078  1da1              ADDS     r1,r4,#6
00007a  4630              MOV      r0,r6
00007c  f7fffffe          BL       startKeyboardHid
;;;636    	g_start_key = TRUE;
000080  2001              MOVS     r0,#1
000082  490f              LDR      r1,|L9.192|
000084  7008              STRB     r0,[r1,#0]
000086  e008              B        |L9.154|
                  |L9.136|
;;;637    		//No Response
;;;638    	}
;;;639    	else if(IAP2_REQ_ID_REJECTED == msgId)
000088  480c              LDR      r0,|L9.188|
00008a  1c40              ADDS     r0,r0,#1
00008c  4285              CMP      r5,r0
00008e  d104              BNE      |L9.154|
;;;640    		{
;;;641    		   Iap2CtrlSession_GetIDInfo(pReq, (uint8*)pRsp->m_Param, &nRspLen);
000090  466a              MOV      r2,sp
000092  1da1              ADDS     r1,r4,#6
000094  4630              MOV      r0,r6
000096  f7fffffe          BL       Iap2CtrlSession_GetIDInfo
                  |L9.154|
;;;642    		}
;;;643    	
;;;644    	if(nRspLen)
00009a  4668              MOV      r0,sp
00009c  8800              LDRH     r0,[r0,#0]
00009e  2800              CMP      r0,#0
0000a0  d007              BEQ      |L9.178|
;;;645    	{
;;;646    		*pLen = Iap2CtrlSessionMsg_AddParam(pRsp, 0, (uint8*)pRsp->m_Param, nRspLen);
0000a2  4668              MOV      r0,sp
0000a4  8803              LDRH     r3,[r0,#0]
0000a6  1da2              ADDS     r2,r4,#6
0000a8  2100              MOVS     r1,#0
0000aa  4620              MOV      r0,r4
0000ac  f7fffffe          BL       Iap2CtrlSessionMsg_AddParam
0000b0  8038              STRH     r0,[r7,#0]
                  |L9.178|
;;;647    	}
;;;648    
;;;649    	return IAP2RC_SUCCESS;
0000b2  2000              MOVS     r0,#0
;;;650    }
0000b4  b005              ADD      sp,sp,#0x14
0000b6  bdf0              POP      {r4-r7,pc}
;;;651    
                          ENDP

                  |L9.184|
                          DCD      0x0000aa02
                  |L9.188|
                          DCD      0x00001d02
                  |L9.192|
                          DCD      g_start_key

                          AREA ||i.Iap2CtrlSession_RspProc||, CODE, READONLY, ALIGN=1

                  Iap2CtrlSession_RspProc PROC
;;;651    
;;;652    int Iap2CtrlSession_RspProc(Iap2CtrlSession* pSession, const Iap2CtrlSessionMsg* pReq, const Iap2CtrlSessionMsg* pRsp)
000000  4603              MOV      r3,r0
;;;653    {
;;;654    	return IAP2RC_SUCCESS;
000002  2000              MOVS     r0,#0
;;;655    }
000004  4770              BX       lr
;;;656    
                          ENDP


                          AREA ||i.Iap2CtrlSession_SendMsg||, CODE, READONLY, ALIGN=2

                  Iap2CtrlSession_SendMsg PROC
;;;656    
;;;657    Bool Iap2CtrlSession_SendMsg(Iap2CtrlSession* pIap2CtrlSession, Iap2CtrlSessionMsg* pMsg)
000000  b538              PUSH     {r3-r5,lr}
;;;658    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;659    	return Iap2Link_TxData(g_pIap2Link, pMsg, pMsg->m_Len, 0, 0);
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  78e0              LDRB     r0,[r4,#3]
00000c  78a1              LDRB     r1,[r4,#2]
00000e  0200              LSLS     r0,r0,#8
000010  4308              ORRS     r0,r0,r1
000012  4602              MOV      r2,r0
000014  2300              MOVS     r3,#0
000016  4621              MOV      r1,r4
000018  4802              LDR      r0,|L11.36|
00001a  6800              LDR      r0,[r0,#0]  ; g_pIap2Link
00001c  f7fffffe          BL       Iap2Link_TxData
;;;660    }
000020  bd38              POP      {r3-r5,pc}
;;;661    
                          ENDP

000022  0000              DCW      0x0000
                  |L11.36|
                          DCD      g_pIap2Link

                          AREA ||i.startKeyboardHid||, CODE, READONLY, ALIGN=2

                  startKeyboardHid PROC
;;;515    									  };
;;;516     void startKeyboardHid(const Iap2CtrlSessionMsg* pReq, uint8* pData, uint16* pLen)
000000  b5f0              PUSH     {r4-r7,lr}
;;;517    
;;;518    {
000002  b0ff              SUB      sp,sp,#0x1fc
000004  b0ff              SUB      sp,sp,#0x1fc
000006  b083              SUB      sp,sp,#0xc
000008  460f              MOV      r7,r1
;;;519    
;;;520    
;;;521    	int messageLen = 0;
00000a  2400              MOVS     r4,#0
;;;522    	int len;
;;;523       // uint32_t payloadLen = messageLen;
;;;524    
;;;525    	uint8_t payload[1024];
;;;526       payload[0]= 0x40;//start of message MSB
00000c  2140              MOVS     r1,#0x40
00000e  4668              MOV      r0,sp
000010  7101              STRB     r1,[r0,#4]
;;;527       payload[1]= 0x40;// start of message LSB
000012  7141              STRB     r1,[r0,#5]
;;;528       //payload[2]= (uint8_t)(((messageLen & 0xff00)>> 8)& 0x00ff);// Message Length MSB
;;;529       //payload[3]= (uint8_t)(messageLen & 0x00ff);// Message Length LSB
;;;530     
;;;531       payload[4]= 0x68;// message id MSB
000014  2168              MOVS     r1,#0x68
000016  7201              STRB     r1,[r0,#8]
;;;532       payload[5]= 0x00;// message id LSB
000018  2100              MOVS     r1,#0
00001a  7241              STRB     r1,[r0,#9]
;;;533       messageLen +=6;
00001c  1da4              ADDS     r4,r4,#6
;;;534    
;;;535       //HIDComponentIdentifier
;;;536       len = 6;
00001e  2506              MOVS     r5,#6
;;;537       payload[messageLen]= (uint8_t)(((len & 0xff00) >> 8)& 0xff);// parameter length MSB
000020  20ff              MOVS     r0,#0xff
000022  0200              LSLS     r0,r0,#8
000024  4028              ANDS     r0,r0,r5
000026  1201              ASRS     r1,r0,#8
000028  aa01              ADD      r2,sp,#4
00002a  5511              STRB     r1,[r2,r4]
;;;538       payload[messageLen+1]= (uint8_t)(len & 0x00ff);// parameter lenth LSB 35 =  31+4
00002c  a801              ADD      r0,sp,#4
00002e  1c61              ADDS     r1,r4,#1
000030  5445              STRB     r5,[r0,r1]
;;;539       payload[messageLen+2]= 0x0;// parameter id id MSB
000032  2000              MOVS     r0,#0
000034  a901              ADD      r1,sp,#4
000036  1ca2              ADDS     r2,r4,#2
000038  5488              STRB     r0,[r1,r2]
;;;540       payload[messageLen+3]= 0x00;// parameter id LSB
00003a  1ce2              ADDS     r2,r4,#3
00003c  5488              STRB     r0,[r1,r2]
;;;541       payload[messageLen+4]= 0x00;// 
00003e  1d22              ADDS     r2,r4,#4
000040  5488              STRB     r0,[r1,r2]
;;;542       payload[messageLen+5]= 0x01;// 
000042  2001              MOVS     r0,#1
000044  1d62              ADDS     r2,r4,#5
000046  5488              STRB     r0,[r1,r2]
;;;543       messageLen+=len;
000048  1964              ADDS     r4,r4,r5
;;;544    
;;;545       //vendorIdentifier
;;;546       len = 6;
00004a  bf00              NOP      
;;;547       payload[messageLen]= (uint8_t)(((len & 0xff00) >> 8)& 0xff);// parameter length MSB
00004c  20ff              MOVS     r0,#0xff
00004e  0200              LSLS     r0,r0,#8
000050  4028              ANDS     r0,r0,r5
000052  1200              ASRS     r0,r0,#8
000054  5508              STRB     r0,[r1,r4]
;;;548       payload[messageLen+1]= (uint8_t)(len & 0x00ff);// parameter lenth LSB 35 =  31+4
000056  a801              ADD      r0,sp,#4
000058  1c61              ADDS     r1,r4,#1
00005a  5445              STRB     r5,[r0,r1]
;;;549       payload[messageLen+2]= 0x0;// parameter id id MSB
00005c  2000              MOVS     r0,#0
00005e  a901              ADD      r1,sp,#4
000060  1ca2              ADDS     r2,r4,#2
000062  5488              STRB     r0,[r1,r2]
;;;550       payload[messageLen+3]= 0x01;// parameter id LSB
000064  2001              MOVS     r0,#1
000066  1ce2              ADDS     r2,r4,#3
000068  5488              STRB     r0,[r1,r2]
;;;551       payload[messageLen+4]= 0x05;// 
00006a  2005              MOVS     r0,#5
00006c  1d22              ADDS     r2,r4,#4
00006e  5488              STRB     r0,[r1,r2]
;;;552       payload[messageLen+5]= 0xac;// 
000070  20ac              MOVS     r0,#0xac
000072  1d62              ADDS     r2,r4,#5
000074  5488              STRB     r0,[r1,r2]
;;;553       //payload[messageLen+4]= 0x18;// 
;;;554      // payload[messageLen+5]= 0xd1;// 
;;;555       messageLen+=len;
000076  1964              ADDS     r4,r4,r5
;;;556    
;;;557       //productIdentifier
;;;558       len = 6;
000078  bf00              NOP      
;;;559       payload[messageLen]= (uint8_t)(((len & 0xff00) >> 8)& 0xff);// parameter length MSB
00007a  20ff              MOVS     r0,#0xff
00007c  0200              LSLS     r0,r0,#8
00007e  4028              ANDS     r0,r0,r5
000080  1200              ASRS     r0,r0,#8
000082  5508              STRB     r0,[r1,r4]
;;;560       payload[messageLen+1]= (uint8_t)(len & 0x00ff);// parameter lenth LSB 35 =  31+4
000084  a801              ADD      r0,sp,#4
000086  1c61              ADDS     r1,r4,#1
000088  5445              STRB     r5,[r0,r1]
;;;561       payload[messageLen+2]= 0x0;// parameter id id MSB
00008a  2000              MOVS     r0,#0
00008c  a901              ADD      r1,sp,#4
00008e  1ca2              ADDS     r2,r4,#2
000090  5488              STRB     r0,[r1,r2]
;;;562       payload[messageLen+3]= 0x02;// parameter id LSB
000092  2002              MOVS     r0,#2
000094  1ce2              ADDS     r2,r4,#3
000096  5488              STRB     r0,[r1,r2]
;;;563       payload[messageLen+4]= 0x12;//0x00;// 
000098  2012              MOVS     r0,#0x12
00009a  1d22              ADDS     r2,r4,#4
00009c  5488              STRB     r0,[r1,r2]
;;;564       payload[messageLen+5]= 0xa8;//0x00;// 
00009e  20a8              MOVS     r0,#0xa8
0000a0  1d62              ADDS     r2,r4,#5
0000a2  5488              STRB     r0,[r1,r2]
;;;565    // payload[messageLen+4]= 0x00;//0x00;// 
;;;566      // payload[messageLen+5]= 0x00;//0x00;//
;;;567       messageLen+=len;
0000a4  1964              ADDS     r4,r4,r5
;;;568    
;;;569       //playback hid report
;;;570       len = 4+sizeof(keyboard_reportDescriptor);
0000a6  2563              MOVS     r5,#0x63
;;;571       payload[messageLen]= (uint8_t)(((len & 0xff00) >> 8)& 0xff);// parameter length MSB
0000a8  20ff              MOVS     r0,#0xff
0000aa  0200              LSLS     r0,r0,#8
0000ac  4028              ANDS     r0,r0,r5
0000ae  1200              ASRS     r0,r0,#8
0000b0  5508              STRB     r0,[r1,r4]
;;;572       payload[messageLen+1]= (uint8_t)(len & 0x00ff);// parameter lenth LSB 35 =  31+4
0000b2  a801              ADD      r0,sp,#4
0000b4  1c61              ADDS     r1,r4,#1
0000b6  5445              STRB     r5,[r0,r1]
;;;573       payload[messageLen+2]= 0x0;// parameter id id MSB
0000b8  2000              MOVS     r0,#0
0000ba  a901              ADD      r1,sp,#4
0000bc  1ca2              ADDS     r2,r4,#2
0000be  5488              STRB     r0,[r1,r2]
;;;574       payload[messageLen+3]= 0x04;// parameter id LSB
0000c0  2004              MOVS     r0,#4
0000c2  1ce2              ADDS     r2,r4,#3
0000c4  5488              STRB     r0,[r1,r2]
;;;575       memcpy(&payload[messageLen+4],keyboard_reportDescriptor,sizeof(keyboard_reportDescriptor));
0000c6  1d22              ADDS     r2,r4,#4
0000c8  1888              ADDS     r0,r1,r2
0000ca  225f              MOVS     r2,#0x5f
0000cc  491a              LDR      r1,|L12.312|
0000ce  f7fffffe          BL       __aeabi_memcpy
;;;576       messageLen+=len;
0000d2  1964              ADDS     r4,r4,r5
;;;577    
;;;578       //////////////////////////////////////////////////////
;;;579       payload[2]= (uint8_t)(((messageLen & 0xff00)>> 8)& 0x00ff);// Message Length MSB
0000d4  20ff              MOVS     r0,#0xff
0000d6  0200              LSLS     r0,r0,#8
0000d8  4020              ANDS     r0,r0,r4
0000da  1201              ASRS     r1,r0,#8
0000dc  4668              MOV      r0,sp
0000de  7181              STRB     r1,[r0,#6]
;;;580       payload[3]= (uint8_t)(messageLen & 0x00ff);// Message Length LSB
0000e0  71c4              STRB     r4,[r0,#7]
;;;581    
;;;582    
;;;583    			 
;;;584    			 Iap2CtrlSessionMsgParam *pParam = (Iap2CtrlSessionMsgParam *)pData;
0000e2  463e              MOV      r6,r7
;;;585    			 pParam->m_MsgId=0xaa01;
0000e4  4915              LDR      r1,|L12.316|
0000e6  70b1              STRB     r1,[r6,#2]
0000e8  0a08              LSRS     r0,r1,#8
0000ea  70f0              STRB     r0,[r6,#3]
;;;586    			 pParam->m_Len = sizeof(payload);
0000ec  2101              MOVS     r1,#1
0000ee  0289              LSLS     r1,r1,#10
0000f0  7031              STRB     r1,[r6,#0]
0000f2  0a08              LSRS     r0,r1,#8
0000f4  7070              STRB     r0,[r6,#1]
;;;587    			 
;;;588    			 if(pParam->m_Data == NULL)
0000f6  1d30              ADDS     r0,r6,#4
0000f8  f7fffffe          BL       __aeabi_uread4
0000fc  2800              CMP      r0,#0
0000fe  d10a              BNE      |L12.278|
;;;589    				 pParam->m_Data = (uint8*)malloc(pParam->m_Len);
000100  7871              LDRB     r1,[r6,#1]
000102  7832              LDRB     r2,[r6,#0]
000104  0209              LSLS     r1,r1,#8
000106  4311              ORRS     r1,r1,r2
000108  4608              MOV      r0,r1
00010a  f7fffffe          BL       malloc
00010e  1d31              ADDS     r1,r6,#4
000110  9000              STR      r0,[sp,#0]
000112  f7fffffe          BL       __aeabi_uwrite4
                  |L12.278|
;;;590    			 memcpy(pParam->m_Data,payload,pParam->m_Len);
000116  1d30              ADDS     r0,r6,#4
000118  f7fffffe          BL       __aeabi_uread4
00011c  9000              STR      r0,[sp,#0]
00011e  7870              LDRB     r0,[r6,#1]
000120  7831              LDRB     r1,[r6,#0]
000122  0200              LSLS     r0,r0,#8
000124  4308              ORRS     r0,r0,r1
000126  4602              MOV      r2,r0
000128  a901              ADD      r1,sp,#4
00012a  9800              LDR      r0,[sp,#0]
00012c  f7fffffe          BL       __aeabi_memcpy
;;;591    
;;;592    	//uint8_t * challengReciveBuf = (uint8_t*)malloc(messageLen);
;;;593       
;;;594    	//memcpy(challengReciveBuf,payload,messageLen);
;;;595     //  BOOL ret =  iAP2LinkQueueSendData (g_iap2handle->runloop->link,
;;;596    						 //  challengReciveBuf,
;;;597    						  //// messageLen,
;;;598    						  // session,
;;;599    						  // NULL,
;;;600    						  // NULL);
;;;601      
;;;602    	//free(challengReciveBuf);
;;;603    
;;;604    
;;;605    }
000130  b07f              ADD      sp,sp,#0x1fc
000132  b07f              ADD      sp,sp,#0x1fc
000134  b003              ADD      sp,sp,#0xc
000136  bdf0              POP      {r4-r7,pc}
;;;606    
                          ENDP

                  |L12.312|
                          DCD      keyboard_reportDescriptor
                  |L12.316|
                          DCD      0x0000aa01

                          AREA ||.data||, DATA, ALIGN=0

                  iAP2_identificationInformation
000000  40400000          DCB      0x40,0x40,0x00,0x00
000004  1d010011          DCB      0x1d,0x01,0x00,0x11
000008  00004d46          DCB      0x00,0x00,0x4d,0x46
00000c  49204b45          DCB      0x49,0x20,0x4b,0x45
000010  59424f41          DCB      0x59,0x42,0x4f,0x41
000014  52440000          DCB      0x52,0x44,0x00,0x00
000018  0b000153          DCB      0x0b,0x00,0x01,0x53
00001c  31303038          DCB      0x31,0x30,0x30,0x38
000020  36000009          DCB      0x36,0x00,0x00,0x09
000024  00024445          DCB      0x00,0x02,0x44,0x45
000028  4d4f0000          DCB      0x4d,0x4f,0x00,0x00
00002c  0b000353          DCB      0x0b,0x00,0x03,0x53
000030  31303031          DCB      0x31,0x30,0x30,0x31
000034  3000000a          DCB      0x30,0x00,0x00,0x0a
000038  00043130          DCB      0x00,0x04,0x31,0x30
00003c  30303000          DCB      0x30,0x30,0x30,0x00
000040  000a0005          DCB      0x00,0x0a,0x00,0x05
000044  52657620          DCB      0x52,0x65,0x76,0x20
000048  3100002a          DCB      0x31,0x00,0x00,0x2a
00004c  00066800          DCB      0x00,0x06,0x68,0x00
000050  68026803          DCB      0x68,0x02,0x68,0x03
000054  4c004c02          DCB      0x4c,0x00,0x4c,0x02
000058  4c034c05          DCB      0x4c,0x03,0x4c,0x05
00005c  4c064c07          DCB      0x4c,0x06,0x4c,0x07
000060  4c084c09          DCB      0x4c,0x08,0x4c,0x09
000064  50005002          DCB      0x50,0x00,0x50,0x02
000068  5003da00          DCB      0x50,0x03,0xda,0x00
00006c  da02ae00          DCB      0xda,0x02,0xae,0x00
000070  ae02ae03          DCB      0xae,0x02,0xae,0x03
000074  00180007          DCB      0x00,0x18,0x00,0x07
000078  68014c01          DCB      0x68,0x01,0x4c,0x01
00007c  4c045001          DCB      0x4c,0x04,0x50,0x01
000080  da01ae01          DCB      0xda,0x01,0xae,0x01
000084  4e094e0a          DCB      0x4e,0x09,0x4e,0x0a
000088  4e0b4e0c          DCB      0x4e,0x0b,0x4e,0x0c
00008c  00050008          DCB      0x00,0x05,0x00,0x08
000090  02000600          DCB      0x02,0x00,0x06,0x00
000094  09000000          DCB      0x09,0x00,0x00,0x00
000098  07000c65          DCB      0x07,0x00,0x0c,0x65
00009c  6e000007          DCB      0x6e,0x00,0x00,0x07
0000a0  000d656e          DCB      0x00,0x0d,0x65,0x6e
0000a4  00002600          DCB      0x00,0x00,0x26,0x00
0000a8  0f000600          DCB      0x0f,0x00,0x06,0x00
0000ac  00000100          DCB      0x00,0x00,0x01,0x00
0000b0  09000169          DCB      0x09,0x00,0x01,0x69
0000b4  41503200          DCB      0x41,0x50,0x32,0x00
0000b8  00040002          DCB      0x00,0x04,0x00,0x02
0000bc  00050003          DCB      0x00,0x05,0x00,0x03
0000c0  06000500          DCB      0x06,0x00,0x05,0x00
0000c4  03070005          DCB      0x03,0x07,0x00,0x05
0000c8  00030800          DCB      0x00,0x03,0x08,0x00
0000cc  1f001200          DCB      0x1f,0x00,0x12,0x00
0000d0  06000000          DCB      0x06,0x00,0x00,0x00
0000d4  01000b00          DCB      0x01,0x00,0x0b,0x00
0000d8  0152656d          DCB      0x01,0x52,0x65,0x6d
0000dc  6f746500          DCB      0x6f,0x74,0x65,0x00
0000e0  00050002          DCB      0x00,0x05,0x00,0x02
0000e4  00000500          DCB      0x00,0x00,0x05,0x00
0000e8  0201              DCB      0x02,0x01
                  keyboard_reportDescriptor
0000ea  0501              DCB      0x05,0x01
0000ec  0906a101          DCB      0x09,0x06,0xa1,0x01
0000f0  05081500          DCB      0x05,0x08,0x15,0x00
0000f4  25010902          DCB      0x25,0x01,0x09,0x02
0000f8  75019501          DCB      0x75,0x01,0x95,0x01
0000fc  91027507          DCB      0x91,0x02,0x75,0x07
000100  95019103          DCB      0x95,0x01,0x91,0x03
000104  050719e0          DCB      0x05,0x07,0x19,0xe0
000108  29e77501          DCB      0x29,0xe7,0x75,0x01
00010c  95088102          DCB      0x95,0x08,0x81,0x02
000110  150026ff          DCB      0x15,0x00,0x26,0xff
000114  0019002a          DCB      0x00,0x19,0x00,0x2a
000118  ff007508          DCB      0xff,0x00,0x75,0x08
00011c  95058100          DCB      0x95,0x05,0x81,0x00
000120  050c1500          DCB      0x05,0x0c,0x15,0x00
000124  25010940          DCB      0x25,0x01,0x09,0x40
000128  0a21020a          DCB      0x0a,0x21,0x02,0x0a
00012c  ae0109b6          DCB      0xae,0x01,0x09,0xb6
000130  09cd09b5          DCB      0x09,0xcd,0x09,0xb5
000134  09e209ea          DCB      0x09,0xe2,0x09,0xea
000138  09e90930          DCB      0x09,0xe9,0x09,0x30
00013c  7101950a          DCB      0x71,0x01,0x95,0x0a
000140  81027506          DCB      0x81,0x02,0x75,0x06
000144  95018103          DCB      0x95,0x01,0x81,0x03
000148  c0                DCB      0xc0

;*** Start embedded assembler ***

#line 1 "..\\iap2\\Iap2CtrlSession.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_Iap2CtrlSession_c_3bcc3e29____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___17_Iap2CtrlSession_c_3bcc3e29____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_Iap2CtrlSession_c_3bcc3e29____REVSH|
#line 144
|__asm___17_Iap2CtrlSession_c_3bcc3e29____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
