; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\ft32f0xx_dma.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ft32f0xx_dma.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I.\RTE\_Keyboard -IC:\Users\Reidgjiao\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -IC:\Keil_v5-MDK\ARM\CMSIS\Include -D__UVISION_VERSION=529 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\ft32f0xx_dma.crf ..\FTLib\Src\ft32f0xx_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;466      */
;;;467    void DMA_ClearFlag(uint32_t DMAy_FLAG)
000000  2101              MOVS     r1,#1
;;;468    {
;;;469      /* Check the parameters */
;;;470      assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
;;;471    
;;;472    /* Calculate the used DMAy */
;;;473      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
000002  0709              LSLS     r1,r1,#28
000004  4001              ANDS     r1,r1,r0
000006  2900              CMP      r1,#0
000008  d101              BNE      |L1.14|
;;;474      {
;;;475    		;
;;;476      }
;;;477      else
;;;478      {
;;;479        /* Clear the selected DMAy flags */
;;;480        DMA1->IFCR = DMAy_FLAG;
00000a  4901              LDR      r1,|L1.16|
00000c  6048              STR      r0,[r1,#4]
                  |L1.14|
;;;481      }
;;;482    }
00000e  4770              BX       lr
;;;483    
                          ENDP

                  |L1.16|
                          DCD      0x40020000

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;615      */
;;;616    void DMA_ClearITPendingBit(uint32_t DMAy_IT)
000000  2101              MOVS     r1,#1
;;;617    {
;;;618      /* Check the parameters */
;;;619      assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
;;;620      
;;;621      /* Calculate the used DMAy */
;;;622      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
000002  0709              LSLS     r1,r1,#28
000004  4001              ANDS     r1,r1,r0
000006  2900              CMP      r1,#0
000008  d101              BNE      |L2.14|
;;;623      {
;;;624    		;
;;;625      }
;;;626      else
;;;627      {
;;;628        /* Clear the selected DMAy interrupt pending bits */
;;;629        DMA1->IFCR = DMAy_IT;
00000a  4901              LDR      r1,|L2.16|
00000c  6048              STR      r0,[r1,#4]
                  |L2.14|
;;;630      }
;;;631    }
00000e  4770              BX       lr
;;;632    
                          ENDP

                  |L2.16|
                          DCD      0x40020000

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=2

                  DMA_Cmd PROC
;;;216      */
;;;217    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;218    {
;;;219      /* Check the parameters */
;;;220      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;221      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;222    
;;;223      if (NewState != DISABLE)
000002  d004              BEQ      |L3.14|
;;;224      {
;;;225        /* Enable the selected DMAy Channelx */
;;;226        DMAy_Channelx->CCR |= DMA_CCR_EN;
000004  6802              LDR      r2,[r0,#0]
000006  2301              MOVS     r3,#1
000008  431a              ORRS     r2,r2,r3
00000a  6002              STR      r2,[r0,#0]
00000c  e003              B        |L3.22|
                  |L3.14|
;;;227      }
;;;228      else
;;;229      {
;;;230        /* Disable the selected DMAy Channelx */
;;;231        DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
00000e  6802              LDR      r2,[r0,#0]
000010  4b01              LDR      r3,|L3.24|
000012  401a              ANDS     r2,r2,r3
000014  6002              STR      r2,[r0,#0]
                  |L3.22|
;;;232      }
;;;233    }
000016  4770              BX       lr
;;;234    /**
                          ENDP

                  |L3.24|
                          DCD      0x0000fffe

                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;55       */
;;;56     void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6801              LDR      r1,[r0,#0]
;;;57     {
;;;58       /* Check the parameters */
;;;59       assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;60     
;;;61       /* Disable the selected DMAy Channelx */
;;;62       DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
000002  4a25              LDR      r2,|L4.152|
000004  4011              ANDS     r1,r1,r2
000006  6001              STR      r1,[r0,#0]
;;;63     
;;;64       /* Reset DMAy Channelx control register */
;;;65       DMAy_Channelx->CCR  = 0;
000008  2100              MOVS     r1,#0
00000a  6001              STR      r1,[r0,#0]
;;;66     
;;;67       /* Reset DMAy Channelx remaining bytes register */
;;;68       DMAy_Channelx->CNDTR = 0;
00000c  6041              STR      r1,[r0,#4]
;;;69     
;;;70       /* Reset DMAy Channelx peripheral address register */
;;;71       DMAy_Channelx->CPAR  = 0;
00000e  6081              STR      r1,[r0,#8]
;;;72     
;;;73       /* Reset DMAy Channelx memory address register */
;;;74       DMAy_Channelx->CMAR = 0;
000010  60c1              STR      r1,[r0,#0xc]
;;;75     
;;;76       if (DMAy_Channelx == DMA1_Channel1)
000012  4922              LDR      r1,|L4.156|
000014  4288              CMP      r0,r1
000016  d108              BNE      |L4.42|
;;;77       {
;;;78         /* Reset interrupt pending bits for DMA1 Channel1 */
;;;79         DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
000018  4920              LDR      r1,|L4.156|
00001a  3908              SUBS     r1,r1,#8
00001c  6849              LDR      r1,[r1,#4]
00001e  220f              MOVS     r2,#0xf
000020  4311              ORRS     r1,r1,r2
000022  4a1e              LDR      r2,|L4.156|
000024  3a08              SUBS     r2,r2,#8
000026  6051              STR      r1,[r2,#4]
000028  e035              B        |L4.150|
                  |L4.42|
;;;80       }
;;;81       else if (DMAy_Channelx == DMA1_Channel2)
00002a  491c              LDR      r1,|L4.156|
00002c  3114              ADDS     r1,r1,#0x14
00002e  4288              CMP      r0,r1
000030  d108              BNE      |L4.68|
;;;82       {
;;;83         /* Reset interrupt pending bits for DMA1 Channel2 */
;;;84         DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
000032  491a              LDR      r1,|L4.156|
000034  3908              SUBS     r1,r1,#8
000036  6849              LDR      r1,[r1,#4]
000038  22f0              MOVS     r2,#0xf0
00003a  4311              ORRS     r1,r1,r2
00003c  4a17              LDR      r2,|L4.156|
00003e  3a08              SUBS     r2,r2,#8
000040  6051              STR      r1,[r2,#4]
000042  e028              B        |L4.150|
                  |L4.68|
;;;85       }
;;;86       else if (DMAy_Channelx == DMA1_Channel3)
000044  4915              LDR      r1,|L4.156|
000046  3128              ADDS     r1,r1,#0x28
000048  4288              CMP      r0,r1
00004a  d109              BNE      |L4.96|
;;;87       {
;;;88         /* Reset interrupt pending bits for DMA1 Channel3 */
;;;89         DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
00004c  4913              LDR      r1,|L4.156|
00004e  3908              SUBS     r1,r1,#8
000050  6849              LDR      r1,[r1,#4]
000052  220f              MOVS     r2,#0xf
000054  0212              LSLS     r2,r2,#8
000056  4311              ORRS     r1,r1,r2
000058  4a10              LDR      r2,|L4.156|
00005a  3a08              SUBS     r2,r2,#8
00005c  6051              STR      r1,[r2,#4]
00005e  e01a              B        |L4.150|
                  |L4.96|
;;;90       }
;;;91       else if (DMAy_Channelx == DMA1_Channel4)
000060  490e              LDR      r1,|L4.156|
000062  313c              ADDS     r1,r1,#0x3c
000064  4288              CMP      r0,r1
000066  d109              BNE      |L4.124|
;;;92       {
;;;93         /* Reset interrupt pending bits for DMA1 Channel4 */
;;;94         DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
000068  490c              LDR      r1,|L4.156|
00006a  3908              SUBS     r1,r1,#8
00006c  6849              LDR      r1,[r1,#4]
00006e  220f              MOVS     r2,#0xf
000070  0312              LSLS     r2,r2,#12
000072  4311              ORRS     r1,r1,r2
000074  4a09              LDR      r2,|L4.156|
000076  3a08              SUBS     r2,r2,#8
000078  6051              STR      r1,[r2,#4]
00007a  e00c              B        |L4.150|
                  |L4.124|
;;;95       }
;;;96       else if (DMAy_Channelx == DMA1_Channel5)
00007c  4907              LDR      r1,|L4.156|
00007e  3150              ADDS     r1,r1,#0x50
000080  4288              CMP      r0,r1
000082  d108              BNE      |L4.150|
;;;97       {
;;;98         /* Reset interrupt pending bits for DMA1 Channel5 */
;;;99         DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
000084  4905              LDR      r1,|L4.156|
000086  3908              SUBS     r1,r1,#8
000088  6849              LDR      r1,[r1,#4]
00008a  220f              MOVS     r2,#0xf
00008c  0412              LSLS     r2,r2,#16
00008e  4311              ORRS     r1,r1,r2
000090  4a02              LDR      r2,|L4.156|
000092  3a08              SUBS     r2,r2,#8
000094  6051              STR      r1,[r2,#4]
                  |L4.150|
;;;100      }
;;;101    //  else if (DMAy_Channelx == DMA1_Channel6)
;;;102    //  {
;;;103    //    /* Reset interrupt pending bits for DMA1 Channel6 */
;;;104    //    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
;;;105    //  }
;;;106    //  else if (DMAy_Channelx == DMA1_Channel7)
;;;107    //  {
;;;108    //    /* Reset interrupt pending bits for DMA1 Channel7 */
;;;109    //    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
;;;110    //  }
;;;111    }
000096  4770              BX       lr
;;;112    
                          ENDP

                  |L4.152|
                          DCD      0x0000fffe
                  |L4.156|
                          DCD      0x40020008

                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrDataCounter PROC
;;;267      */
;;;268    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000000  4601              MOV      r1,r0
;;;269    {
;;;270      /* Check the parameters */
;;;271      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;272      /* Return the number of remaining data units for DMAy Channelx */
;;;273      return ((uint16_t)(DMAy_Channelx->CNDTR));
000002  6848              LDR      r0,[r1,#4]
000004  b280              UXTH     r0,r0
;;;274    }
000006  4770              BX       lr
;;;275    
                          ENDP


                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;372      */
;;;373    FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
000000  4601              MOV      r1,r0
;;;374    {
;;;375      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;376      uint32_t tmpreg = 0;
000004  2200              MOVS     r2,#0
;;;377      
;;;378      /* Check the parameters */
;;;379      assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
;;;380    
;;;381      /* Calculate the used DMAy */
;;;382      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
000006  2301              MOVS     r3,#1
000008  071b              LSLS     r3,r3,#28
00000a  400b              ANDS     r3,r3,r1
00000c  2b00              CMP      r3,#0
00000e  d101              BNE      |L6.20|
;;;383      {
;;;384    		;
;;;385      }
;;;386      else
;;;387      {
;;;388        /* Get DMA1 ISR register value */
;;;389        tmpreg = DMA1->ISR ;
000010  4b04              LDR      r3,|L6.36|
000012  681a              LDR      r2,[r3,#0]
                  |L6.20|
;;;390      }
;;;391    
;;;392      /* Check the status of the specified DMAy flag */
;;;393      if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
000014  4613              MOV      r3,r2
000016  400b              ANDS     r3,r3,r1
000018  2b00              CMP      r3,#0
00001a  d001              BEQ      |L6.32|
;;;394      {
;;;395        /* DMAy_FLAG is set */
;;;396        bitstatus = SET;
00001c  2001              MOVS     r0,#1
00001e  e000              B        |L6.34|
                  |L6.32|
;;;397      }
;;;398      else
;;;399      {
;;;400        /* DMAy_FLAG is reset */
;;;401        bitstatus = RESET;
000020  2000              MOVS     r0,#0
                  |L6.34|
;;;402      }
;;;403      
;;;404      /* Return the DMAy_FLAG status */
;;;405      return  bitstatus;
;;;406    }
000022  4770              BX       lr
;;;407    
                          ENDP

                  |L6.36|
                          DCD      0x40020000

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;542      */
;;;543    ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
000000  4601              MOV      r1,r0
;;;544    {
;;;545      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;546      uint32_t tmpreg = 0;
000004  2200              MOVS     r2,#0
;;;547    
;;;548      /* Check the parameters */
;;;549      assert_param(IS_DMA_GET_IT(DMAy_IT));
;;;550    
;;;551      /* Calculate the used DMA */
;;;552      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
000006  2301              MOVS     r3,#1
000008  071b              LSLS     r3,r3,#28
00000a  400b              ANDS     r3,r3,r1
00000c  2b00              CMP      r3,#0
00000e  d101              BNE      |L7.20|
;;;553      {
;;;554    		;
;;;555      }
;;;556      else
;;;557      {
;;;558        /* Get DMA1 ISR register value */
;;;559        tmpreg = DMA1->ISR;
000010  4b04              LDR      r3,|L7.36|
000012  681a              LDR      r2,[r3,#0]
                  |L7.20|
;;;560      }
;;;561    
;;;562      /* Check the status of the specified DMAy interrupt */
;;;563      if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
000014  4613              MOV      r3,r2
000016  400b              ANDS     r3,r3,r1
000018  2b00              CMP      r3,#0
00001a  d001              BEQ      |L7.32|
;;;564      {
;;;565        /* DMAy_IT is set */
;;;566        bitstatus = SET;
00001c  2001              MOVS     r0,#1
00001e  e000              B        |L7.34|
                  |L7.32|
;;;567      }
;;;568      else
;;;569      {
;;;570        /* DMAy_IT is reset */
;;;571        bitstatus = RESET;
000020  2000              MOVS     r0,#0
                  |L7.34|
;;;572      }
;;;573      /* Return the DMAy_IT status */
;;;574      return  bitstatus;
;;;575    }
000022  4770              BX       lr
;;;576    
                          ENDP

                  |L7.36|
                          DCD      0x40020000

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=1

                  DMA_ITConfig PROC
;;;294      */
;;;295    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;296    {
;;;297      /* Check the parameters */
;;;298      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;299      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;300      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;301    
;;;302      if (NewState != DISABLE)
000002  d003              BEQ      |L8.12|
;;;303      {
;;;304        /* Enable the selected DMA interrupts */
;;;305        DMAy_Channelx->CCR |= DMA_IT;
000004  6803              LDR      r3,[r0,#0]
000006  430b              ORRS     r3,r3,r1
000008  6003              STR      r3,[r0,#0]
00000a  e002              B        |L8.18|
                  |L8.12|
;;;306      }
;;;307      else
;;;308      {
;;;309        /* Disable the selected DMA interrupts */
;;;310        DMAy_Channelx->CCR &= ~DMA_IT;
00000c  6803              LDR      r3,[r0,#0]
00000e  438b              BICS     r3,r3,r1
000010  6003              STR      r3,[r0,#0]
                  |L8.18|
;;;311      }
;;;312    }
000012  4770              BX       lr
;;;313    
                          ENDP


                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=2

                  DMA_Init PROC
;;;122      */
;;;123    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;124    {
;;;125      uint32_t tmpreg = 0;
000002  2200              MOVS     r2,#0
;;;126    
;;;127      /* Check the parameters */
;;;128      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;129      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;130      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;131      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;132      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
;;;133      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;134      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;135      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;136      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;137      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;138    
;;;139    /*--------------------------- DMAy Channelx CCR Configuration ----------------*/
;;;140      /* Get the DMAy_Channelx CCR value */
;;;141      tmpreg = DMAy_Channelx->CCR;
000004  6802              LDR      r2,[r0,#0]
;;;142    
;;;143      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;144      tmpreg &= CCR_CLEAR_MASK;
000006  4b0d              LDR      r3,|L9.60|
000008  401a              ANDS     r2,r2,r3
;;;145    
;;;146      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;147      /* Set DIR bit according to DMA_DIR value */
;;;148      /* Set CIRC bit according to DMA_Mode value */
;;;149      /* Set PINC bit according to DMA_PeripheralInc value */
;;;150      /* Set MINC bit according to DMA_MemoryInc value */
;;;151      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;152      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;153      /* Set PL bits according to DMA_Priority value */
;;;154      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;155      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
00000a  6a0c              LDR      r4,[r1,#0x20]
00000c  688b              LDR      r3,[r1,#8]
00000e  4323              ORRS     r3,r3,r4
000010  690c              LDR      r4,[r1,#0x10]
000012  4323              ORRS     r3,r3,r4
000014  694c              LDR      r4,[r1,#0x14]
000016  4323              ORRS     r3,r3,r4
000018  698c              LDR      r4,[r1,#0x18]
00001a  4323              ORRS     r3,r3,r4
00001c  69cc              LDR      r4,[r1,#0x1c]
00001e  4323              ORRS     r3,r3,r4
000020  6a4c              LDR      r4,[r1,#0x24]
000022  4323              ORRS     r3,r3,r4
000024  6a8c              LDR      r4,[r1,#0x28]
000026  4323              ORRS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
;;;156                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;157                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;158                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;159    
;;;160      /* Write to DMAy Channelx CCR */
;;;161      DMAy_Channelx->CCR = tmpreg;
00002a  6002              STR      r2,[r0,#0]
;;;162    
;;;163    /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
;;;164      /* Write to DMAy Channelx CNDTR */
;;;165      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
00002c  68cb              LDR      r3,[r1,#0xc]
00002e  6043              STR      r3,[r0,#4]
;;;166    
;;;167    /*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
;;;168      /* Write to DMAy Channelx CPAR */
;;;169      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000030  680b              LDR      r3,[r1,#0]
000032  6083              STR      r3,[r0,#8]
;;;170    
;;;171    /*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
;;;172      /* Write to DMAy Channelx CMAR */
;;;173      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000034  684b              LDR      r3,[r1,#4]
000036  60c3              STR      r3,[r0,#0xc]
;;;174    }
000038  bd10              POP      {r4,pc}
;;;175    
                          ENDP

00003a  0000              DCW      0x0000
                  |L9.60|
                          DCD      0xffff800f

                          AREA ||i.DMA_SetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_SetCurrDataCounter PROC
;;;249      */
;;;250    void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
000000  6041              STR      r1,[r0,#4]
;;;251    {
;;;252      /* Check the parameters */
;;;253      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;254    
;;;255    /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
;;;256      /* Write to DMAy Channelx CNDTR */
;;;257      DMAy_Channelx->CNDTR = DataNumber;
;;;258    }
000002  4770              BX       lr
;;;259    
                          ENDP


                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;181      */
;;;182    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;183    {
;;;184    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;185      /* Initialize the DMA_PeripheralBaseAddr member */
;;;186      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;187      /* Initialize the DMA_MemoryBaseAddr member */
;;;188      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000004  6041              STR      r1,[r0,#4]
;;;189      /* Initialize the DMA_DIR member */
;;;190      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000006  6081              STR      r1,[r0,#8]
;;;191      /* Initialize the DMA_BufferSize member */
;;;192      DMA_InitStruct->DMA_BufferSize = 0;
000008  60c1              STR      r1,[r0,#0xc]
;;;193      /* Initialize the DMA_PeripheralInc member */
;;;194      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;195      /* Initialize the DMA_MemoryInc member */
;;;196      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000c  6141              STR      r1,[r0,#0x14]
;;;197      /* Initialize the DMA_PeripheralDataSize member */
;;;198      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;199      /* Initialize the DMA_MemoryDataSize member */
;;;200      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000010  61c1              STR      r1,[r0,#0x1c]
;;;201      /* Initialize the DMA_Mode member */
;;;202      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000012  6201              STR      r1,[r0,#0x20]
;;;203      /* Initialize the DMA_Priority member */
;;;204      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000014  6241              STR      r1,[r0,#0x24]
;;;205      /* Initialize the DMA_M2M member */
;;;206      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000016  6281              STR      r1,[r0,#0x28]
;;;207    }
000018  4770              BX       lr
;;;208    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\FTLib\\Src\\ft32f0xx_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_ft32f0xx_dma_c_e9b554c0____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___14_ft32f0xx_dma_c_e9b554c0____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_ft32f0xx_dma_c_e9b554c0____REVSH|
#line 144
|__asm___14_ft32f0xx_dma_c_e9b554c0____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
