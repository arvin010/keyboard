; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\ft32f0xx_flash.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ft32f0xx_flash.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I..\iap2 -IC:\Users\dell1\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -D__UVISION_VERSION=534 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\ft32f0xx_flash.crf ..\FTLib\Src\ft32f0xx_flash.c]
                          THUMB

                          AREA ||i.FLASH_ClearFlag||, CODE, READONLY, ALIGN=2

                  FLASH_ClearFlag PROC
;;;949      */
;;;950    void FLASH_ClearFlag(uint32_t FLASH_FLAG)
000000  4901              LDR      r1,|L1.8|
;;;951    {
;;;952      /* Check the parameters */
;;;953      assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
;;;954      
;;;955      /* Clear the flags */
;;;956      FLASH->SR = FLASH_FLAG;
000002  60c8              STR      r0,[r1,#0xc]
;;;957    }
000004  4770              BX       lr
;;;958    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x40022000

                          AREA ||i.FLASH_EraseAllPages||, CODE, READONLY, ALIGN=2

                  FLASH_EraseAllPages PROC
;;;167      */
;;;168    FLASH_Status FLASH_EraseAllPages(void)
000000  b510              PUSH     {r4,lr}
;;;169    {
;;;170      FLASH_Status status = FLASH_COMPLETE;
000002  2404              MOVS     r4,#4
;;;171    
;;;172          FLASH_PrefetchBufferCmd(DISABLE);
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;173      __ASM("ISB");
00000a  f3bf8f6f          ISB      
;;;174    
;;;175      /* Wait for last operation to be completed */
;;;176      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00000e  200b              MOVS     r0,#0xb
000010  0400              LSLS     r0,r0,#16
000012  f7fffffe          BL       FLASH_WaitForLastOperation
000016  4604              MOV      r4,r0
;;;177      
;;;178      if(status == FLASH_COMPLETE)
000018  2c04              CMP      r4,#4
00001a  d116              BNE      |L2.74|
;;;179      {
;;;180        /* if the previous operation is completed, proceed to erase all pages */
;;;181         FLASH->CR |= FLASH_CR_MER;
00001c  480d              LDR      r0,|L2.84|
00001e  6900              LDR      r0,[r0,#0x10]
000020  2104              MOVS     r1,#4
000022  4308              ORRS     r0,r0,r1
000024  490b              LDR      r1,|L2.84|
000026  6108              STR      r0,[r1,#0x10]
;;;182         FLASH->CR |= FLASH_CR_STRT;
000028  4608              MOV      r0,r1
00002a  6900              LDR      r0,[r0,#0x10]
00002c  2140              MOVS     r1,#0x40
00002e  4308              ORRS     r0,r0,r1
000030  4908              LDR      r1,|L2.84|
000032  6108              STR      r0,[r1,#0x10]
;;;183        
;;;184        /* Wait for last operation to be completed */
;;;185        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000034  200b              MOVS     r0,#0xb
000036  0400              LSLS     r0,r0,#16
000038  f7fffffe          BL       FLASH_WaitForLastOperation
00003c  4604              MOV      r4,r0
;;;186    
;;;187        /* Disable the MER Bit */
;;;188        FLASH->CR &= ~FLASH_CR_MER;
00003e  4805              LDR      r0,|L2.84|
000040  6900              LDR      r0,[r0,#0x10]
000042  2104              MOVS     r1,#4
000044  4388              BICS     r0,r0,r1
000046  4903              LDR      r1,|L2.84|
000048  6108              STR      r0,[r1,#0x10]
                  |L2.74|
;;;189      }
;;;190    
;;;191       FLASH_PrefetchBufferCmd(ENABLE);
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;192    
;;;193      /* Return the Erase Status */
;;;194      return status;
000050  4620              MOV      r0,r4
;;;195    }
000052  bd10              POP      {r4,pc}
;;;196    
                          ENDP

                  |L2.84|
                          DCD      0x40022000

                          AREA ||i.FLASH_ErasePage||, CODE, READONLY, ALIGN=2

                  FLASH_ErasePage PROC
;;;125      */
;;;126    FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
000000  b530              PUSH     {r4,r5,lr}
;;;127    {
000002  4604              MOV      r4,r0
;;;128      FLASH_Status status = FLASH_COMPLETE;
000004  2504              MOVS     r5,#4
;;;129    
;;;130      /* Check the parameters */
;;;131      assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
;;;132    
;;;133        FLASH_PrefetchBufferCmd(DISABLE);
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;134      __ASM("ISB");
00000c  f3bf8f6f          ISB      
;;;135     
;;;136      /* Wait for last operation to be completed */
;;;137      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000010  200b              MOVS     r0,#0xb
000012  0400              LSLS     r0,r0,#16
000014  f7fffffe          BL       FLASH_WaitForLastOperation
000018  4605              MOV      r5,r0
;;;138      
;;;139      if(status == FLASH_COMPLETE)
00001a  2d04              CMP      r5,#4
00001c  d117              BNE      |L3.78|
;;;140      { 
;;;141        /* If the previous operation is completed, proceed to erase the page */
;;;142        FLASH->CR |= FLASH_CR_PER;
00001e  480e              LDR      r0,|L3.88|
000020  6900              LDR      r0,[r0,#0x10]
000022  2102              MOVS     r1,#2
000024  4308              ORRS     r0,r0,r1
000026  490c              LDR      r1,|L3.88|
000028  6108              STR      r0,[r1,#0x10]
;;;143        FLASH->AR  = Page_Address;
00002a  4608              MOV      r0,r1
00002c  6144              STR      r4,[r0,#0x14]
;;;144        FLASH->CR |= FLASH_CR_STRT;
00002e  6900              LDR      r0,[r0,#0x10]
000030  2140              MOVS     r1,#0x40
000032  4308              ORRS     r0,r0,r1
000034  4908              LDR      r1,|L3.88|
000036  6108              STR      r0,[r1,#0x10]
;;;145        
;;;146        /* Wait for last operation to be completed */
;;;147        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000038  200b              MOVS     r0,#0xb
00003a  0400              LSLS     r0,r0,#16
00003c  f7fffffe          BL       FLASH_WaitForLastOperation
000040  4605              MOV      r5,r0
;;;148        
;;;149        /* Disable the PER Bit */
;;;150        FLASH->CR &= ~FLASH_CR_PER;
000042  4805              LDR      r0,|L3.88|
000044  6900              LDR      r0,[r0,#0x10]
000046  2102              MOVS     r1,#2
000048  4388              BICS     r0,r0,r1
00004a  4903              LDR      r1,|L3.88|
00004c  6108              STR      r0,[r1,#0x10]
                  |L3.78|
;;;151      }
;;;152    
;;;153          FLASH_PrefetchBufferCmd(ENABLE);
00004e  2001              MOVS     r0,#1
000050  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;154        
;;;155      /* Return the Erase Status */
;;;156      return status;
000054  4628              MOV      r0,r5
;;;157    }
000056  bd30              POP      {r4,r5,pc}
;;;158    
                          ENDP

                  |L3.88|
                          DCD      0x40022000

                          AREA ||i.FLASH_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetFlagStatus PROC
;;;921      */
;;;922    FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
000000  4601              MOV      r1,r0
;;;923    {
;;;924      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;925    
;;;926      /* Check the parameters */
;;;927      assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
;;;928    
;;;929      if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
000004  4a04              LDR      r2,|L4.24|
000006  68d2              LDR      r2,[r2,#0xc]
000008  400a              ANDS     r2,r2,r1
00000a  2a00              CMP      r2,#0
00000c  d001              BEQ      |L4.18|
;;;930      {
;;;931        bitstatus = SET;
00000e  2001              MOVS     r0,#1
000010  e000              B        |L4.20|
                  |L4.18|
;;;932      }
;;;933      else
;;;934      {
;;;935        bitstatus = RESET;
000012  2000              MOVS     r0,#0
                  |L4.20|
;;;936      }
;;;937      /* Return the new state of FLASH_FLAG (SET or RESET) */
;;;938      return bitstatus; 
;;;939    }
000014  4770              BX       lr
;;;940    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_GetPrefetchBufferStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetPrefetchBufferStatus PROC
;;;71       */
;;;72     FlagStatus FLASH_GetPrefetchBufferStatus(void)
000000  2000              MOVS     r0,#0
;;;73     {
;;;74       FlagStatus bitstatus = RESET;
;;;75     
;;;76       if ((FLASH->ACR & FLASH_ACR_PRFTBS) != (uint32_t)RESET)
000002  4905              LDR      r1,|L5.24|
000004  6809              LDR      r1,[r1,#0]
000006  2220              MOVS     r2,#0x20
000008  4011              ANDS     r1,r1,r2
00000a  2900              CMP      r1,#0
00000c  d001              BEQ      |L5.18|
;;;77       {
;;;78         bitstatus = SET;
00000e  2001              MOVS     r0,#1
000010  e000              B        |L5.20|
                  |L5.18|
;;;79       }
;;;80       else
;;;81       {
;;;82         bitstatus = RESET;
000012  2000              MOVS     r0,#0
                  |L5.20|
;;;83       }
;;;84       /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
;;;85       return bitstatus; 
;;;86     }
000014  4770              BX       lr
;;;87     
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_GetStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetStatus PROC
;;;964      */
;;;965    FLASH_Status FLASH_GetStatus(void)
000000  2004              MOVS     r0,#4
;;;966    {
;;;967      FLASH_Status FLASHstatus = FLASH_COMPLETE;
;;;968      
;;;969      if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
000002  490d              LDR      r1,|L6.56|
000004  68c9              LDR      r1,[r1,#0xc]
000006  07c9              LSLS     r1,r1,#31
000008  0fc9              LSRS     r1,r1,#31
00000a  2900              CMP      r1,#0
00000c  d001              BEQ      |L6.18|
;;;970      {
;;;971        FLASHstatus = FLASH_BUSY;
00000e  2001              MOVS     r0,#1
000010  e010              B        |L6.52|
                  |L6.18|
;;;972      }
;;;973      else 
;;;974      {  
;;;975        if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
000012  4909              LDR      r1,|L6.56|
000014  68c9              LDR      r1,[r1,#0xc]
000016  2210              MOVS     r2,#0x10
000018  4011              ANDS     r1,r1,r2
00001a  2900              CMP      r1,#0
00001c  d001              BEQ      |L6.34|
;;;976        { 
;;;977          FLASHstatus = FLASH_ERROR_WRP;
00001e  2002              MOVS     r0,#2
000020  e008              B        |L6.52|
                  |L6.34|
;;;978        }
;;;979        else 
;;;980        {
;;;981          if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
000022  4905              LDR      r1,|L6.56|
000024  68c9              LDR      r1,[r1,#0xc]
000026  2204              MOVS     r2,#4
000028  4011              ANDS     r1,r1,r2
00002a  2900              CMP      r1,#0
00002c  d001              BEQ      |L6.50|
;;;982          {
;;;983            FLASHstatus = FLASH_ERROR_PROGRAM; 
00002e  2003              MOVS     r0,#3
000030  e000              B        |L6.52|
                  |L6.50|
;;;984          }
;;;985          else
;;;986          {
;;;987            FLASHstatus = FLASH_COMPLETE;
000032  2004              MOVS     r0,#4
                  |L6.52|
;;;988          }
;;;989        }
;;;990      }
;;;991      /* Return the FLASH Status */
;;;992      return FLASHstatus;
;;;993    }
000034  4770              BX       lr
;;;994    
                          ENDP

000036  0000              DCW      0x0000
                  |L6.56|
                          DCD      0x40022000

                          AREA ||i.FLASH_ITConfig||, CODE, READONLY, ALIGN=2

                  FLASH_ITConfig PROC
;;;893      */
;;;894    void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;895    {
;;;896      /* Check the parameters */
;;;897      assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;898      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;899      
;;;900      if(NewState != DISABLE)
000002  d005              BEQ      |L7.16|
;;;901      {
;;;902        /* Enable the interrupt sources */
;;;903        FLASH->CR |= FLASH_IT;
000004  4a05              LDR      r2,|L7.28|
000006  6912              LDR      r2,[r2,#0x10]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L7.28|
00000c  611a              STR      r2,[r3,#0x10]
00000e  e004              B        |L7.26|
                  |L7.16|
;;;904      }
;;;905      else
;;;906      {
;;;907        /* Disable the interrupt sources */
;;;908        FLASH->CR &= ~(uint32_t)FLASH_IT;
000010  4a02              LDR      r2,|L7.28|
000012  6912              LDR      r2,[r2,#0x10]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L7.28|
000018  611a              STR      r2,[r3,#0x10]
                  |L7.26|
;;;909      }
;;;910    }
00001a  4770              BX       lr
;;;911    
                          ENDP

                  |L7.28|
                          DCD      0x40022000

                          AREA ||i.FLASH_Lock||, CODE, READONLY, ALIGN=2

                  FLASH_Lock PROC
;;;108      */
;;;109    void FLASH_Lock(void)
000000  4803              LDR      r0,|L8.16|
;;;110    {
;;;111      /* Set the LOCK Bit to lock the FLASH control register and program memory access */
;;;112      FLASH->CR |= FLASH_CR_LOCK;
000002  6900              LDR      r0,[r0,#0x10]
000004  2180              MOVS     r1,#0x80
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L8.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;113    }
00000c  4770              BX       lr
;;;114    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_BOOTConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_BOOTConfig PROC
;;;575      */
;;;576    FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1)
000000  b5f8              PUSH     {r3-r7,lr}
;;;577    {
000002  4606              MOV      r6,r0
;;;578      FLASH_Status status = FLASH_COMPLETE; 
000004  2404              MOVS     r4,#4
;;;579    	uint32_t ob_user_rdp = 0;
000006  2700              MOVS     r7,#0
;;;580    	uint8_t ob_user =0,ob_nuser = 0;
000008  2500              MOVS     r5,#0
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;581    	
;;;582      /* Check the parameters */
;;;583      assert_param(IS_OB_BOOT1(OB_BOOT1));
;;;584    
;;;585      /* Wait for last operation to be completed */
;;;586      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00000e  200b              MOVS     r0,#0xb
000010  0400              LSLS     r0,r0,#16
000012  f7fffffe          BL       FLASH_WaitForLastOperation
000016  4604              MOV      r4,r0
;;;587    
;;;588    	ob_user = OB->USER_RDP >>16 & 0xef;//Clear
000018  4823              LDR      r0,|L9.168|
00001a  6800              LDR      r0,[r0,#0]
00001c  0c00              LSRS     r0,r0,#16
00001e  21ef              MOVS     r1,#0xef
000020  4008              ANDS     r0,r0,r1
000022  4605              MOV      r5,r0
;;;589    	ob_user |= OB_BOOT1;
000024  4628              MOV      r0,r5
000026  4330              ORRS     r0,r0,r6
000028  4605              MOV      r5,r0
;;;590    	ob_nuser = ~ob_user;
00002a  43e8              MVNS     r0,r5
00002c  b2c0              UXTB     r0,r0
00002e  9000              STR      r0,[sp,#0]
;;;591      ob_user_rdp = (OB->USER_RDP &0x0000ffff) |  ob_user<<16 | ob_nuser<<24;
000030  481d              LDR      r0,|L9.168|
000032  6800              LDR      r0,[r0,#0]
000034  b280              UXTH     r0,r0
000036  0429              LSLS     r1,r5,#16
000038  4308              ORRS     r0,r0,r1
00003a  9900              LDR      r1,[sp,#0]
00003c  0609              LSLS     r1,r1,#24
00003e  4308              ORRS     r0,r0,r1
000040  4607              MOV      r7,r0
;;;592    	
;;;593      if(status == FLASH_COMPLETE)
000042  2c04              CMP      r4,#4
000044  d12d              BNE      |L9.162|
;;;594      {
;;;595        FLASH->CR |= FLASH_CR_OPTER;
000046  4819              LDR      r0,|L9.172|
000048  6900              LDR      r0,[r0,#0x10]
00004a  2120              MOVS     r1,#0x20
00004c  4308              ORRS     r0,r0,r1
00004e  4917              LDR      r1,|L9.172|
000050  6108              STR      r0,[r1,#0x10]
;;;596        FLASH->CR |= FLASH_CR_STRT;
000052  4608              MOV      r0,r1
000054  6900              LDR      r0,[r0,#0x10]
000056  2140              MOVS     r1,#0x40
000058  4308              ORRS     r0,r0,r1
00005a  4914              LDR      r1,|L9.172|
00005c  6108              STR      r0,[r1,#0x10]
;;;597        
;;;598        /* Wait for last operation to be completed */
;;;599        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00005e  200b              MOVS     r0,#0xb
000060  0400              LSLS     r0,r0,#16
000062  f7fffffe          BL       FLASH_WaitForLastOperation
000066  4604              MOV      r4,r0
;;;600        
;;;601        if(status == FLASH_COMPLETE)
000068  2c04              CMP      r4,#4
00006a  d11a              BNE      |L9.162|
;;;602        {
;;;603          /* If the erase operation is completed, disable the OPTER Bit */
;;;604          FLASH->CR &= ~FLASH_CR_OPTER;
00006c  480f              LDR      r0,|L9.172|
00006e  6900              LDR      r0,[r0,#0x10]
000070  2120              MOVS     r1,#0x20
000072  4388              BICS     r0,r0,r1
000074  490d              LDR      r1,|L9.172|
000076  6108              STR      r0,[r1,#0x10]
;;;605    			/* Enable the Option Bytes Programming operation */
;;;606    			FLASH->CR |= FLASH_CR_OPTPG;
000078  4608              MOV      r0,r1
00007a  6900              LDR      r0,[r0,#0x10]
00007c  2110              MOVS     r1,#0x10
00007e  4308              ORRS     r0,r0,r1
000080  490a              LDR      r1,|L9.172|
000082  6108              STR      r0,[r1,#0x10]
;;;607    
;;;608    			OB->USER_RDP = ob_user_rdp;
000084  4808              LDR      r0,|L9.168|
000086  6007              STR      r7,[r0,#0]
;;;609    		
;;;610    			/* Wait for last operation to be completed */
;;;611    			status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000088  200b              MOVS     r0,#0xb
00008a  0400              LSLS     r0,r0,#16
00008c  f7fffffe          BL       FLASH_WaitForLastOperation
000090  4604              MOV      r4,r0
;;;612    
;;;613    			if(status != FLASH_TIMEOUT)
000092  2c05              CMP      r4,#5
000094  d005              BEQ      |L9.162|
;;;614    			{
;;;615    				/* If the program operation is completed, disable the OPTPG Bit */
;;;616    				FLASH->CR &= ~FLASH_CR_OPTPG;
000096  4805              LDR      r0,|L9.172|
000098  6900              LDR      r0,[r0,#0x10]
00009a  2110              MOVS     r1,#0x10
00009c  4388              BICS     r0,r0,r1
00009e  4903              LDR      r1,|L9.172|
0000a0  6108              STR      r0,[r1,#0x10]
                  |L9.162|
;;;617    			}
;;;618    		}
;;;619    	}
;;;620      /* Return the Option Byte program Status */
;;;621      return status;
0000a2  4620              MOV      r0,r4
;;;622    }
0000a4  bdf8              POP      {r3-r7,pc}
;;;623    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L9.168|
                          DCD      0x1ffff800
                  |L9.172|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_EnableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_EnableWRP PROC
;;;374      */
;;;375    FLASH_Status FLASH_OB_EnableWRP(uint32_t OB_WRP)
000000  b5f0              PUSH     {r4-r7,lr}
;;;376    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;377    	uint8_t WRP0_Data = 0xFF,WRP1_Data = 0xFF,WRP2_Data = 0xFF,WRP3_Data = 0xFF;
000006  26ff              MOVS     r6,#0xff
000008  27ff              MOVS     r7,#0xff
00000a  20ff              MOVS     r0,#0xff
00000c  9005              STR      r0,[sp,#0x14]
00000e  9004              STR      r0,[sp,#0x10]
;;;378    	uint8_t nWRP0_Data = 0,nWRP1_Data = 0,nWRP2_Data = 0,nWRP3_Data = 0;
000010  2000              MOVS     r0,#0
000012  9003              STR      r0,[sp,#0xc]
000014  9002              STR      r0,[sp,#8]
000016  9001              STR      r0,[sp,#4]
000018  9000              STR      r0,[sp,#0]
;;;379      FLASH_Status status = FLASH_COMPLETE;
00001a  2504              MOVS     r5,#4
;;;380    
;;;381      /* Check the parameters */
;;;382      assert_param(IS_OB_WRP(OB_WRP));
;;;383    
;;;384      OB_WRP = (uint32_t)(~OB_WRP);
00001c  43e4              MVNS     r4,r4
;;;385      WRP0_Data = (uint8_t)(OB_WRP & OB_WRP0_WRP0);
00001e  b2e6              UXTB     r6,r4
;;;386    	nWRP0_Data = ~WRP0_Data;
000020  43f0              MVNS     r0,r6
000022  b2c0              UXTB     r0,r0
000024  9003              STR      r0,[sp,#0xc]
;;;387    	
;;;388      WRP1_Data = (uint8_t)((OB_WRP >> 8) & OB_WRP0_WRP0);
000026  0420              LSLS     r0,r4,#16
000028  0e07              LSRS     r7,r0,#24
;;;389    	nWRP1_Data = ~WRP1_Data;
00002a  43f8              MVNS     r0,r7
00002c  b2c0              UXTB     r0,r0
00002e  9002              STR      r0,[sp,#8]
;;;390    	
;;;391      WRP2_Data = (uint8_t)((OB_WRP >> 16) & OB_WRP0_WRP0);
000030  0220              LSLS     r0,r4,#8
000032  0e00              LSRS     r0,r0,#24
000034  9005              STR      r0,[sp,#0x14]
;;;392    	nWRP2_Data = ~WRP2_Data;
000036  9805              LDR      r0,[sp,#0x14]
000038  43c0              MVNS     r0,r0
00003a  b2c0              UXTB     r0,r0
00003c  9001              STR      r0,[sp,#4]
;;;393    	
;;;394      WRP3_Data = (uint8_t)((OB_WRP >> 24) & OB_WRP0_WRP0);
00003e  0e20              LSRS     r0,r4,#24
000040  9004              STR      r0,[sp,#0x10]
;;;395      nWRP3_Data = ~WRP3_Data;  
000042  9804              LDR      r0,[sp,#0x10]
000044  43c0              MVNS     r0,r0
000046  b2c0              UXTB     r0,r0
000048  9000              STR      r0,[sp,#0]
;;;396      /* Wait for last operation to be completed */
;;;397      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00004a  200b              MOVS     r0,#0xb
00004c  0400              LSLS     r0,r0,#16
00004e  f7fffffe          BL       FLASH_WaitForLastOperation
000052  4605              MOV      r5,r0
;;;398    
;;;399      if(status == FLASH_COMPLETE)
000054  2d04              CMP      r5,#4
000056  d136              BNE      |L10.198|
;;;400      {
;;;401        FLASH->CR |= FLASH_CR_OPTPG;
000058  481c              LDR      r0,|L10.204|
00005a  6900              LDR      r0,[r0,#0x10]
00005c  2110              MOVS     r1,#0x10
00005e  4308              ORRS     r0,r0,r1
000060  491a              LDR      r1,|L10.204|
000062  6108              STR      r0,[r1,#0x10]
;;;402    
;;;403       if((WRP0_Data != 0xFF) ||(WRP1_Data != 0xFF))
000064  2eff              CMP      r6,#0xff
000066  d101              BNE      |L10.108|
000068  2fff              CMP      r7,#0xff
00006a  d00e              BEQ      |L10.138|
                  |L10.108|
;;;404        {
;;;405          OB->WRP1_WRP0 = (WRP0_Data) | (nWRP0_Data<<8) | (WRP1_Data<<16) | (nWRP1_Data<<24);
00006c  9803              LDR      r0,[sp,#0xc]
00006e  0200              LSLS     r0,r0,#8
000070  4330              ORRS     r0,r0,r6
000072  0439              LSLS     r1,r7,#16
000074  4308              ORRS     r0,r0,r1
000076  9902              LDR      r1,[sp,#8]
000078  0609              LSLS     r1,r1,#24
00007a  4308              ORRS     r0,r0,r1
00007c  4914              LDR      r1,|L10.208|
00007e  6088              STR      r0,[r1,#8]
;;;406          
;;;407          /* Wait for last operation to be completed */
;;;408          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000080  200b              MOVS     r0,#0xb
000082  0400              LSLS     r0,r0,#16
000084  f7fffffe          BL       FLASH_WaitForLastOperation
000088  4605              MOV      r5,r0
                  |L10.138|
;;;409        }
;;;410       if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
00008a  2d04              CMP      r5,#4
00008c  d113              BNE      |L10.182|
00008e  9805              LDR      r0,[sp,#0x14]
000090  28ff              CMP      r0,#0xff
000092  d010              BEQ      |L10.182|
;;;411        {
;;;412          OB->WRP3_WRP2  = (WRP2_Data) | (nWRP2_Data<<8) | (WRP3_Data<<16) | (nWRP3_Data<<24);
000094  9801              LDR      r0,[sp,#4]
000096  0200              LSLS     r0,r0,#8
000098  9905              LDR      r1,[sp,#0x14]
00009a  4308              ORRS     r0,r0,r1
00009c  9904              LDR      r1,[sp,#0x10]
00009e  0409              LSLS     r1,r1,#16
0000a0  4308              ORRS     r0,r0,r1
0000a2  9900              LDR      r1,[sp,#0]
0000a4  0609              LSLS     r1,r1,#24
0000a6  4308              ORRS     r0,r0,r1
0000a8  4909              LDR      r1,|L10.208|
0000aa  60c8              STR      r0,[r1,#0xc]
;;;413          
;;;414          /* Wait for last operation to be completed */
;;;415          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
0000ac  200b              MOVS     r0,#0xb
0000ae  0400              LSLS     r0,r0,#16
0000b0  f7fffffe          BL       FLASH_WaitForLastOperation
0000b4  4605              MOV      r5,r0
                  |L10.182|
;;;416        }    
;;;417        if(status != FLASH_TIMEOUT)
0000b6  2d05              CMP      r5,#5
0000b8  d005              BEQ      |L10.198|
;;;418        {
;;;419          /* if the program operation is completed, disable the OPTPG Bit */
;;;420          FLASH->CR &= ~FLASH_CR_OPTPG;
0000ba  4804              LDR      r0,|L10.204|
0000bc  6900              LDR      r0,[r0,#0x10]
0000be  2110              MOVS     r1,#0x10
0000c0  4388              BICS     r0,r0,r1
0000c2  4902              LDR      r1,|L10.204|
0000c4  6108              STR      r0,[r1,#0x10]
                  |L10.198|
;;;421        }
;;;422      } 
;;;423      /* Return the write protection operation Status */
;;;424      return status;
0000c6  4628              MOV      r0,r5
;;;425    }
0000c8  b006              ADD      sp,sp,#0x18
0000ca  bdf0              POP      {r4-r7,pc}
;;;426    
                          ENDP

                  |L10.204|
                          DCD      0x40022000
                  |L10.208|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_OB_Erase||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Erase PROC
;;;291      */
;;;292    FLASH_Status FLASH_OB_Erase(void)
000000  b530              PUSH     {r4,r5,lr}
;;;293    {
;;;294      uint32_t rdptmp = 0;
000002  2500              MOVS     r5,#0
;;;295    
;;;296      FLASH_Status status = FLASH_COMPLETE;
000004  2404              MOVS     r4,#4
;;;297    
;;;298      /* Get the actual read protection Option Byte value */ 
;;;299      if(FLASH_OB_GetRDP() != RESET)
000006  f7fffffe          BL       FLASH_OB_GetRDP
00000a  2800              CMP      r0,#0
00000c  d002              BEQ      |L11.20|
;;;300      {
;;;301        rdptmp = 0x0000 | 0xff00;  				//��������1
00000e  25ff              MOVS     r5,#0xff
000010  022d              LSLS     r5,r5,#8
000012  e000              B        |L11.22|
                  |L11.20|
;;;302      }
;;;303    	else
;;;304    	{
;;;305    		rdptmp = OB_RDP_Level_0 | 0x5500;	//��������0
000014  4d21              LDR      r5,|L11.156|
                  |L11.22|
;;;306    	}
;;;307    	
;;;308    	/*Get iwdg value */
;;;309    //	if ((uint8_t)(FLASH->OBR & (FLASH_OBR_IWDG_SW)) != RESET)	
;;;310    //	{
;;;311    //		rdptmp |= 0x0f0000 | 0xf0000000;//HW iwdg
;;;312    //	}
;;;313    //	else
;;;314    	{
;;;315    		rdptmp |= 0x0e0000 | 0xf1000000;//sw iwdg
000016  4822              LDR      r0,|L11.160|
000018  4305              ORRS     r5,r5,r0
;;;316    	}
;;;317    
;;;318      /* Wait for last operation to be completed */
;;;319      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00001a  200b              MOVS     r0,#0xb
00001c  0400              LSLS     r0,r0,#16
00001e  f7fffffe          BL       FLASH_WaitForLastOperation
000022  4604              MOV      r4,r0
;;;320    
;;;321      if(status == FLASH_COMPLETE)
000024  2c04              CMP      r4,#4
000026  d136              BNE      |L11.150|
;;;322      {   
;;;323        /* If the previous operation is completed, proceed to erase the option bytes */
;;;324        FLASH->CR |= FLASH_CR_OPTER;
000028  481e              LDR      r0,|L11.164|
00002a  6900              LDR      r0,[r0,#0x10]
00002c  2120              MOVS     r1,#0x20
00002e  4308              ORRS     r0,r0,r1
000030  491c              LDR      r1,|L11.164|
000032  6108              STR      r0,[r1,#0x10]
;;;325        FLASH->CR |= FLASH_CR_STRT;
000034  4608              MOV      r0,r1
000036  6900              LDR      r0,[r0,#0x10]
000038  2140              MOVS     r1,#0x40
00003a  4308              ORRS     r0,r0,r1
00003c  4919              LDR      r1,|L11.164|
00003e  6108              STR      r0,[r1,#0x10]
;;;326    
;;;327        /* Wait for last operation to be completed */
;;;328        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000040  200b              MOVS     r0,#0xb
000042  0400              LSLS     r0,r0,#16
000044  f7fffffe          BL       FLASH_WaitForLastOperation
000048  4604              MOV      r4,r0
;;;329        
;;;330        if(status == FLASH_COMPLETE)
00004a  2c04              CMP      r4,#4
00004c  d11b              BNE      |L11.134|
;;;331        {
;;;332          /* If the erase operation is completed, disable the OPTER Bit */
;;;333          FLASH->CR &= ~FLASH_CR_OPTER;
00004e  4815              LDR      r0,|L11.164|
000050  6900              LDR      r0,[r0,#0x10]
000052  2120              MOVS     r1,#0x20
000054  4388              BICS     r0,r0,r1
000056  4913              LDR      r1,|L11.164|
000058  6108              STR      r0,[r1,#0x10]
;;;334           
;;;335          /* Enable the Option Bytes Programming operation */
;;;336          FLASH->CR |= FLASH_CR_OPTPG;
00005a  4608              MOV      r0,r1
00005c  6900              LDR      r0,[r0,#0x10]
00005e  2110              MOVS     r1,#0x10
000060  4308              ORRS     r0,r0,r1
000062  4910              LDR      r1,|L11.164|
000064  6108              STR      r0,[r1,#0x10]
;;;337    
;;;338          /* Restore the last read protection Option Byte value */
;;;339          OB->USER_RDP = rdptmp; 
000066  4810              LDR      r0,|L11.168|
000068  6005              STR      r5,[r0,#0]
;;;340    
;;;341          /* Wait for last operation to be completed */
;;;342          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00006a  200b              MOVS     r0,#0xb
00006c  0400              LSLS     r0,r0,#16
00006e  f7fffffe          BL       FLASH_WaitForLastOperation
000072  4604              MOV      r4,r0
;;;343     
;;;344          if(status != FLASH_TIMEOUT)
000074  2c05              CMP      r4,#5
000076  d00e              BEQ      |L11.150|
;;;345          {
;;;346            /* if the program operation is completed, disable the OPTPG Bit */
;;;347            FLASH->CR &= ~FLASH_CR_OPTPG;
000078  480a              LDR      r0,|L11.164|
00007a  6900              LDR      r0,[r0,#0x10]
00007c  2110              MOVS     r1,#0x10
00007e  4388              BICS     r0,r0,r1
000080  4908              LDR      r1,|L11.164|
000082  6108              STR      r0,[r1,#0x10]
000084  e007              B        |L11.150|
                  |L11.134|
;;;348          }
;;;349        }
;;;350        else
;;;351        {
;;;352          if (status != FLASH_TIMEOUT)
000086  2c05              CMP      r4,#5
000088  d005              BEQ      |L11.150|
;;;353          {
;;;354            /* Disable the OPTPG Bit */
;;;355            FLASH->CR &= ~FLASH_CR_OPTPG;
00008a  4806              LDR      r0,|L11.164|
00008c  6900              LDR      r0,[r0,#0x10]
00008e  2110              MOVS     r1,#0x10
000090  4388              BICS     r0,r0,r1
000092  4904              LDR      r1,|L11.164|
000094  6108              STR      r0,[r1,#0x10]
                  |L11.150|
;;;356          }
;;;357        }  
;;;358      }
;;;359      /* Return the erase status */
;;;360      return status;
000096  4620              MOV      r0,r4
;;;361    }
000098  bd30              POP      {r4,r5,pc}
;;;362    
                          ENDP

00009a  0000              DCW      0x0000
                  |L11.156|
                          DCD      0x000055aa
                  |L11.160|
                          DCD      0xf10e0000
                  |L11.164|
                          DCD      0x40022000
                  |L11.168|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_OB_GetRDP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetRDP PROC
;;;865      */
;;;866    FlagStatus FLASH_OB_GetRDP(void)
000000  2000              MOVS     r0,#0
;;;867    {
;;;868      FlagStatus readstatus = RESET;
;;;869      
;;;870      if ((uint8_t)(FLASH->OBR & (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2)) != RESET)
000002  4905              LDR      r1,|L12.24|
000004  69c9              LDR      r1,[r1,#0x1c]
000006  2206              MOVS     r2,#6
000008  4011              ANDS     r1,r1,r2
00000a  2900              CMP      r1,#0
00000c  d001              BEQ      |L12.18|
;;;871      {
;;;872        readstatus = SET;
00000e  2001              MOVS     r0,#1
000010  e000              B        |L12.20|
                  |L12.18|
;;;873      }
;;;874      else
;;;875      {
;;;876        readstatus = RESET;
000012  2000              MOVS     r0,#0
                  |L12.20|
;;;877      }
;;;878      return readstatus;
;;;879    }
000014  4770              BX       lr
;;;880    
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetUser PROC
;;;843      */
;;;844    uint8_t FLASH_OB_GetUser(void)
000000  4802              LDR      r0,|L13.12|
;;;845    {
;;;846      /* Return the User Option Byte */
;;;847      return (uint8_t)(FLASH->OBR >> 8);
000002  69c0              LDR      r0,[r0,#0x1c]
000004  0400              LSLS     r0,r0,#16
000006  0e00              LSRS     r0,r0,#24
;;;848    }
000008  4770              BX       lr
;;;849    
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetWRP PROC
;;;854      */
;;;855    uint32_t FLASH_OB_GetWRP(void)
000000  4801              LDR      r0,|L14.8|
;;;856    {
;;;857      /* Return the FLASH write protection Register value */
;;;858      return (uint32_t)(FLASH->WRPR);
000002  6a00              LDR      r0,[r0,#0x20]
;;;859    }
000004  4770              BX       lr
;;;860    
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_Launch||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Launch PROC
;;;275      */
;;;276    void FLASH_OB_Launch(void)
000000  4803              LDR      r0,|L15.16|
;;;277    {
;;;278      /* Set the OBL_Launch bit to launch the option byte loading */
;;;279      FLASH->CR |= FLASH_CR_OBL_LAUNCH;
000002  6900              LDR      r0,[r0,#0x10]
000004  2101              MOVS     r1,#1
000006  0349              LSLS     r1,r1,#13
000008  4308              ORRS     r0,r0,r1
00000a  4901              LDR      r1,|L15.16|
00000c  6108              STR      r0,[r1,#0x10]
;;;280    }
00000e  4770              BX       lr
;;;281    
                          ENDP

                  |L15.16|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Lock PROC
;;;264      */
;;;265    void FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L16.16|
;;;266    {
;;;267      /* Set the OPTWREN Bit to lock the option bytes block access */
;;;268      FLASH->CR &= ~FLASH_CR_OPTWRE;
000002  6900              LDR      r0,[r0,#0x10]
000004  2101              MOVS     r1,#1
000006  0249              LSLS     r1,r1,#9
000008  4388              BICS     r0,r0,r1
00000a  4901              LDR      r1,|L16.16|
00000c  6108              STR      r0,[r1,#0x10]
;;;269    }
00000e  4770              BX       lr
;;;270    
                          ENDP

                  |L16.16|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_ProgramData||, CODE, READONLY, ALIGN=2

                  FLASH_OB_ProgramData PROC
;;;811      */
;;;812    FLASH_Status FLASH_OB_ProgramData(uint32_t Address, uint32_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;813    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;814      FLASH_Status status = FLASH_COMPLETE;
000006  2404              MOVS     r4,#4
;;;815    
;;;816      /* Check the parameters */
;;;817      assert_param(IS_OB_DATA_ADDRESS(Address));
;;;818      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000008  200b              MOVS     r0,#0xb
00000a  0400              LSLS     r0,r0,#16
00000c  f7fffffe          BL       FLASH_WaitForLastOperation
000010  4604              MOV      r4,r0
;;;819    	
;;;820    	if(status == FLASH_COMPLETE)
000012  2c04              CMP      r4,#4
000014  d113              BNE      |L17.62|
;;;821    	{
;;;822    		/* Enables the Option Bytes Programming operation */
;;;823    		FLASH->CR |= FLASH_CR_OPTPG; 
000016  480b              LDR      r0,|L17.68|
000018  6900              LDR      r0,[r0,#0x10]
00001a  2110              MOVS     r1,#0x10
00001c  4308              ORRS     r0,r0,r1
00001e  4909              LDR      r1,|L17.68|
000020  6108              STR      r0,[r1,#0x10]
;;;824    		*(__IO uint32_t*)Address = Data;
000022  602e              STR      r6,[r5,#0]
;;;825    		
;;;826    		/* Wait for last operation to be completed */
;;;827    		status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000024  200b              MOVS     r0,#0xb
000026  0400              LSLS     r0,r0,#16
000028  f7fffffe          BL       FLASH_WaitForLastOperation
00002c  4604              MOV      r4,r0
;;;828    		
;;;829    		if(status != FLASH_TIMEOUT)
00002e  2c05              CMP      r4,#5
000030  d005              BEQ      |L17.62|
;;;830    		{
;;;831    			/* If the program operation is completed, disable the OPTPG Bit */
;;;832    			FLASH->CR &= ~FLASH_CR_OPTPG;
000032  4804              LDR      r0,|L17.68|
000034  6900              LDR      r0,[r0,#0x10]
000036  2110              MOVS     r1,#0x10
000038  4388              BICS     r0,r0,r1
00003a  4902              LDR      r1,|L17.68|
00003c  6108              STR      r0,[r1,#0x10]
                  |L17.62|
;;;833    		}
;;;834    	}
;;;835      /* Return the Option Byte Data Program Status */
;;;836      return status;
00003e  4620              MOV      r0,r4
;;;837    }
000040  bd70              POP      {r4-r6,pc}
;;;838    
                          ENDP

000042  0000              DCW      0x0000
                  |L17.68|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_RDPConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_RDPConfig PROC
;;;440      */
;;;441    FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP)
000000  b5f0              PUSH     {r4-r7,lr}
;;;442    {
000002  4605              MOV      r5,r0
;;;443      FLASH_Status status = FLASH_COMPLETE;
000004  2404              MOVS     r4,#4
;;;444      uint32_t ob_user_rdp = 0;
000006  2700              MOVS     r7,#0
;;;445    	uint16_t ob_rdp_nrdp = 0;
000008  2600              MOVS     r6,#0
;;;446    	
;;;447      /* Check the parameters */
;;;448      assert_param(IS_OB_RDP(OB_RDP));
;;;449      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00000a  200b              MOVS     r0,#0xb
00000c  0400              LSLS     r0,r0,#16
00000e  f7fffffe          BL       FLASH_WaitForLastOperation
000012  4604              MOV      r4,r0
;;;450    	
;;;451    	ob_user_rdp = OB->USER_RDP & 0xffff0000;
000014  4823              LDR      r0,|L18.164|
000016  6800              LDR      r0,[r0,#0]
000018  0c07              LSRS     r7,r0,#16
00001a  043f              LSLS     r7,r7,#16
;;;452    	ob_rdp_nrdp = OB_RDP;
00001c  462e              MOV      r6,r5
;;;453    	OB_RDP = ~OB_RDP;
00001e  43e8              MVNS     r0,r5
000020  b2c5              UXTB     r5,r0
;;;454    	ob_rdp_nrdp |= OB_RDP<<8;
000022  0228              LSLS     r0,r5,#8
000024  4306              ORRS     r6,r6,r0
;;;455      ob_user_rdp |= ob_rdp_nrdp;
000026  4638              MOV      r0,r7
000028  4330              ORRS     r0,r0,r6
00002a  4607              MOV      r7,r0
;;;456    	
;;;457      if(status == FLASH_COMPLETE)
00002c  2c04              CMP      r4,#4
00002e  d136              BNE      |L18.158|
;;;458      {
;;;459        FLASH->CR |= FLASH_CR_OPTER;
000030  481d              LDR      r0,|L18.168|
000032  6900              LDR      r0,[r0,#0x10]
000034  2120              MOVS     r1,#0x20
000036  4308              ORRS     r0,r0,r1
000038  491b              LDR      r1,|L18.168|
00003a  6108              STR      r0,[r1,#0x10]
;;;460        FLASH->CR |= FLASH_CR_STRT;
00003c  4608              MOV      r0,r1
00003e  6900              LDR      r0,[r0,#0x10]
000040  2140              MOVS     r1,#0x40
000042  4308              ORRS     r0,r0,r1
000044  4918              LDR      r1,|L18.168|
000046  6108              STR      r0,[r1,#0x10]
;;;461        
;;;462        /* Wait for last operation to be completed */
;;;463        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000048  200b              MOVS     r0,#0xb
00004a  0400              LSLS     r0,r0,#16
00004c  f7fffffe          BL       FLASH_WaitForLastOperation
000050  4604              MOV      r4,r0
;;;464        
;;;465        if(status == FLASH_COMPLETE)
000052  2c04              CMP      r4,#4
000054  d11b              BNE      |L18.142|
;;;466        {
;;;467          /* If the erase operation is completed, disable the OPTER Bit */
;;;468          FLASH->CR &= ~FLASH_CR_OPTER;
000056  4814              LDR      r0,|L18.168|
000058  6900              LDR      r0,[r0,#0x10]
00005a  2120              MOVS     r1,#0x20
00005c  4388              BICS     r0,r0,r1
00005e  4912              LDR      r1,|L18.168|
000060  6108              STR      r0,[r1,#0x10]
;;;469          
;;;470          /* Enable the Option Bytes Programming operation */
;;;471          FLASH->CR |= FLASH_CR_OPTPG;
000062  4608              MOV      r0,r1
000064  6900              LDR      r0,[r0,#0x10]
000066  2110              MOVS     r1,#0x10
000068  4308              ORRS     r0,r0,r1
00006a  490f              LDR      r1,|L18.168|
00006c  6108              STR      r0,[r1,#0x10]
;;;472           
;;;473          OB->USER_RDP = ob_user_rdp;
00006e  480d              LDR      r0,|L18.164|
000070  6007              STR      r7,[r0,#0]
;;;474    
;;;475          /* Wait for last operation to be completed */
;;;476          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
000072  200b              MOVS     r0,#0xb
000074  0400              LSLS     r0,r0,#16
000076  f7fffffe          BL       FLASH_WaitForLastOperation
00007a  4604              MOV      r4,r0
;;;477        
;;;478          if(status != FLASH_TIMEOUT)
00007c  2c05              CMP      r4,#5
00007e  d00e              BEQ      |L18.158|
;;;479          {
;;;480            /* if the program operation is completed, disable the OPTPG Bit */
;;;481            FLASH->CR &= ~FLASH_CR_OPTPG;
000080  4809              LDR      r0,|L18.168|
000082  6900              LDR      r0,[r0,#0x10]
000084  2110              MOVS     r1,#0x10
000086  4388              BICS     r0,r0,r1
000088  4907              LDR      r1,|L18.168|
00008a  6108              STR      r0,[r1,#0x10]
00008c  e007              B        |L18.158|
                  |L18.142|
;;;482          }
;;;483        }
;;;484        else 
;;;485        {
;;;486          if(status != FLASH_TIMEOUT)
00008e  2c05              CMP      r4,#5
000090  d005              BEQ      |L18.158|
;;;487          {
;;;488            /* Disable the OPTER Bit */
;;;489            FLASH->CR &= ~FLASH_CR_OPTER;
000092  4805              LDR      r0,|L18.168|
000094  6900              LDR      r0,[r0,#0x10]
000096  2120              MOVS     r1,#0x20
000098  4388              BICS     r0,r0,r1
00009a  4903              LDR      r1,|L18.168|
00009c  6108              STR      r0,[r1,#0x10]
                  |L18.158|
;;;490          }
;;;491        }
;;;492      }
;;;493      /* Return the protection operation Status */
;;;494      return status;
00009e  4620              MOV      r0,r4
;;;495    }
0000a0  bdf0              POP      {r4-r7,pc}
;;;496    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L18.164|
                          DCD      0x1ffff800
                  |L18.168|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_SRAMParityConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_SRAMParityConfig PROC
;;;687      */
;;;688    FLASH_Status FLASH_OB_SRAMParityConfig(uint8_t OB_SRAM_Parity)
000000  b5f8              PUSH     {r3-r7,lr}
;;;689    {
000002  4606              MOV      r6,r0
;;;690      FLASH_Status status = FLASH_COMPLETE; 
000004  2404              MOVS     r4,#4
;;;691    	uint32_t ob_user_rdp = 0;
000006  2700              MOVS     r7,#0
;;;692    	uint8_t	ob_user = 0,ob_nuser = 0;
000008  2500              MOVS     r5,#0
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;693    	
;;;694      /* Check the parameters */
;;;695      assert_param(IS_OB_SRAM_PARITY(OB_SRAM_Parity));
;;;696    
;;;697      /* Wait for last operation to be completed */
;;;698      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00000e  200b              MOVS     r0,#0xb
000010  0400              LSLS     r0,r0,#16
000012  f7fffffe          BL       FLASH_WaitForLastOperation
000016  4604              MOV      r4,r0
;;;699      
;;;700    	ob_user = OB->USER_RDP >>16 & 0xbf;//Clear
000018  4823              LDR      r0,|L19.168|
00001a  6800              LDR      r0,[r0,#0]
00001c  0c00              LSRS     r0,r0,#16
00001e  21bf              MOVS     r1,#0xbf
000020  4008              ANDS     r0,r0,r1
000022  4605              MOV      r5,r0
;;;701    	ob_user |= OB_SRAM_Parity;
000024  4628              MOV      r0,r5
000026  4330              ORRS     r0,r0,r6
000028  4605              MOV      r5,r0
;;;702    	ob_nuser = ~ob_user;
00002a  43e8              MVNS     r0,r5
00002c  b2c0              UXTB     r0,r0
00002e  9000              STR      r0,[sp,#0]
;;;703      ob_user_rdp = (OB->USER_RDP &0x0000ffff) |  ob_user<<16 | ob_nuser<<24;
000030  481d              LDR      r0,|L19.168|
000032  6800              LDR      r0,[r0,#0]
000034  b280              UXTH     r0,r0
000036  0429              LSLS     r1,r5,#16
000038  4308              ORRS     r0,r0,r1
00003a  9900              LDR      r1,[sp,#0]
00003c  0609              LSLS     r1,r1,#24
00003e  4308              ORRS     r0,r0,r1
000040  4607              MOV      r7,r0
;;;704      
;;;705      if(status == FLASH_COMPLETE)
000042  2c04              CMP      r4,#4
000044  d12d              BNE      |L19.162|
;;;706      {
;;;707        FLASH->CR |= FLASH_CR_OPTER;
000046  4819              LDR      r0,|L19.172|
000048  6900              LDR      r0,[r0,#0x10]
00004a  2120              MOVS     r1,#0x20
00004c  4308              ORRS     r0,r0,r1
00004e  4917              LDR      r1,|L19.172|
000050  6108              STR      r0,[r1,#0x10]
;;;708        FLASH->CR |= FLASH_CR_STRT;
000052  4608              MOV      r0,r1
000054  6900              LDR      r0,[r0,#0x10]
000056  2140              MOVS     r1,#0x40
000058  4308              ORRS     r0,r0,r1
00005a  4914              LDR      r1,|L19.172|
00005c  6108              STR      r0,[r1,#0x10]
;;;709        
;;;710        /* Wait for last operation to be completed */
;;;711        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00005e  200b              MOVS     r0,#0xb
000060  0400              LSLS     r0,r0,#16
000062  f7fffffe          BL       FLASH_WaitForLastOperation
000066  4604              MOV      r4,r0
;;;712        
;;;713        if(status == FLASH_COMPLETE)
000068  2c04              CMP      r4,#4
00006a  d11a              BNE      |L19.162|
;;;714        {
;;;715          /* If the erase operation is completed, disable the OPTER Bit */
;;;716          FLASH->CR &= ~FLASH_CR_OPTER;
00006c  480f              LDR      r0,|L19.172|
00006e  6900              LDR      r0,[r0,#0x10]
000070  2120              MOVS     r1,#0x20
000072  4388              BICS     r0,r0,r1
000074  490d              LDR      r1,|L19.172|
000076  6108              STR      r0,[r1,#0x10]
;;;717    			/* Enable the Option Bytes Programming operation */
;;;718    			FLASH->CR |= FLASH_CR_OPTPG; 
000078  4608              MOV      r0,r1
00007a  6900              LDR      r0,[r0,#0x10]
00007c  2110              MOVS     r1,#0x10
00007e  4308              ORRS     r0,r0,r1
000080  490a              LDR      r1,|L19.172|
000082  6108              STR      r0,[r1,#0x10]
;;;719    
;;;720    			OB->USER_RDP = ob_user_rdp;
000084  4808              LDR      r0,|L19.168|
000086  6007              STR      r7,[r0,#0]
;;;721    		
;;;722    			/* Wait for last operation to be completed */
;;;723    			status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000088  200b              MOVS     r0,#0xb
00008a  0400              LSLS     r0,r0,#16
00008c  f7fffffe          BL       FLASH_WaitForLastOperation
000090  4604              MOV      r4,r0
;;;724    
;;;725    			if(status != FLASH_TIMEOUT)
000092  2c05              CMP      r4,#5
000094  d005              BEQ      |L19.162|
;;;726    			{
;;;727    				/* if the program operation is completed, disable the OPTPG Bit */
;;;728    				FLASH->CR &= ~FLASH_CR_OPTPG;
000096  4805              LDR      r0,|L19.172|
000098  6900              LDR      r0,[r0,#0x10]
00009a  2110              MOVS     r1,#0x10
00009c  4388              BICS     r0,r0,r1
00009e  4903              LDR      r1,|L19.172|
0000a0  6108              STR      r0,[r1,#0x10]
                  |L19.162|
;;;729    			}
;;;730    		}
;;;731    	}
;;;732      /* Return the Option Byte program Status */
;;;733      return status;
0000a2  4620              MOV      r0,r4
;;;734    }
0000a4  bdf8              POP      {r3-r7,pc}
;;;735    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L19.168|
                          DCD      0x1ffff800
                  |L19.172|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Unlock PROC
;;;249      */
;;;250    void FLASH_OB_Unlock(void)
000000  4806              LDR      r0,|L20.28|
;;;251    {
;;;252      if((FLASH->CR & FLASH_CR_OPTWRE) == RESET)
000002  6900              LDR      r0,[r0,#0x10]
000004  2101              MOVS     r1,#1
000006  0249              LSLS     r1,r1,#9
000008  4008              ANDS     r0,r0,r1
00000a  2800              CMP      r0,#0
00000c  d104              BNE      |L20.24|
;;;253      { 
;;;254        /* Unlocking the option bytes block access */
;;;255        FLASH->OPTKEYR = FLASH_OPTKEY1;
00000e  4804              LDR      r0,|L20.32|
000010  4902              LDR      r1,|L20.28|
000012  6088              STR      r0,[r1,#8]
;;;256        FLASH->OPTKEYR = FLASH_OPTKEY2;
000014  4803              LDR      r0,|L20.36|
000016  6088              STR      r0,[r1,#8]
                  |L20.24|
;;;257      }
;;;258    }
000018  4770              BX       lr
;;;259    
                          ENDP

00001a  0000              DCW      0x0000
                  |L20.28|
                          DCD      0x40022000
                  |L20.32|
                          DCD      0x45670123
                  |L20.36|
                          DCD      0xcdef89ab

                          AREA ||i.FLASH_OB_UserConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_UserConfig PROC
;;;516      */
;;;517    FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;518    {
000002  b082              SUB      sp,sp,#8
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;519      FLASH_Status status = FLASH_COMPLETE; 
000008  2404              MOVS     r4,#4
;;;520    	uint32_t ob_user_rdp = 0;
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;521    	uint8_t ob_user = 0,ob_nuser = 0;
00000e  2500              MOVS     r5,#0
000010  9000              STR      r0,[sp,#0]
;;;522    	
;;;523      /* Check the parameters */
;;;524      assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
;;;525      assert_param(IS_OB_STOP_SOURCE(OB_STOP));
;;;526      assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
;;;527    
;;;528      /* Wait for last operation to be completed */
;;;529      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000012  200b              MOVS     r0,#0xb
000014  0400              LSLS     r0,r0,#16
000016  f7fffffe          BL       FLASH_WaitForLastOperation
00001a  4604              MOV      r4,r0
;;;530      
;;;531    	ob_user = OB->USER_RDP >>16 & 0xF8;//Clear
00001c  4825              LDR      r0,|L21.180|
00001e  6800              LDR      r0,[r0,#0]
000020  0c00              LSRS     r0,r0,#16
000022  21f8              MOVS     r1,#0xf8
000024  4008              ANDS     r0,r0,r1
000026  4605              MOV      r5,r0
;;;532    	ob_user |= OB_IWDG | OB_STOP | OB_STDBY;
000028  4630              MOV      r0,r6
00002a  4338              ORRS     r0,r0,r7
00002c  9904              LDR      r1,[sp,#0x10]
00002e  4308              ORRS     r0,r0,r1
000030  4305              ORRS     r5,r5,r0
;;;533    	ob_nuser = ~ob_user;
000032  43e8              MVNS     r0,r5
000034  b2c0              UXTB     r0,r0
000036  9000              STR      r0,[sp,#0]
;;;534    
;;;535    	ob_user_rdp = (OB->USER_RDP &0x0000ffff) |  ob_user<<16 | ob_nuser<<24;
000038  481e              LDR      r0,|L21.180|
00003a  6800              LDR      r0,[r0,#0]
00003c  b280              UXTH     r0,r0
00003e  0429              LSLS     r1,r5,#16
000040  4308              ORRS     r0,r0,r1
000042  9900              LDR      r1,[sp,#0]
000044  0609              LSLS     r1,r1,#24
000046  4308              ORRS     r0,r0,r1
000048  9001              STR      r0,[sp,#4]
;;;536    	
;;;537      if(status == FLASH_COMPLETE)
00004a  2c04              CMP      r4,#4
00004c  d12e              BNE      |L21.172|
;;;538      {
;;;539        FLASH->CR |= FLASH_CR_OPTER;
00004e  481a              LDR      r0,|L21.184|
000050  6900              LDR      r0,[r0,#0x10]
000052  2120              MOVS     r1,#0x20
000054  4308              ORRS     r0,r0,r1
000056  4918              LDR      r1,|L21.184|
000058  6108              STR      r0,[r1,#0x10]
;;;540        FLASH->CR |= FLASH_CR_STRT;
00005a  4608              MOV      r0,r1
00005c  6900              LDR      r0,[r0,#0x10]
00005e  2140              MOVS     r1,#0x40
000060  4308              ORRS     r0,r0,r1
000062  4915              LDR      r1,|L21.184|
000064  6108              STR      r0,[r1,#0x10]
;;;541        
;;;542        /* Wait for last operation to be completed */
;;;543        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000066  200b              MOVS     r0,#0xb
000068  0400              LSLS     r0,r0,#16
00006a  f7fffffe          BL       FLASH_WaitForLastOperation
00006e  4604              MOV      r4,r0
;;;544        
;;;545        if(status == FLASH_COMPLETE)
000070  2c04              CMP      r4,#4
000072  d11b              BNE      |L21.172|
;;;546        {
;;;547          /* If the erase operation is completed, disable the OPTER Bit */
;;;548          FLASH->CR &= ~FLASH_CR_OPTER;
000074  4810              LDR      r0,|L21.184|
000076  6900              LDR      r0,[r0,#0x10]
000078  2120              MOVS     r1,#0x20
00007a  4388              BICS     r0,r0,r1
00007c  490e              LDR      r1,|L21.184|
00007e  6108              STR      r0,[r1,#0x10]
;;;549    			/* Enable the Option Bytes Programming operation */
;;;550    			FLASH->CR |= FLASH_CR_OPTPG; 
000080  4608              MOV      r0,r1
000082  6900              LDR      r0,[r0,#0x10]
000084  2110              MOVS     r1,#0x10
000086  4308              ORRS     r0,r0,r1
000088  490b              LDR      r1,|L21.184|
00008a  6108              STR      r0,[r1,#0x10]
;;;551    
;;;552    			OB->USER_RDP = ob_user_rdp;
00008c  4909              LDR      r1,|L21.180|
00008e  9801              LDR      r0,[sp,#4]
000090  6008              STR      r0,[r1,#0]
;;;553    		
;;;554    			/* Wait for last operation to be completed */
;;;555    			status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000092  200b              MOVS     r0,#0xb
000094  0400              LSLS     r0,r0,#16
000096  f7fffffe          BL       FLASH_WaitForLastOperation
00009a  4604              MOV      r4,r0
;;;556    
;;;557    			if(status != FLASH_TIMEOUT)
00009c  2c05              CMP      r4,#5
00009e  d005              BEQ      |L21.172|
;;;558    			{
;;;559    				/* If the program operation is completed, disable the OPTPG Bit */
;;;560    				FLASH->CR &= ~FLASH_CR_OPTPG;
0000a0  4805              LDR      r0,|L21.184|
0000a2  6900              LDR      r0,[r0,#0x10]
0000a4  2110              MOVS     r1,#0x10
0000a6  4388              BICS     r0,r0,r1
0000a8  4903              LDR      r1,|L21.184|
0000aa  6108              STR      r0,[r1,#0x10]
                  |L21.172|
;;;561    			}
;;;562    		}   
;;;563    	}		
;;;564      /* Return the Option Byte program Status */
;;;565      return status;
0000ac  4620              MOV      r0,r4
;;;566    }
0000ae  b005              ADD      sp,sp,#0x14
0000b0  bdf0              POP      {r4-r7,pc}
;;;567    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L21.180|
                          DCD      0x1ffff800
                  |L21.184|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_VDDAConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_VDDAConfig PROC
;;;631      */
;;;632    FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG)
000000  b5f8              PUSH     {r3-r7,lr}
;;;633    {
000002  4606              MOV      r6,r0
;;;634      FLASH_Status status = FLASH_COMPLETE; 
000004  2404              MOVS     r4,#4
;;;635    	uint32_t ob_user_rdp = 0;
000006  2700              MOVS     r7,#0
;;;636    	uint8_t ob_user = 0,ob_nuser = 0;
000008  2500              MOVS     r5,#0
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;637    	
;;;638      /* Check the parameters */
;;;639      assert_param(IS_OB_VDDA_ANALOG(OB_VDDA_ANALOG));
;;;640    
;;;641      /* Wait for last operation to be completed */
;;;642      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00000e  200b              MOVS     r0,#0xb
000010  0400              LSLS     r0,r0,#16
000012  f7fffffe          BL       FLASH_WaitForLastOperation
000016  4604              MOV      r4,r0
;;;643    	
;;;644    	ob_user = OB->USER_RDP >>16 & 0xdf;//Clear
000018  4823              LDR      r0,|L22.168|
00001a  6800              LDR      r0,[r0,#0]
00001c  0c00              LSRS     r0,r0,#16
00001e  21df              MOVS     r1,#0xdf
000020  4008              ANDS     r0,r0,r1
000022  4605              MOV      r5,r0
;;;645    	ob_user |= OB_VDDA_ANALOG;
000024  4628              MOV      r0,r5
000026  4330              ORRS     r0,r0,r6
000028  4605              MOV      r5,r0
;;;646    	ob_nuser = ~ob_user;
00002a  43e8              MVNS     r0,r5
00002c  b2c0              UXTB     r0,r0
00002e  9000              STR      r0,[sp,#0]
;;;647      ob_user_rdp = (OB->USER_RDP &0x0000ffff) |  ob_user<<16 | ob_nuser<<24;
000030  481d              LDR      r0,|L22.168|
000032  6800              LDR      r0,[r0,#0]
000034  b280              UXTH     r0,r0
000036  0429              LSLS     r1,r5,#16
000038  4308              ORRS     r0,r0,r1
00003a  9900              LDR      r1,[sp,#0]
00003c  0609              LSLS     r1,r1,#24
00003e  4308              ORRS     r0,r0,r1
000040  4607              MOV      r7,r0
;;;648      
;;;649      if(status == FLASH_COMPLETE)
000042  2c04              CMP      r4,#4
000044  d12d              BNE      |L22.162|
;;;650      {
;;;651        FLASH->CR |= FLASH_CR_OPTER;
000046  4819              LDR      r0,|L22.172|
000048  6900              LDR      r0,[r0,#0x10]
00004a  2120              MOVS     r1,#0x20
00004c  4308              ORRS     r0,r0,r1
00004e  4917              LDR      r1,|L22.172|
000050  6108              STR      r0,[r1,#0x10]
;;;652        FLASH->CR |= FLASH_CR_STRT;
000052  4608              MOV      r0,r1
000054  6900              LDR      r0,[r0,#0x10]
000056  2140              MOVS     r1,#0x40
000058  4308              ORRS     r0,r0,r1
00005a  4914              LDR      r1,|L22.172|
00005c  6108              STR      r0,[r1,#0x10]
;;;653        
;;;654        /* Wait for last operation to be completed */
;;;655        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00005e  200b              MOVS     r0,#0xb
000060  0400              LSLS     r0,r0,#16
000062  f7fffffe          BL       FLASH_WaitForLastOperation
000066  4604              MOV      r4,r0
;;;656        
;;;657        if(status == FLASH_COMPLETE)
000068  2c04              CMP      r4,#4
00006a  d11a              BNE      |L22.162|
;;;658        {
;;;659          /* If the erase operation is completed, disable the OPTER Bit */
;;;660          FLASH->CR &= ~FLASH_CR_OPTER;
00006c  480f              LDR      r0,|L22.172|
00006e  6900              LDR      r0,[r0,#0x10]
000070  2120              MOVS     r1,#0x20
000072  4388              BICS     r0,r0,r1
000074  490d              LDR      r1,|L22.172|
000076  6108              STR      r0,[r1,#0x10]
;;;661    			/* Enable the Option Bytes Programming operation */
;;;662    			FLASH->CR |= FLASH_CR_OPTPG; 
000078  4608              MOV      r0,r1
00007a  6900              LDR      r0,[r0,#0x10]
00007c  2110              MOVS     r1,#0x10
00007e  4308              ORRS     r0,r0,r1
000080  490a              LDR      r1,|L22.172|
000082  6108              STR      r0,[r1,#0x10]
;;;663    
;;;664    			OB->USER_RDP = ob_user_rdp;
000084  4808              LDR      r0,|L22.168|
000086  6007              STR      r7,[r0,#0]
;;;665    		
;;;666    			/* Wait for last operation to be completed */
;;;667    			status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000088  200b              MOVS     r0,#0xb
00008a  0400              LSLS     r0,r0,#16
00008c  f7fffffe          BL       FLASH_WaitForLastOperation
000090  4604              MOV      r4,r0
;;;668    
;;;669    			if(status != FLASH_TIMEOUT)
000092  2c05              CMP      r4,#5
000094  d005              BEQ      |L22.162|
;;;670    			{
;;;671    				/* if the program operation is completed, disable the OPTPG Bit */
;;;672    				FLASH->CR &= ~FLASH_CR_OPTPG;
000096  4805              LDR      r0,|L22.172|
000098  6900              LDR      r0,[r0,#0x10]
00009a  2110              MOVS     r1,#0x10
00009c  4388              BICS     r0,r0,r1
00009e  4903              LDR      r1,|L22.172|
0000a0  6108              STR      r0,[r1,#0x10]
                  |L22.162|
;;;673    			}
;;;674    		}
;;;675    	}
;;;676      /* Return the Option Byte program Status */
;;;677      return status;
0000a2  4620              MOV      r0,r4
;;;678    }
0000a4  bdf8              POP      {r3-r7,pc}
;;;679    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L22.168|
                          DCD      0x1ffff800
                  |L22.172|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_WriteUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_WriteUser PROC
;;;754      */
;;;755    FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
000000  b5f8              PUSH     {r3-r7,lr}
;;;756    {
000002  4606              MOV      r6,r0
;;;757      FLASH_Status status = FLASH_COMPLETE; 
000004  2404              MOVS     r4,#4
;;;758    	uint32_t ob_user_rdp = 0;
000006  2700              MOVS     r7,#0
;;;759    	uint8_t	ob_user = 0,ob_nuser = 0;
000008  2500              MOVS     r5,#0
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;760    	
;;;761      /* Wait for last operation to be completed */
;;;762      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00000e  200b              MOVS     r0,#0xb
000010  0400              LSLS     r0,r0,#16
000012  f7fffffe          BL       FLASH_WaitForLastOperation
000016  4604              MOV      r4,r0
;;;763      
;;;764    	ob_user = OB->USER_RDP >>16 & 0x00;//Clear
000018  4821              LDR      r0,|L23.160|
00001a  6800              LDR      r0,[r0,#0]
;;;765    	ob_user |= OB_USER;
00001c  4628              MOV      r0,r5
00001e  4330              ORRS     r0,r0,r6
000020  4605              MOV      r5,r0
;;;766    	ob_nuser = ~ob_user;
000022  43e8              MVNS     r0,r5
000024  b2c0              UXTB     r0,r0
000026  9000              STR      r0,[sp,#0]
;;;767      ob_user_rdp = (OB->USER_RDP &0x0000ffff) |  ob_user<<16 | ob_nuser<<24;
000028  481d              LDR      r0,|L23.160|
00002a  6800              LDR      r0,[r0,#0]
00002c  b280              UXTH     r0,r0
00002e  0429              LSLS     r1,r5,#16
000030  4308              ORRS     r0,r0,r1
000032  9900              LDR      r1,[sp,#0]
000034  0609              LSLS     r1,r1,#24
000036  4308              ORRS     r0,r0,r1
000038  4607              MOV      r7,r0
;;;768      
;;;769      if(status == FLASH_COMPLETE)
00003a  2c04              CMP      r4,#4
00003c  d12d              BNE      |L23.154|
;;;770      {
;;;771        FLASH->CR |= FLASH_CR_OPTER;
00003e  4819              LDR      r0,|L23.164|
000040  6900              LDR      r0,[r0,#0x10]
000042  2120              MOVS     r1,#0x20
000044  4308              ORRS     r0,r0,r1
000046  4917              LDR      r1,|L23.164|
000048  6108              STR      r0,[r1,#0x10]
;;;772        FLASH->CR |= FLASH_CR_STRT;
00004a  4608              MOV      r0,r1
00004c  6900              LDR      r0,[r0,#0x10]
00004e  2140              MOVS     r1,#0x40
000050  4308              ORRS     r0,r0,r1
000052  4914              LDR      r1,|L23.164|
000054  6108              STR      r0,[r1,#0x10]
;;;773        
;;;774        /* Wait for last operation to be completed */
;;;775        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000056  200b              MOVS     r0,#0xb
000058  0400              LSLS     r0,r0,#16
00005a  f7fffffe          BL       FLASH_WaitForLastOperation
00005e  4604              MOV      r4,r0
;;;776        
;;;777        if(status == FLASH_COMPLETE)
000060  2c04              CMP      r4,#4
000062  d11a              BNE      |L23.154|
;;;778        {
;;;779          /* If the erase operation is completed, disable the OPTER Bit */
;;;780          FLASH->CR &= ~FLASH_CR_OPTER;
000064  480f              LDR      r0,|L23.164|
000066  6900              LDR      r0,[r0,#0x10]
000068  2120              MOVS     r1,#0x20
00006a  4388              BICS     r0,r0,r1
00006c  490d              LDR      r1,|L23.164|
00006e  6108              STR      r0,[r1,#0x10]
;;;781    			/* Enable the Option Bytes Programming operation */
;;;782    			FLASH->CR |= FLASH_CR_OPTPG; 
000070  4608              MOV      r0,r1
000072  6900              LDR      r0,[r0,#0x10]
000074  2110              MOVS     r1,#0x10
000076  4308              ORRS     r0,r0,r1
000078  490a              LDR      r1,|L23.164|
00007a  6108              STR      r0,[r1,#0x10]
;;;783    
;;;784    			OB->USER_RDP = ob_user_rdp;
00007c  4808              LDR      r0,|L23.160|
00007e  6007              STR      r7,[r0,#0]
;;;785    		
;;;786    			/* Wait for last operation to be completed */
;;;787    			status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000080  200b              MOVS     r0,#0xb
000082  0400              LSLS     r0,r0,#16
000084  f7fffffe          BL       FLASH_WaitForLastOperation
000088  4604              MOV      r4,r0
;;;788    
;;;789    			if(status != FLASH_TIMEOUT)
00008a  2c05              CMP      r4,#5
00008c  d005              BEQ      |L23.154|
;;;790    			{
;;;791    				/* If the program operation is completed, disable the OPTPG Bit */
;;;792    				FLASH->CR &= ~FLASH_CR_OPTPG;
00008e  4805              LDR      r0,|L23.164|
000090  6900              LDR      r0,[r0,#0x10]
000092  2110              MOVS     r1,#0x10
000094  4388              BICS     r0,r0,r1
000096  4903              LDR      r1,|L23.164|
000098  6108              STR      r0,[r1,#0x10]
                  |L23.154|
;;;793    			}
;;;794    		}    
;;;795    	}
;;;796      /* Return the Option Byte program Status */
;;;797      return status;
00009a  4620              MOV      r0,r4
;;;798    
;;;799    }
00009c  bdf8              POP      {r3-r7,pc}
;;;800    
                          ENDP

00009e  0000              DCW      0x0000
                  |L23.160|
                          DCD      0x1ffff800
                  |L23.164|
                          DCD      0x40022000

                          AREA ||i.FLASH_PrefetchBufferCmd||, CODE, READONLY, ALIGN=2

                  FLASH_PrefetchBufferCmd PROC
;;;51       */
;;;52     void FLASH_PrefetchBufferCmd(FunctionalState NewState)
000000  2800              CMP      r0,#0
;;;53     {
;;;54       /* Check the parameters */
;;;55       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;56     
;;;57       if(NewState != DISABLE)
000002  d006              BEQ      |L24.18|
;;;58       {
;;;59         FLASH->ACR |= FLASH_ACR_PRFTBE;
000004  4906              LDR      r1,|L24.32|
000006  6809              LDR      r1,[r1,#0]
000008  2210              MOVS     r2,#0x10
00000a  4311              ORRS     r1,r1,r2
00000c  4a04              LDR      r2,|L24.32|
00000e  6011              STR      r1,[r2,#0]
000010  e005              B        |L24.30|
                  |L24.18|
;;;60       }
;;;61       else
;;;62       {
;;;63         FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
000012  4903              LDR      r1,|L24.32|
000014  6809              LDR      r1,[r1,#0]
000016  2210              MOVS     r2,#0x10
000018  4391              BICS     r1,r1,r2
00001a  4a01              LDR      r2,|L24.32|
00001c  6011              STR      r1,[r2,#0]
                  |L24.30|
;;;64       }
;;;65     }
00001e  4770              BX       lr
;;;66     
                          ENDP

                  |L24.32|
                          DCD      0x40022000

                          AREA ||i.FLASH_ProgramWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramWord PROC
;;;206      */
;;;207    FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
000000  b578              PUSH     {r3-r6,lr}
;;;208    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;209      FLASH_Status status = FLASH_COMPLETE;
000006  2604              MOVS     r6,#4
;;;210      __IO uint32_t tmp = 0;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;211    
;;;212      /* Check the parameters */
;;;213      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;214    
;;;215      FLASH_PrefetchBufferCmd(DISABLE);
00000c  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;216      __ASM("ISB");
000010  f3bf8f6f          ISB      
;;;217    
;;;218      /* Wait for last operation to be completed */
;;;219      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000014  200b              MOVS     r0,#0xb
000016  0400              LSLS     r0,r0,#16
000018  f7fffffe          BL       FLASH_WaitForLastOperation
00001c  4606              MOV      r6,r0
;;;220      
;;;221      if(status == FLASH_COMPLETE)
00001e  2e04              CMP      r6,#4
000020  d111              BNE      |L25.70|
;;;222      {
;;;223        /* If the previous operation is completed, proceed to program the new first word */
;;;224        FLASH->CR |= FLASH_CR_PG;
000022  480b              LDR      r0,|L25.80|
000024  6900              LDR      r0,[r0,#0x10]
000026  2101              MOVS     r1,#1
000028  4308              ORRS     r0,r0,r1
00002a  4909              LDR      r1,|L25.80|
00002c  6108              STR      r0,[r1,#0x10]
;;;225      
;;;226        *(__IO uint32_t*)Address = Data;
00002e  6025              STR      r5,[r4,#0]
;;;227        
;;;228        /* Wait for last operation to be completed */
;;;229        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000030  200b              MOVS     r0,#0xb
000032  0400              LSLS     r0,r0,#16
000034  f7fffffe          BL       FLASH_WaitForLastOperation
000038  4606              MOV      r6,r0
;;;230     
;;;231        /* Disable the PG Bit */
;;;232        FLASH->CR &= ~FLASH_CR_PG;
00003a  4805              LDR      r0,|L25.80|
00003c  6900              LDR      r0,[r0,#0x10]
00003e  0840              LSRS     r0,r0,#1
000040  0040              LSLS     r0,r0,#1
000042  4903              LDR      r1,|L25.80|
000044  6108              STR      r0,[r1,#0x10]
                  |L25.70|
;;;233      }
;;;234    
;;;235      FLASH_PrefetchBufferCmd(ENABLE);
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;236       
;;;237      /* Return the Program Status */
;;;238      return status;
00004c  4630              MOV      r0,r6
;;;239    }
00004e  bd78              POP      {r3-r6,pc}
;;;240    
                          ENDP

                  |L25.80|
                          DCD      0x40022000

                          AREA ||i.FLASH_SetLatency||, CODE, READONLY, ALIGN=2

                  FLASH_SetLatency PROC
;;;27       */
;;;28     void FLASH_SetLatency(uint32_t FLASH_Latency)
000000  4601              MOV      r1,r0
;;;29     {
;;;30        uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;31     
;;;32       /* Check the parameters */
;;;33       assert_param(IS_FLASH_LATENCY(FLASH_Latency));
;;;34     
;;;35       /* Read the ACR register */
;;;36       tmpreg = FLASH->ACR;  
000004  4a04              LDR      r2,|L26.24|
000006  6810              LDR      r0,[r2,#0]
;;;37     
;;;38       /* Sets the Latency value */
;;;39       tmpreg &= (uint32_t) (~((uint32_t)FLASH_ACR_LATENCY));
000008  0840              LSRS     r0,r0,#1
00000a  0040              LSLS     r0,r0,#1
;;;40       tmpreg |= FLASH_Latency;
00000c  4602              MOV      r2,r0
00000e  430a              ORRS     r2,r2,r1
000010  4610              MOV      r0,r2
;;;41     
;;;42       /* Write the ACR register */
;;;43       FLASH->ACR = tmpreg;
000012  4a01              LDR      r2,|L26.24|
000014  6010              STR      r0,[r2,#0]
;;;44     }
000016  4770              BX       lr
;;;45     
                          ENDP

                  |L26.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  FLASH_Unlock PROC
;;;93       */
;;;94     void FLASH_Unlock(void)
000000  4805              LDR      r0,|L27.24|
;;;95     {
;;;96       if((FLASH->CR & FLASH_CR_LOCK) != RESET)
000002  6900              LDR      r0,[r0,#0x10]
000004  2180              MOVS     r1,#0x80
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d004              BEQ      |L27.22|
;;;97       {
;;;98         /* Unlocking the program memory access */
;;;99         FLASH->KEYR = FLASH_FKEY1;
00000c  4803              LDR      r0,|L27.28|
00000e  4902              LDR      r1,|L27.24|
000010  6048              STR      r0,[r1,#4]
;;;100        FLASH->KEYR = FLASH_FKEY2;
000012  4803              LDR      r0,|L27.32|
000014  6048              STR      r0,[r1,#4]
                  |L27.22|
;;;101      }
;;;102    }
000016  4770              BX       lr
;;;103    
                          ENDP

                  |L27.24|
                          DCD      0x40022000
                  |L27.28|
                          DCD      0x45670123
                  |L27.32|
                          DCD      0xcdef89ab

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=1

                  FLASH_WaitForLastOperation PROC
;;;1001     */
;;;1002   FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b510              PUSH     {r4,lr}
;;;1003   { 
000002  4603              MOV      r3,r0
;;;1004     FLASH_Status status = FLASH_COMPLETE;
000004  2404              MOVS     r4,#4
;;;1005      
;;;1006     /* Check for the FLASH Status */
;;;1007     status = FLASH_GetStatus();
000006  f7fffffe          BL       FLASH_GetStatus
00000a  4604              MOV      r4,r0
;;;1008     
;;;1009     /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
;;;1010     while((status == FLASH_BUSY) && (Timeout != 0x00))
00000c  e003              B        |L28.22|
                  |L28.14|
;;;1011     {
;;;1012       status = FLASH_GetStatus();
00000e  f7fffffe          BL       FLASH_GetStatus
000012  4604              MOV      r4,r0
;;;1013       Timeout--;
000014  1e5b              SUBS     r3,r3,#1
                  |L28.22|
000016  2c01              CMP      r4,#1                 ;1010
000018  d101              BNE      |L28.30|
00001a  2b00              CMP      r3,#0                 ;1010
00001c  d1f7              BNE      |L28.14|
                  |L28.30|
;;;1014     }
;;;1015     
;;;1016     if(Timeout == 0x00 )
00001e  2b00              CMP      r3,#0
000020  d100              BNE      |L28.36|
;;;1017     {
;;;1018       status = FLASH_TIMEOUT;
000022  2405              MOVS     r4,#5
                  |L28.36|
;;;1019     }
;;;1020     /* Return the operation status */
;;;1021     return status;
000024  4620              MOV      r0,r4
;;;1022   }
000026  bd10              POP      {r4,pc}
;;;1023   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\FTLib\\Src\\ft32f0xx_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_ft32f0xx_flash_c_a2a150d6____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___16_ft32f0xx_flash_c_a2a150d6____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_ft32f0xx_flash_c_a2a150d6____REVSH|
#line 144
|__asm___16_ft32f0xx_flash_c_a2a150d6____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
