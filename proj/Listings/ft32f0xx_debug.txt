; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\ft32f0xx_debug.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ft32f0xx_debug.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I.\RTE\_Keyboard -IC:\Users\Reidgjiao\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -IC:\Keil_v5-MDK\ARM\CMSIS\Include -D__UVISION_VERSION=529 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\ft32f0xx_debug.crf ..\FTLib\Src\ft32f0xx_debug.c]
                          THUMB

                          AREA ||i.DBGMCU_APB1PeriphConfig||, CODE, READONLY, ALIGN=2

                  DBGMCU_APB1PeriphConfig PROC
;;;91       */
;;;92     void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;93     {
;;;94       /* Check the parameters */
;;;95       assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
;;;96       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;97     
;;;98       if (NewState != DISABLE)
000002  d005              BEQ      |L1.16|
;;;99       {
;;;100        DBGMCU->APB1FZ |= DBGMCU_Periph;
000004  4a05              LDR      r2,|L1.28|
000006  6892              LDR      r2,[r2,#8]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L1.28|
00000c  609a              STR      r2,[r3,#8]
00000e  e004              B        |L1.26|
                  |L1.16|
;;;101      }
;;;102      else
;;;103      {
;;;104        DBGMCU->APB1FZ &= ~DBGMCU_Periph;
000010  4a02              LDR      r2,|L1.28|
000012  6892              LDR      r2,[r2,#8]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L1.28|
000018  609a              STR      r2,[r3,#8]
                  |L1.26|
;;;105      }
;;;106    }
00001a  4770              BX       lr
;;;107    
                          ENDP

                  |L1.28|
                          DCD      0x40015800

                          AREA ||i.DBGMCU_APB2PeriphConfig||, CODE, READONLY, ALIGN=2

                  DBGMCU_APB2PeriphConfig PROC
;;;119      */
;;;120    void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;121    {
;;;122      /* Check the parameters */
;;;123      assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
;;;124      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;125    
;;;126      if (NewState != DISABLE)
000002  d005              BEQ      |L2.16|
;;;127      {
;;;128        DBGMCU->APB2FZ |= DBGMCU_Periph;
000004  4a05              LDR      r2,|L2.28|
000006  68d2              LDR      r2,[r2,#0xc]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L2.28|
00000c  60da              STR      r2,[r3,#0xc]
00000e  e004              B        |L2.26|
                  |L2.16|
;;;129      }
;;;130      else
;;;131      {
;;;132        DBGMCU->APB2FZ &= ~DBGMCU_Periph;
000010  4a02              LDR      r2,|L2.28|
000012  68d2              LDR      r2,[r2,#0xc]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L2.28|
000018  60da              STR      r2,[r3,#0xc]
                  |L2.26|
;;;133      }
;;;134    }
00001a  4770              BX       lr
;;;135    
                          ENDP

                  |L2.28|
                          DCD      0x40015800

                          AREA ||i.DBGMCU_Config||, CODE, READONLY, ALIGN=2

                  DBGMCU_Config PROC
;;;54       */
;;;55     void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;56     {
;;;57       /* Check the parameters */
;;;58       assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
;;;59       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;60     
;;;61       if (NewState != DISABLE)
000002  d005              BEQ      |L3.16|
;;;62       {
;;;63         DBGMCU->CR |= DBGMCU_Periph;
000004  4a05              LDR      r2,|L3.28|
000006  6852              LDR      r2,[r2,#4]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L3.28|
00000c  605a              STR      r2,[r3,#4]
00000e  e004              B        |L3.26|
                  |L3.16|
;;;64       }
;;;65       else
;;;66       {
;;;67         DBGMCU->CR &= ~DBGMCU_Periph;
000010  4a02              LDR      r2,|L3.28|
000012  6852              LDR      r2,[r2,#4]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L3.28|
000018  605a              STR      r2,[r3,#4]
                  |L3.26|
;;;68       }
;;;69     }
00001a  4770              BX       lr
;;;70     
                          ENDP

                  |L3.28|
                          DCD      0x40015800

                          AREA ||i.DBGMCU_GetDEVID||, CODE, READONLY, ALIGN=2

                  DBGMCU_GetDEVID PROC
;;;36       */
;;;37     uint32_t DBGMCU_GetDEVID(void)
000000  4802              LDR      r0,|L4.12|
;;;38     {
;;;39        return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
000002  6800              LDR      r0,[r0,#0]
000004  0500              LSLS     r0,r0,#20
000006  0d00              LSRS     r0,r0,#20
;;;40     }
000008  4770              BX       lr
;;;41     
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x40015800

                          AREA ||i.DBGMCU_GetREVID||, CODE, READONLY, ALIGN=2

                  DBGMCU_GetREVID PROC
;;;26       */
;;;27     uint32_t DBGMCU_GetREVID(void)
000000  4801              LDR      r0,|L5.8|
;;;28     {
;;;29        return(DBGMCU->IDCODE >> 16);
000002  6800              LDR      r0,[r0,#0]
000004  0c00              LSRS     r0,r0,#16
;;;30     }
000006  4770              BX       lr
;;;31     
                          ENDP

                  |L5.8|
                          DCD      0x40015800

;*** Start embedded assembler ***

#line 1 "..\\FTLib\\Src\\ft32f0xx_debug.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_ft32f0xx_debug_c_588a430f____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___16_ft32f0xx_debug_c_588a430f____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_ft32f0xx_debug_c_588a430f____REVSH|
#line 144
|__asm___16_ft32f0xx_debug_c_588a430f____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
