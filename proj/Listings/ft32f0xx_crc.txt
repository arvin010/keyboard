; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\ft32f0xx_crc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ft32f0xx_crc.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I.\RTE\_Keyboard -IC:\Users\Reidgjiao\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -IC:\Keil_v5-MDK\ARM\CMSIS\Include -D__UVISION_VERSION=529 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\ft32f0xx_crc.crf ..\FTLib\Src\ft32f0xx_crc.c]
                          THUMB

                          AREA ||i.CRC_CalcBlockCRC||, CODE, READONLY, ALIGN=2

                  CRC_CalcBlockCRC PROC
;;;200      */
;;;201    uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
000000  b510              PUSH     {r4,lr}
;;;202    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;203      uint32_t index = 0;
000006  2100              MOVS     r1,#0
;;;204      
;;;205      for(index = 0; index < BufferLength; index++)
000008  bf00              NOP      
00000a  e004              B        |L1.22|
                  |L1.12|
;;;206      {
;;;207        CRC->DR = pBuffer[index];
00000c  0088              LSLS     r0,r1,#2
00000e  5810              LDR      r0,[r2,r0]
000010  4c03              LDR      r4,|L1.32|
000012  6020              STR      r0,[r4,#0]
000014  1c49              ADDS     r1,r1,#1              ;205
                  |L1.22|
000016  4299              CMP      r1,r3                 ;205
000018  d3f8              BCC      |L1.12|
;;;208      }
;;;209      return (CRC->DR);
00001a  4801              LDR      r0,|L1.32|
00001c  6800              LDR      r0,[r0,#0]
;;;210    }
00001e  bd10              POP      {r4,pc}
;;;211    
                          ENDP

                  |L1.32|
                          DCD      0x40023000

                          AREA ||i.CRC_CalcCRC||, CODE, READONLY, ALIGN=2

                  CRC_CalcCRC PROC
;;;163      */
;;;164    uint32_t CRC_CalcCRC(uint32_t CRC_Data)
000000  4601              MOV      r1,r0
;;;165    {
;;;166      CRC->DR = CRC_Data;
000002  4802              LDR      r0,|L2.12|
000004  6001              STR      r1,[r0,#0]
;;;167      
;;;168      return (CRC->DR);
000006  6800              LDR      r0,[r0,#0]
;;;169    }
000008  4770              BX       lr
;;;170    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x40023000

                          AREA ||i.CRC_CalcCRC16bits||, CODE, READONLY, ALIGN=2

                  CRC_CalcCRC16bits PROC
;;;175      */
;;;176    uint32_t CRC_CalcCRC16bits(uint16_t CRC_Data)
000000  4601              MOV      r1,r0
;;;177    {
;;;178      *(uint16_t*)(CRC_BASE) = (uint16_t) CRC_Data;
000002  4802              LDR      r0,|L3.12|
000004  8001              STRH     r1,[r0,#0]
;;;179      
;;;180      return (CRC->DR);
000006  6800              LDR      r0,[r0,#0]
;;;181    }
000008  4770              BX       lr
;;;182    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40023000

                          AREA ||i.CRC_CalcCRC8bits||, CODE, READONLY, ALIGN=2

                  CRC_CalcCRC8bits PROC
;;;187      */
;;;188    uint32_t CRC_CalcCRC8bits(uint8_t CRC_Data)
000000  4601              MOV      r1,r0
;;;189    {
;;;190      *(uint8_t*)(CRC_BASE) = (uint8_t) CRC_Data;
000002  4802              LDR      r0,|L4.12|
000004  7001              STRB     r1,[r0,#0]
;;;191    
;;;192      return (CRC->DR);
000006  6800              LDR      r0,[r0,#0]
;;;193    }
000008  4770              BX       lr
;;;194    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x40023000

                          AREA ||i.CRC_DeInit||, CODE, READONLY, ALIGN=2

                  CRC_DeInit PROC
;;;23       */
;;;24     void CRC_DeInit(void)
000000  2000              MOVS     r0,#0
;;;25     {
;;;26       /* Set DR register to reset value */
;;;27       CRC->DR = 0xFFFFFFFF;
000002  43c0              MVNS     r0,r0
000004  4904              LDR      r1,|L5.24|
000006  6008              STR      r0,[r1,#0]
;;;28     	
;;;29       /* Reset IDR register */
;;;30       CRC->IDR = 0x00;
000008  2000              MOVS     r0,#0
00000a  6048              STR      r0,[r1,#4]
;;;31       
;;;32       /* Set INIT register to reset value */
;;;33       CRC->INIT = 0xFFFFFFFF;
00000c  1e40              SUBS     r0,r0,#1
00000e  6108              STR      r0,[r1,#0x10]
;;;34       
;;;35       /* Reset the CRC calculation unit */
;;;36       CRC->CR = CRC_CR_RESET;
000010  2001              MOVS     r0,#1
000012  6088              STR      r0,[r1,#8]
;;;37     }
000014  4770              BX       lr
;;;38     
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      0x40023000

                          AREA ||i.CRC_GetCRC||, CODE, READONLY, ALIGN=2

                  CRC_GetCRC PROC
;;;216      */
;;;217    uint32_t CRC_GetCRC(void)
000000  4801              LDR      r0,|L6.8|
;;;218    {
;;;219      return (CRC->DR);
000002  6800              LDR      r0,[r0,#0]
;;;220    }
000004  4770              BX       lr
;;;221    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x40023000

                          AREA ||i.CRC_GetIDRegister||, CODE, READONLY, ALIGN=2

                  CRC_GetIDRegister PROC
;;;239      */
;;;240    uint8_t CRC_GetIDRegister(void)
000000  4801              LDR      r0,|L7.8|
;;;241    {
;;;242      return (uint8_t)(CRC->IDR);
000002  6840              LDR      r0,[r0,#4]
000004  b2c0              UXTB     r0,r0
;;;243    }
000006  4770              BX       lr
;;;244    
                          ENDP

                  |L7.8|
                          DCD      0x40023000

                          AREA ||i.CRC_ResetDR||, CODE, READONLY, ALIGN=2

                  CRC_ResetDR PROC
;;;43       */
;;;44     void CRC_ResetDR(void)
000000  4803              LDR      r0,|L8.16|
;;;45     {
;;;46       /* Reset CRC generator */
;;;47       CRC->CR |= CRC_CR_RESET;
000002  6880              LDR      r0,[r0,#8]
000004  2101              MOVS     r1,#1
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L8.16|
00000a  6088              STR      r0,[r1,#8]
;;;48     }
00000c  4770              BX       lr
;;;49     
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40023000

                          AREA ||i.CRC_ReverseInputDataSelect||, CODE, READONLY, ALIGN=2

                  CRC_ReverseInputDataSelect PROC
;;;89       */
;;;90     void CRC_ReverseInputDataSelect(uint32_t CRC_ReverseInputData)
000000  4601              MOV      r1,r0
;;;91     {
;;;92       uint32_t tmpcr = 0;
000002  2000              MOVS     r0,#0
;;;93     
;;;94       /* Check the parameter */
;;;95       assert_param(IS_CRC_REVERSE_INPUT_DATA(CRC_ReverseInputData));
;;;96     
;;;97       /* Get CR register value */
;;;98       tmpcr = CRC->CR;
000004  4a05              LDR      r2,|L9.28|
000006  6890              LDR      r0,[r2,#8]
;;;99     
;;;100      /* Reset REV_IN bits */
;;;101      tmpcr &= (uint32_t)~((uint32_t)CRC_CR_REV_IN);
000008  2360              MOVS     r3,#0x60
00000a  4602              MOV      r2,r0
00000c  439a              BICS     r2,r2,r3
00000e  4610              MOV      r0,r2
;;;102      /* Set the reverse operation */
;;;103      tmpcr |= (uint32_t)CRC_ReverseInputData;
000010  4602              MOV      r2,r0
000012  430a              ORRS     r2,r2,r1
000014  4610              MOV      r0,r2
;;;104    
;;;105      /* Write to CR register */
;;;106      CRC->CR = (uint32_t)tmpcr;
000016  4a01              LDR      r2,|L9.28|
000018  6090              STR      r0,[r2,#8]
;;;107    }
00001a  4770              BX       lr
;;;108    
                          ENDP

                  |L9.28|
                          DCD      0x40023000

                          AREA ||i.CRC_ReverseOutputDataCmd||, CODE, READONLY, ALIGN=2

                  CRC_ReverseOutputDataCmd PROC
;;;115      */
;;;116    void CRC_ReverseOutputDataCmd(FunctionalState NewState)
000000  2800              CMP      r0,#0
;;;117    {
;;;118      /* Check the parameters */
;;;119      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;120    
;;;121      if (NewState != DISABLE)
000002  d006              BEQ      |L10.18|
;;;122      {
;;;123        /* Enable reverse operation on output data */
;;;124        CRC->CR |= CRC_CR_REV_OUT;
000004  4906              LDR      r1,|L10.32|
000006  6889              LDR      r1,[r1,#8]
000008  2280              MOVS     r2,#0x80
00000a  4311              ORRS     r1,r1,r2
00000c  4a04              LDR      r2,|L10.32|
00000e  6091              STR      r1,[r2,#8]
000010  e005              B        |L10.30|
                  |L10.18|
;;;125      }
;;;126      else
;;;127      {
;;;128        /* Disable reverse operation on output data */
;;;129        CRC->CR &= (uint32_t)~((uint32_t)CRC_CR_REV_OUT);
000012  4903              LDR      r1,|L10.32|
000014  6889              LDR      r1,[r1,#8]
000016  2280              MOVS     r2,#0x80
000018  4391              BICS     r1,r1,r2
00001a  4a01              LDR      r2,|L10.32|
00001c  6091              STR      r1,[r2,#8]
                  |L10.30|
;;;130      }
;;;131    }
00001e  4770              BX       lr
;;;132    
                          ENDP

                  |L10.32|
                          DCD      0x40023000

                          AREA ||i.CRC_SetIDRegister||, CODE, READONLY, ALIGN=2

                  CRC_SetIDRegister PROC
;;;229      */
;;;230    void CRC_SetIDRegister(uint8_t CRC_IDValue)
000000  4901              LDR      r1,|L11.8|
;;;231    {
;;;232      CRC->IDR = CRC_IDValue;
000002  6048              STR      r0,[r1,#4]
;;;233    }
000004  4770              BX       lr
;;;234    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x40023000

                          AREA ||i.CRC_SetInitRegister||, CODE, READONLY, ALIGN=2

                  CRC_SetInitRegister PROC
;;;138      */
;;;139    void CRC_SetInitRegister(uint32_t CRC_InitValue)
000000  4901              LDR      r1,|L12.8|
;;;140    {
;;;141      CRC->INIT = CRC_InitValue;
000002  6108              STR      r0,[r1,#0x10]
;;;142    }
000004  4770              BX       lr
;;;143    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x40023000

                          AREA ||i.CRC_SetPolynomial||, CODE, READONLY, ALIGN=1

                  CRC_SetPolynomial PROC
;;;149      */
;;;150    void CRC_SetPolynomial(uint32_t CRC_Pol)
000000  4770              BX       lr
;;;151    {
;;;152     // CRC->POL = CRC_Pol;
;;;153    }
;;;154    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\FTLib\\Src\\ft32f0xx_crc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_ft32f0xx_crc_c_3a35c564____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___14_ft32f0xx_crc_c_3a35c564____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_ft32f0xx_crc_c_3a35c564____REVSH|
#line 144
|__asm___14_ft32f0xx_crc_c_3a35c564____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
