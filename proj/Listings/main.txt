; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I.\RTE\_Keyboard -IC:\Users\Reidgjiao\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -IC:\Keil_v5-MDK\ARM\CMSIS\Include -D__UVISION_VERSION=529 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\main.crf ..\user\main.c]
                          THUMB

                          AREA ||i.build_keycode||, CODE, READONLY, ALIGN=1

                  build_keycode PROC
;;;261    
;;;262    void build_keycode(matrix_t* matrix)
000000  b5f0              PUSH     {r4-r7,lr}
;;;263    {
000002  b0a1              SUB      sp,sp,#0x84
000004  4604              MOV      r4,r0
;;;264    	uint8_t t_buff[128] = {0x00};
000006  2180              MOVS     r1,#0x80
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memclr4
;;;265    	uint8_t i, q = 0x00, index = 2;
00000e  2700              MOVS     r7,#0
000010  2602              MOVS     r6,#2
;;;266    
;;;267    	handle_super_key(matrix);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       handle_super_key
;;;268    	q = get_key_down_list(&(matrix->buf), t_buff, sizeof(t_buff));
000018  2280              MOVS     r2,#0x80
00001a  a901              ADD      r1,sp,#4
00001c  4620              MOV      r0,r4
00001e  304e              ADDS     r0,r0,#0x4e
000020  f7fffffe          BL       get_key_down_list
000024  4607              MOV      r7,r0
;;;269    	
;;;270    	for(i = 0; i < q && index < 8; ++i)
000026  2500              MOVS     r5,#0
000028  e030              B        |L1.140|
                  |L1.42|
;;;271    	{
;;;272    		switch(t_buff[i])
00002a  a801              ADD      r0,sp,#4
00002c  5d40              LDRB     r0,[r0,r5]
00002e  38b0              SUBS     r0,r0,#0xb0
000030  0003              MOVS     r3,r0
000032  f7fffffe          BL       __ARM_common_switch8
000036  110f              DCB      0x11,0x0f
000038  0d1f0e10          DCB      0x0d,0x1f,0x0e,0x10
00003c  1f12111f          DCB      0x1f,0x12,0x11,0x1f
000040  1f131f1f          DCB      0x1f,0x13,0x1f,0x1f
000044  1f0a0b0c          DCB      0x1f,0x0a,0x0b,0x0c
000048  1f00              DCB      0x1f,0x00
;;;273    		{
;;;274    			case BRIGHT_DOWN:			
;;;275    			case BRIGHT_UP:			
00004a  bf00              NOP      
;;;276    			case WWW_SEARCH:								
00004c  bf00              NOP      
;;;277    			case PRETRACK:			
00004e  bf00              NOP      
;;;278    			case PLAY_PAUSE:	
000050  bf00              NOP      
;;;279    			case NEXTTRACK:	
000052  bf00              NOP      
;;;280    			case MUTE:
000054  bf00              NOP      
;;;281    			case VOL_DOWN:				
000056  bf00              NOP      
;;;282    			case VOL_UP:
000058  bf00              NOP      
;;;283    			case LOCK: //这里临时用来表示弹光驱键
00005a  bf00              NOP      
;;;284    				if(matrix->acpi_send_flag == 0x00)
00005c  20a4              MOVS     r0,#0xa4
00005e  5d00              LDRB     r0,[r0,r4]
000060  2800              CMP      r0,#0
000062  d106              BNE      |L1.114|
;;;285    				{
;;;286    					matrix->acpi_send[0] = t_buff[i];
000064  a801              ADD      r0,sp,#4
000066  5d41              LDRB     r1,[r0,r5]
000068  20a2              MOVS     r0,#0xa2
00006a  5501              STRB     r1,[r0,r4]
;;;287    					matrix->acpi_send_flag = 0x01;
00006c  2101              MOVS     r1,#1
00006e  20a4              MOVS     r0,#0xa4
000070  5501              STRB     r1,[r0,r4]
                  |L1.114|
;;;288    				}
;;;289    			break;	
000072  e008              B        |L1.134|
;;;290    			default: matrix->send[index++] = t_buff[i];
000074  a801              ADD      r0,sp,#4
000076  5d41              LDRB     r1,[r0,r5]
000078  4630              MOV      r0,r6
00007a  1c72              ADDS     r2,r6,#1
00007c  b2d6              UXTB     r6,r2
00007e  4622              MOV      r2,r4
000080  329a              ADDS     r2,r2,#0x9a
000082  5411              STRB     r1,[r2,r0]
000084  bf00              NOP                            ;272
                  |L1.134|
000086  bf00              NOP                            ;289
000088  1c68              ADDS     r0,r5,#1              ;270
00008a  b2c5              UXTB     r5,r0                 ;270
                  |L1.140|
00008c  42bd              CMP      r5,r7                 ;270
00008e  da01              BGE      |L1.148|
000090  2e08              CMP      r6,#8                 ;270
000092  dbca              BLT      |L1.42|
                  |L1.148|
;;;291    		}	
;;;292    	
;;;293    	}
;;;294    	
;;;295    	if(matrix->acpi_send_flag == 0x02 && !get_key(&matrix->buf, matrix->acpi_send[0]))
000094  20a4              MOVS     r0,#0xa4
000096  5d00              LDRB     r0,[r0,r4]
000098  2802              CMP      r0,#2
00009a  d10f              BNE      |L1.188|
00009c  20a2              MOVS     r0,#0xa2
00009e  5d01              LDRB     r1,[r0,r4]
0000a0  4620              MOV      r0,r4
0000a2  304e              ADDS     r0,r0,#0x4e
0000a4  f7fffffe          BL       get_key
0000a8  2800              CMP      r0,#0
0000aa  d107              BNE      |L1.188|
;;;296    	{
;;;297    		memset(matrix->acpi_send, 0x00, sizeof(matrix->acpi_send));
0000ac  4620              MOV      r0,r4
0000ae  30a2              ADDS     r0,r0,#0xa2
0000b0  2100              MOVS     r1,#0
0000b2  7001              STRB     r1,[r0,#0]
0000b4  7041              STRB     r1,[r0,#1]
;;;298    		matrix->acpi_send_flag = 0x03;
0000b6  2103              MOVS     r1,#3
0000b8  20a4              MOVS     r0,#0xa4
0000ba  5501              STRB     r1,[r0,r4]
                  |L1.188|
;;;299    	}
;;;300    	
;;;301    	key_clear(&(matrix->buf));
0000bc  4620              MOV      r0,r4
0000be  304e              ADDS     r0,r0,#0x4e
0000c0  f7fffffe          BL       key_clear
;;;302    }
0000c4  b021              ADD      sp,sp,#0x84
0000c6  bdf0              POP      {r4-r7,pc}
;;;303    
                          ENDP


                          AREA ||i.build_media_key||, CODE, READONLY, ALIGN=1

                  build_media_key PROC
;;;347    
;;;348    void build_media_key(matrix_t* matrix, uint8_t* media_buffer, uint8_t len)
000000  b510              PUSH     {r4,lr}
;;;349    {
000002  4614              MOV      r4,r2
;;;350    	media_buffer[0] = 0x03;
000004  2203              MOVS     r2,#3
000006  700a              STRB     r2,[r1,#0]
;;;351    	switch(matrix->acpi_send[0])
000008  22a2              MOVS     r2,#0xa2
00000a  5c12              LDRB     r2,[r2,r0]
00000c  3ab0              SUBS     r2,r2,#0xb0
00000e  0013              MOVS     r3,r2
000010  f7fffffe          BL       __ARM_common_switch8
000014  110a0f3c          DCB      0x11,0x0a,0x0f,0x3c
000018  14193c1e          DCB      0x14,0x19,0x3c,0x1e
00001c  233c3c28          DCB      0x23,0x3c,0x3c,0x28
000020  3c3c3c2d          DCB      0x3c,0x3c,0x3c,0x2d
000024  32373c00          DCB      0x32,0x37,0x3c,0x00
;;;352    	{
;;;353    		/*下一曲*/
;;;354    		case NEXTTRACK:		
;;;355    			media_buffer[1] = 0xB5; 
000028  22b5              MOVS     r2,#0xb5
00002a  704a              STRB     r2,[r1,#1]
;;;356    			media_buffer[2] = 0x00; 
00002c  2200              MOVS     r2,#0
00002e  708a              STRB     r2,[r1,#2]
;;;357    		break;
000030  e02c              B        |L2.140|
;;;358    			
;;;359    		/*上一曲*/
;;;360    		case PRETRACK: 		
;;;361    			media_buffer[1] = 0xB6; 
000032  22b6              MOVS     r2,#0xb6
000034  704a              STRB     r2,[r1,#1]
;;;362    			media_buffer[2] = 0x00; 
000036  2200              MOVS     r2,#0
000038  708a              STRB     r2,[r1,#2]
;;;363    		break;
00003a  e027              B        |L2.140|
;;;364    			
;;;365    		/*播放-暂停*/
;;;366    		case PLAY_PAUSE:	
;;;367    			media_buffer[1] = 0xCD; 
00003c  22cd              MOVS     r2,#0xcd
00003e  704a              STRB     r2,[r1,#1]
;;;368    			media_buffer[2] = 0x00; 
000040  2200              MOVS     r2,#0
000042  708a              STRB     r2,[r1,#2]
;;;369    		break;
000044  e022              B        |L2.140|
;;;370    		
;;;371    		/*静音*/
;;;372    		case MUTE: 			
;;;373    			media_buffer[1] = 0xE2; 
000046  22e2              MOVS     r2,#0xe2
000048  704a              STRB     r2,[r1,#1]
;;;374    			media_buffer[2] = 0x00; 
00004a  2200              MOVS     r2,#0
00004c  708a              STRB     r2,[r1,#2]
;;;375    		break;
00004e  e01d              B        |L2.140|
;;;376    			
;;;377    		/*音量+*/
;;;378    		case VOL_UP:		
;;;379    			media_buffer[1] = 0xE9; 
000050  22e9              MOVS     r2,#0xe9
000052  704a              STRB     r2,[r1,#1]
;;;380    			media_buffer[2] = 0x00; 
000054  2200              MOVS     r2,#0
000056  708a              STRB     r2,[r1,#2]
;;;381    		break;
000058  e018              B        |L2.140|
;;;382    			
;;;383    		/*音量-*/
;;;384    		case VOL_DOWN:		
;;;385    			media_buffer[1] = 0xEA; 
00005a  22ea              MOVS     r2,#0xea
00005c  704a              STRB     r2,[r1,#1]
;;;386    			media_buffer[2] = 0x00; 
00005e  2200              MOVS     r2,#0
000060  708a              STRB     r2,[r1,#2]
;;;387    		break; 
000062  e013              B        |L2.140|
;;;388    			
;;;389    		/*锁屏 //这里临时用来表示弹光驱键*/
;;;390    		case LOCK:			
;;;391    			media_buffer[1] = 0xB8; 
000064  22b8              MOVS     r2,#0xb8
000066  704a              STRB     r2,[r1,#1]
;;;392    			media_buffer[2] = 0x00; 
000068  2200              MOVS     r2,#0
00006a  708a              STRB     r2,[r1,#2]
;;;393    		break;
00006c  e00e              B        |L2.140|
;;;394    			
;;;395    		/*背光-*/
;;;396    		case BRIGHT_DOWN:	
;;;397    			media_buffer[1] = 0x70; 
00006e  2270              MOVS     r2,#0x70
000070  704a              STRB     r2,[r1,#1]
;;;398    			media_buffer[2] = 0x00;
000072  2200              MOVS     r2,#0
000074  708a              STRB     r2,[r1,#2]
;;;399    		break;
000076  e009              B        |L2.140|
;;;400    			
;;;401    		/*背光+*/
;;;402    		case BRIGHT_UP:		
;;;403    			media_buffer[1] = 0x6F; 
000078  226f              MOVS     r2,#0x6f
00007a  704a              STRB     r2,[r1,#1]
;;;404    			media_buffer[2] = 0x00; 
00007c  2200              MOVS     r2,#0
00007e  708a              STRB     r2,[r1,#2]
;;;405    		break;        
000080  e004              B        |L2.140|
;;;406    			
;;;407    		/*搜索*/
;;;408    		case WWW_SEARCH:		
;;;409    			media_buffer[1] = 0x21; 
000082  2221              MOVS     r2,#0x21
000084  704a              STRB     r2,[r1,#1]
;;;410    			media_buffer[2] = 0x02; 
000086  2202              MOVS     r2,#2
000088  708a              STRB     r2,[r1,#2]
;;;411    		break;
00008a  bf00              NOP      
                  |L2.140|
00008c  bf00              NOP                            ;357
;;;412    	}
;;;413    }
00008e  bd10              POP      {r4,pc}
;;;414    
                          ENDP


                          AREA ||i.handle_super_key||, CODE, READONLY, ALIGN=1

                  handle_super_key PROC
;;;240    
;;;241    static void handle_super_key(matrix_t* matrix)
000000  b570              PUSH     {r4-r6,lr}
;;;242    {
000002  4604              MOV      r4,r0
;;;243    	uint8_t i;
;;;244    	
;;;245    	for(i = 0; i < 8; ++i)
000004  2500              MOVS     r5,#0
000006  e019              B        |L3.60|
                  |L3.8|
;;;246    	{
;;;247    		if(get_key(&(matrix->buf), 0xE0 + i))
000008  4628              MOV      r0,r5
00000a  30e0              ADDS     r0,r0,#0xe0
00000c  b2c1              UXTB     r1,r0
00000e  4620              MOV      r0,r4
000010  304e              ADDS     r0,r0,#0x4e
000012  f7fffffe          BL       get_key
000016  2800              CMP      r0,#0
000018  d00e              BEQ      |L3.56|
;;;248    		{
;;;249    			key_up(&(matrix->buf), 0xE0 + i);
00001a  4628              MOV      r0,r5
00001c  30e0              ADDS     r0,r0,#0xe0
00001e  b2c1              UXTB     r1,r0
000020  4620              MOV      r0,r4
000022  304e              ADDS     r0,r0,#0x4e
000024  f7fffffe          BL       key_up
;;;250    			matrix->send[0] |= 1 << i;
000028  209a              MOVS     r0,#0x9a
00002a  5d00              LDRB     r0,[r0,r4]
00002c  2101              MOVS     r1,#1
00002e  40a9              LSLS     r1,r1,r5
000030  4308              ORRS     r0,r0,r1
000032  b2c1              UXTB     r1,r0
000034  209a              MOVS     r0,#0x9a
000036  5501              STRB     r1,[r0,r4]
                  |L3.56|
000038  1c68              ADDS     r0,r5,#1              ;245
00003a  b2c5              UXTB     r5,r0                 ;245
                  |L3.60|
00003c  2d08              CMP      r5,#8                 ;245
00003e  dbe3              BLT      |L3.8|
;;;251    		}
;;;252    	}
;;;253    }
000040  bd70              POP      {r4-r6,pc}
;;;254    
                          ENDP


                          AREA ||i.hotKey||, CODE, READONLY, ALIGN=2

                  hotKey PROC
;;;188    
;;;189    void hotKey(matrix_t* matrix)
000000  b570              PUSH     {r4-r6,lr}
;;;190    {
000002  4604              MOV      r4,r0
;;;191    	static uint8_t b_flag = 0x00;
;;;192    	static uint8_t lock_flag = 0x00;
;;;193    	
;;;194    	if(lock_flag == 0x00 && get_key(&(matrix->buf), KEY_FN))
000004  483f              LDR      r0,|L4.260|
000006  7800              LDRB     r0,[r0,#0]  ; lock_flag
000008  2800              CMP      r0,#0
00000a  d11c              BNE      |L4.70|
00000c  21af              MOVS     r1,#0xaf
00000e  4620              MOV      r0,r4
000010  304e              ADDS     r0,r0,#0x4e
000012  f7fffffe          BL       get_key
000016  2800              CMP      r0,#0
000018  d015              BEQ      |L4.70|
;;;195    	{
;;;196    		lock_flag = 0x01;
00001a  2001              MOVS     r0,#1
00001c  4939              LDR      r1,|L4.260|
00001e  7008              STRB     r0,[r1,#0]
;;;197    		matrix->fn_led_status ^= 1;
000020  208e              MOVS     r0,#0x8e
000022  5d00              LDRB     r0,[r0,r4]
000024  2101              MOVS     r1,#1
000026  4048              EORS     r0,r0,r1
000028  218e              MOVS     r1,#0x8e
00002a  5508              STRB     r0,[r1,r4]
;;;198    		key_up(&(matrix->buf), KEY_FN);
00002c  21af              MOVS     r1,#0xaf
00002e  4620              MOV      r0,r4
000030  304e              ADDS     r0,r0,#0x4e
000032  f7fffffe          BL       key_up
;;;199    		GPIO_WriteBit(FN_PORT, FN_PIN, (BitAction)matrix->fn_led_status);
000036  208e              MOVS     r0,#0x8e
000038  5d02              LDRB     r2,[r0,r4]
00003a  2101              MOVS     r1,#1
00003c  0349              LSLS     r1,r1,#13
00003e  4832              LDR      r0,|L4.264|
000040  f7fffffe          BL       GPIO_WriteBit
                  |L4.68|
;;;200    		return ;
;;;201    	}else if(lock_flag == 0x01 && !get_key(&(matrix->buf), KEY_FN))
;;;202    	{
;;;203    		lock_flag = 0x00;
;;;204    		key_up(&(matrix->buf), KEY_FN);
;;;205    		return ;
;;;206    	}
;;;207    	
;;;208    	if(matrix->fn_led_status)
;;;209    	{
;;;210    		remap_fun(matrix, matrix->remap, matrix->remap_num);
;;;211    		
;;;212    		if(get_key(&matrix->buf, KEY_F3))
;;;213    		{
;;;214    			key_up(&matrix->buf, KEY_F3);
;;;215    			key_down(&matrix->buf, KEY_L_WIN);
;;;216    			key_down(&matrix->buf, KEY_TAB);
;;;217    		}
;;;218    		
;;;219    		/*背光调节*/
;;;220    		if(get_key(&matrix->buf, KEY_F6) && b_flag == 0x00)
;;;221    		{
;;;222    			b_flag = 0x01;
;;;223    		}
;;;224    		else if(get_key(&matrix->buf, KEY_F6) == 0x00 && b_flag == 0x01)
;;;225    		{
;;;226    			b_flag = 0x00;
;;;227    			set_bright_light();
;;;228    		}
;;;229    		
;;;230    		key_up(&matrix->buf, KEY_F6);
;;;231    	}
;;;232    
;;;233    }
000044  bd70              POP      {r4-r6,pc}
                  |L4.70|
000046  482f              LDR      r0,|L4.260|
000048  7800              LDRB     r0,[r0,#0]            ;201  ; lock_flag
00004a  2801              CMP      r0,#1                 ;201
00004c  d10e              BNE      |L4.108|
00004e  21af              MOVS     r1,#0xaf              ;201
000050  4620              MOV      r0,r4                 ;201
000052  304e              ADDS     r0,r0,#0x4e           ;201
000054  f7fffffe          BL       get_key
000058  2800              CMP      r0,#0                 ;201
00005a  d107              BNE      |L4.108|
00005c  4929              LDR      r1,|L4.260|
00005e  7008              STRB     r0,[r1,#0]            ;203
000060  21af              MOVS     r1,#0xaf              ;204
000062  4620              MOV      r0,r4                 ;204
000064  304e              ADDS     r0,r0,#0x4e           ;204
000066  f7fffffe          BL       key_up
00006a  e7eb              B        |L4.68|
                  |L4.108|
00006c  208e              MOVS     r0,#0x8e              ;208
00006e  5d00              LDRB     r0,[r0,r4]            ;208
000070  2800              CMP      r0,#0                 ;208
000072  d044              BEQ      |L4.254|
000074  4620              MOV      r0,r4                 ;210
000076  3090              ADDS     r0,r0,#0x90           ;210
000078  f7fffffe          BL       __aeabi_uread4
00007c  4605              MOV      r5,r0                 ;210
00007e  2094              MOVS     r0,#0x94              ;210
000080  5d02              LDRB     r2,[r0,r4]            ;210
000082  4629              MOV      r1,r5                 ;210
000084  4620              MOV      r0,r4                 ;210
000086  f7fffffe          BL       remap_fun
00008a  213c              MOVS     r1,#0x3c              ;212
00008c  4620              MOV      r0,r4                 ;212
00008e  304e              ADDS     r0,r0,#0x4e           ;212
000090  f7fffffe          BL       get_key
000094  2800              CMP      r0,#0                 ;212
000096  d00e              BEQ      |L4.182|
000098  213c              MOVS     r1,#0x3c              ;214
00009a  4620              MOV      r0,r4                 ;214
00009c  304e              ADDS     r0,r0,#0x4e           ;214
00009e  f7fffffe          BL       key_up
0000a2  21e3              MOVS     r1,#0xe3              ;215
0000a4  4620              MOV      r0,r4                 ;215
0000a6  304e              ADDS     r0,r0,#0x4e           ;215
0000a8  f7fffffe          BL       key_down
0000ac  212b              MOVS     r1,#0x2b              ;216
0000ae  4620              MOV      r0,r4                 ;216
0000b0  304e              ADDS     r0,r0,#0x4e           ;216
0000b2  f7fffffe          BL       key_down
                  |L4.182|
0000b6  213f              MOVS     r1,#0x3f              ;220
0000b8  4620              MOV      r0,r4                 ;220
0000ba  304e              ADDS     r0,r0,#0x4e           ;220
0000bc  f7fffffe          BL       get_key
0000c0  2800              CMP      r0,#0                 ;220
0000c2  d007              BEQ      |L4.212|
0000c4  4811              LDR      r0,|L4.268|
0000c6  7800              LDRB     r0,[r0,#0]            ;220  ; b_flag
0000c8  2800              CMP      r0,#0                 ;220
0000ca  d103              BNE      |L4.212|
0000cc  2001              MOVS     r0,#1                 ;222
0000ce  490f              LDR      r1,|L4.268|
0000d0  7008              STRB     r0,[r1,#0]            ;222
0000d2  e00f              B        |L4.244|
                  |L4.212|
0000d4  213f              MOVS     r1,#0x3f              ;224
0000d6  4620              MOV      r0,r4                 ;224
0000d8  304e              ADDS     r0,r0,#0x4e           ;224
0000da  f7fffffe          BL       get_key
0000de  2800              CMP      r0,#0                 ;224
0000e0  d108              BNE      |L4.244|
0000e2  480a              LDR      r0,|L4.268|
0000e4  7800              LDRB     r0,[r0,#0]            ;224  ; b_flag
0000e6  2801              CMP      r0,#1                 ;224
0000e8  d104              BNE      |L4.244|
0000ea  2000              MOVS     r0,#0                 ;226
0000ec  4907              LDR      r1,|L4.268|
0000ee  7008              STRB     r0,[r1,#0]            ;226
0000f0  f7fffffe          BL       set_bright_light
                  |L4.244|
0000f4  213f              MOVS     r1,#0x3f              ;230
0000f6  4620              MOV      r0,r4                 ;230
0000f8  304e              ADDS     r0,r0,#0x4e           ;230
0000fa  f7fffffe          BL       key_up
                  |L4.254|
0000fe  bf00              NOP      
000100  e7a0              B        |L4.68|
;;;234    
                          ENDP

000102  0000              DCW      0x0000
                  |L4.260|
                          DCD      lock_flag
                  |L4.264|
                          DCD      0x48000800
                  |L4.268|
                          DCD      b_flag

                          AREA ||i.init_device_rcc||, CODE, READONLY, ALIGN=1

                  init_device_rcc PROC
;;;458    
;;;459    void init_device_rcc(void)
000000  b510              PUSH     {r4,lr}
;;;460    {
;;;461    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
000002  2101              MOVS     r1,#1
000004  0448              LSLS     r0,r1,#17
000006  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;462    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0488              LSLS     r0,r1,#18
00000e  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;463    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
000012  2101              MOVS     r1,#1
000014  04c8              LSLS     r0,r1,#19
000016  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;464    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
00001a  2101              MOVS     r1,#1
00001c  0588              LSLS     r0,r1,#22
00001e  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;465    }
000022  bd10              POP      {r4,pc}
;;;466    
                          ENDP


                          AREA ||i.init_light_pin||, CODE, READONLY, ALIGN=2

                  init_light_pin PROC
;;;445    
;;;446    void init_light_pin(void)
000000  b510              PUSH     {r4,lr}
;;;447    {
;;;448    	set_IO_PinMode(CAPS_PORT, CAPS_PIN, GPIO_ModeOut_PD_noINT);
000002  2206              MOVS     r2,#6
000004  2101              MOVS     r1,#1
000006  0249              LSLS     r1,r1,#9
000008  2009              MOVS     r0,#9
00000a  06c0              LSLS     r0,r0,#27
00000c  f7fffffe          BL       set_IO_PinMode
;;;449    	set_IO_PinMode(FN_PORT, FN_PIN, GPIO_ModeOut_PD_noINT);
000010  2206              MOVS     r2,#6
000012  2101              MOVS     r1,#1
000014  0349              LSLS     r1,r1,#13
000016  480e              LDR      r0,|L6.80|
000018  f7fffffe          BL       set_IO_PinMode
;;;450    	set_IO_PinMode(POWER_PORT, POWER_PIN, GPIO_ModeOut_PD_noINT);
00001c  2206              MOVS     r2,#6
00001e  2101              MOVS     r1,#1
000020  0289              LSLS     r1,r1,#10
000022  2009              MOVS     r0,#9
000024  06c0              LSLS     r0,r0,#27
000026  f7fffffe          BL       set_IO_PinMode
;;;451    	GPIO_WriteBit(CAPS_PORT, CAPS_PIN, Bit_SET);
00002a  2201              MOVS     r2,#1
00002c  0251              LSLS     r1,r2,#9
00002e  2009              MOVS     r0,#9
000030  06c0              LSLS     r0,r0,#27
000032  f7fffffe          BL       GPIO_WriteBit
;;;452    	GPIO_WriteBit(FN_PORT, FN_PIN, Bit_SET);
000036  2201              MOVS     r2,#1
000038  0351              LSLS     r1,r2,#13
00003a  4805              LDR      r0,|L6.80|
00003c  f7fffffe          BL       GPIO_WriteBit
;;;453    	GPIO_WriteBit(POWER_PORT, POWER_PIN, Bit_RESET);
000040  2200              MOVS     r2,#0
000042  2101              MOVS     r1,#1
000044  0289              LSLS     r1,r1,#10
000046  2009              MOVS     r0,#9
000048  06c0              LSLS     r0,r0,#27
00004a  f7fffffe          BL       GPIO_WriteBit
;;;454    }
00004e  bd10              POP      {r4,pc}
;;;455    
                          ENDP

                  |L6.80|
                          DCD      0x48000800

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;479    */
;;;480    int main(void)
000000  f7fffffe          BL       init_device_rcc
;;;481    {
;;;482    
;;;483    	init_device_rcc();
;;;484    	
;;;485    	Systick_Init();
000004  f7fffffe          BL       Systick_Init
;;;486    	USB_Init();
000008  f7fffffe          BL       USB_Init
;;;487    
;;;488    	init_light_pin();
00000c  f7fffffe          BL       init_light_pin
;;;489    	
;;;490    	//pwm_timer_Init();
;;;491    	TIM_Config();
000010  f7fffffe          BL       TIM_Config
;;;492    	
;;;493    	SEGGER_RTT_printf(0, "start\n");
000014  a10d              ADR      r1,|L7.76|
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       SEGGER_RTT_printf
;;;494     
;;;495    	while (1)
00001c  e014              B        |L7.72|
                  |L7.30|
;;;496    	{
;;;497    
;;;498    
;;;499    		matrix_scan_key(&matrix);
00001e  480d              LDR      r0,|L7.84|
000020  f7fffffe          BL       matrix_scan_key
;;;500    		matrix_scan_again(&matrix);
000024  480b              LDR      r0,|L7.84|
000026  f7fffffe          BL       matrix_scan_again
;;;501    		matrix_key_handle(&matrix);
00002a  480a              LDR      r0,|L7.84|
00002c  f7fffffe          BL       matrix_key_handle
;;;502    
;;;503    		/*处理热键*/
;;;504    		hotKey(&matrix);
000030  4808              LDR      r0,|L7.84|
000032  f7fffffe          BL       hotKey
;;;505    		
;;;506    		/*KeyCode处理格式*/
;;;507    		build_keycode(&matrix);
000036  4807              LDR      r0,|L7.84|
000038  f7fffffe          BL       build_keycode
;;;508    		
;;;509    		/*发送按键码*/
;;;510    		send_keycode(&matrix);
00003c  4805              LDR      r0,|L7.84|
00003e  f7fffffe          BL       send_keycode
;;;511    		
;;;512    		/*发送多媒体键*/
;;;513    		send_acpi_media_keycode(&matrix);
000042  4804              LDR      r0,|L7.84|
000044  f7fffffe          BL       send_acpi_media_keycode
                  |L7.72|
000048  e7e9              B        |L7.30|
;;;514    		
;;;515    	}
;;;516    }
;;;517    
                          ENDP

00004a  0000              DCW      0x0000
                  |L7.76|
00004c  73746172          DCB      "start\n",0
000050  740a00  
000053  00                DCB      0
                  |L7.84|
                          DCD      matrix

                          AREA ||i.remap_fun||, CODE, READONLY, ALIGN=1

                  remap_fun PROC
;;;169    
;;;170    static void remap_fun(matrix_t* matrix, remap_t* remap, uint8_t num)
000000  b5f8              PUSH     {r3-r7,lr}
;;;171    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;172    	int i;
;;;173    	for(i = 0; i < num; ++i)
000008  2400              MOVS     r4,#0
00000a  e015              B        |L8.56|
                  |L8.12|
;;;174    	{
;;;175    		if(get_key(&(matrix->buf), remap[i].key))
00000c  0060              LSLS     r0,r4,#1
00000e  5c31              LDRB     r1,[r6,r0]
000010  4628              MOV      r0,r5
000012  304e              ADDS     r0,r0,#0x4e
000014  f7fffffe          BL       get_key
000018  2800              CMP      r0,#0
00001a  d00c              BEQ      |L8.54|
;;;176    		{
;;;177    			key_up(&(matrix->buf), remap[i].key);
00001c  0060              LSLS     r0,r4,#1
00001e  5c31              LDRB     r1,[r6,r0]
000020  4628              MOV      r0,r5
000022  304e              ADDS     r0,r0,#0x4e
000024  f7fffffe          BL       key_up
;;;178    			key_down(&(matrix->buf), remap[i].remap);
000028  0060              LSLS     r0,r4,#1
00002a  1980              ADDS     r0,r0,r6
00002c  7841              LDRB     r1,[r0,#1]
00002e  4628              MOV      r0,r5
000030  304e              ADDS     r0,r0,#0x4e
000032  f7fffffe          BL       key_down
                  |L8.54|
000036  1c64              ADDS     r4,r4,#1              ;173
                  |L8.56|
000038  42bc              CMP      r4,r7                 ;173
00003a  dbe7              BLT      |L8.12|
;;;179    		}
;;;180    	}
;;;181    }
00003c  bdf8              POP      {r3-r7,pc}
;;;182    
                          ENDP


                          AREA ||i.send_acpi_media_keycode||, CODE, READONLY, ALIGN=2

                  send_acpi_media_keycode PROC
;;;418    
;;;419    void send_acpi_media_keycode(matrix_t* matrix)
000000  b538              PUSH     {r3-r5,lr}
;;;420    {
000002  4604              MOV      r4,r0
;;;421    	uint8_t media_buffer[3] = {0x03, 0x00, 0x00};
000004  a010              ADR      r0,|L9.72|
000006  6800              LDR      r0,[r0,#0]
000008  9000              STR      r0,[sp,#0]
;;;422    		
;;;423    	//发送多媒体键，ACPI键
;;;424    	if(matrix->acpi_send_flag == 0x01)
00000a  20a4              MOVS     r0,#0xa4
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2801              CMP      r0,#1
000010  d10d              BNE      |L9.46|
;;;425    	{
;;;426    		//发送多媒体键
;;;427    		build_media_key(matrix, media_buffer, sizeof(media_buffer));		
000012  2203              MOVS     r2,#3
000014  4669              MOV      r1,sp
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       build_media_key
;;;428    		USB_EP_Tx(ep_consumer, media_buffer, sizeof(media_buffer));
00001c  2203              MOVS     r2,#3
00001e  4669              MOV      r1,sp
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       USB_EP_Tx
;;;429    		matrix->acpi_send_flag = 0x02;
000026  2102              MOVS     r1,#2
000028  20a4              MOVS     r0,#0xa4
00002a  5501              STRB     r1,[r0,r4]
00002c  e00b              B        |L9.70|
                  |L9.46|
;;;430    		
;;;431    	}
;;;432    	else if(matrix->acpi_send_flag == 0x03)
00002e  20a4              MOVS     r0,#0xa4
000030  5d00              LDRB     r0,[r0,r4]
000032  2803              CMP      r0,#3
000034  d107              BNE      |L9.70|
;;;433    	{
;;;434    		//发送抬起包
;;;435    		USB_EP_Tx(ep_consumer, media_buffer, sizeof(media_buffer));
000036  2203              MOVS     r2,#3
000038  4669              MOV      r1,sp
00003a  2002              MOVS     r0,#2
00003c  f7fffffe          BL       USB_EP_Tx
;;;436    		matrix->acpi_send_flag = 0x00;
000040  2100              MOVS     r1,#0
000042  20a4              MOVS     r0,#0xa4
000044  5501              STRB     r1,[r0,r4]
                  |L9.70|
;;;437    	}
;;;438    	
;;;439    }
000046  bd38              POP      {r3-r5,pc}
;;;440    
                          ENDP

                  |L9.72|
000048  0300              DCB      3,0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.send_keycode||, CODE, READONLY, ALIGN=1

                  send_keycode PROC
;;;310    
;;;311    void send_keycode(matrix_t* matrix)
000000  b57c              PUSH     {r2-r6,lr}
;;;312    {
000002  4604              MOV      r4,r0
;;;313    	uint8_t flag = 0;
000004  2500              MOVS     r5,#0
;;;314    	
;;;315    	for(uint8_t i = 0; i < 8; ++i)
000006  2000              MOVS     r0,#0
000008  e00a              B        |L10.32|
                  |L10.10|
;;;316    	{
;;;317    		if(matrix->send_last[i] == matrix->send[i])
00000a  4621              MOV      r1,r4
00000c  31a5              ADDS     r1,r1,#0xa5
00000e  5c0a              LDRB     r2,[r1,r0]
000010  390b              SUBS     r1,r1,#0xb
000012  5c09              LDRB     r1,[r1,r0]
000014  428a              CMP      r2,r1
000016  d101              BNE      |L10.28|
;;;318    		{
;;;319    			flag++;
000018  1c69              ADDS     r1,r5,#1
00001a  b2cd              UXTB     r5,r1
                  |L10.28|
00001c  1c41              ADDS     r1,r0,#1              ;315
00001e  b2c8              UXTB     r0,r1                 ;315
                  |L10.32|
000020  2808              CMP      r0,#8                 ;315
000022  dbf2              BLT      |L10.10|
;;;320    		}
;;;321    	}
;;;322    	
;;;323    	if(flag < 8)
000024  2d08              CMP      r5,#8
000026  da15              BGE      |L10.84|
;;;324    	{
;;;325    
;;;326    		uint8_t key_send_buff[8] = {0x00};
000028  2000              MOVS     r0,#0
00002a  9000              STR      r0,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
;;;327    		memcpy(key_send_buff, matrix->send, sizeof(matrix->send));
00002e  2208              MOVS     r2,#8
000030  4621              MOV      r1,r4
000032  319a              ADDS     r1,r1,#0x9a
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       __aeabi_memcpy
;;;328    				
;;;329    		//发送
;;;330    		USB_EP_Tx(ep_boot_keyboard, key_send_buff, sizeof(key_send_buff));
00003a  2208              MOVS     r2,#8
00003c  4669              MOV      r1,sp
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       USB_EP_Tx
;;;331    
;;;332    		//更新
;;;333    		memcpy(matrix->send_last, matrix->send, sizeof(matrix->send_last));
000044  2208              MOVS     r2,#8
000046  4621              MOV      r1,r4
000048  319a              ADDS     r1,r1,#0x9a
00004a  4620              MOV      r0,r4
00004c  30a5              ADDS     r0,r0,#0xa5
00004e  f7fffffe          BL       __aeabi_memcpy
;;;334    	}
000052  bf00              NOP      
                  |L10.84|
;;;335    	
;;;336    	memset(matrix->send, 0x00, sizeof(matrix->send));
000054  2108              MOVS     r1,#8
000056  4620              MOV      r0,r4
000058  309a              ADDS     r0,r0,#0x9a
00005a  f7fffffe          BL       __aeabi_memclr
;;;337    }
00005e  bd7c              POP      {r2-r6,pc}
;;;338    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  buff
                          %        128

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  rMap
                          DCDU     0x48000000
                          DCDU     0x00000001
000008  0000              DCB      0x00,0x00
                          DCDU     0x48000000
                          DCDU     0x00000002
000012  0001              DCB      0x00,0x01
                          DCDU     0x48000000
                          DCDU     0x00000004
00001c  0002              DCB      0x00,0x02
                          DCDU     0x48000000
                          DCDU     0x00000008
000026  0003              DCB      0x00,0x03
                          DCDU     0x48000000
                          DCDU     0x00000010
000030  0004              DCB      0x00,0x04
                          DCDU     0x48000000
                          DCDU     0x00000020
00003a  0005              DCB      0x00,0x05
                          DCDU     0x48000000
                          DCDU     0x00000040
000044  0006              DCB      0x00,0x06
                          DCDU     0x48000000
                          DCDU     0x00000080
00004e  0007              DCB      0x00,0x07
                  cMap
                          DCDU     0x48000400
                          DCDU     0x00000001
000058  0100              DCB      0x01,0x00
                          DCDU     0x48000400
                          DCDU     0x00000002
000062  0101              DCB      0x01,0x01
                          DCDU     0x48000400
                          DCDU     0x00000004
00006c  0102              DCB      0x01,0x02
                          DCDU     0x48000400
                          DCDU     0x00000400
000076  010a              DCB      0x01,0x0a
                          DCDU     0x48000400
                          DCDU     0x00000800
000080  010b              DCB      0x01,0x0b
                          DCDU     0x48000400
                          DCDU     0x00001000
00008a  010c              DCB      0x01,0x0c
                          DCDU     0x48000400
                          DCDU     0x00002000
000094  010d              DCB      0x01,0x0d
                          DCDU     0x48000400
                          DCDU     0x00004000
00009e  010e              DCB      0x01,0x0e
                          DCDU     0x48000400
                          DCDU     0x00008000
0000a8  010f              DCB      0x01,0x0f
                          DCDU     0x48000000
                          DCDU     0x00008000
0000b2  000f              DCB      0x00,0x0f
                          DCDU     0x48000400
                          DCDU     0x00000008
0000bc  0103              DCB      0x01,0x03
                          DCDU     0x48000400
                          DCDU     0x00000010
0000c6  0104              DCB      0x01,0x04
                          DCDU     0x48000400
                          DCDU     0x00000020
0000d0  0105              DCB      0x01,0x05
                          DCDU     0x48000400
                          DCDU     0x00000040
0000da  0106              DCB      0x01,0x06
                          DCDU     0x48000400
                          DCDU     0x00000080
0000e4  0107              DCB      0x01,0x07
                          DCDU     0x48000800
                          DCDU     0x00008000
0000ee  020f              DCB      0x02,0x0f
                          DCDU     0x48001400
                          DCDU     0x00000001
0000f8  0500              DCB      0x05,0x00
                          DCDU     0x48001400
                          DCDU     0x00000002
000102  0501              DCB      0x05,0x01
                  keyMatrix
000104  00000000          DCB      0x00,0x00,0x00,0x00
000108  00e30000          DCB      0x00,0xe3,0x00,0x00
00010c  e600e200          DCB      0xe6,0x00,0xe2,0x00
000110  00000000          DCB      0x00,0x00,0x00,0x00
000114  00e70000          DCB      0x00,0xe7,0x00,0x00
000118  0000af3e          DCB      0x00,0x00,0xaf,0x3e
00011c  51002c00          DCB      0x51,0x00,0x2c,0x00
000120  00004600          DCB      0x00,0x00,0x46,0x00
000124  4f000000          DCB      0x4f,0x00,0x00,0x00
000128  00000000          DCB      0x00,0x00,0x00,0x00
00012c  50005200          DCB      0x50,0x00,0x52,0x00
000130  00000000          DCB      0x00,0x00,0x00,0x00
000134  11100b0d          DCB      0x11,0x10,0x0b,0x0d
000138  181c2324          DCB      0x18,0x1c,0x23,0x24
00013c  000000e5          DCB      0x00,0x00,0x00,0xe5
000140  00e10000          DCB      0x00,0xe1,0x00,0x00
000144  001b0016          DCB      0x00,0x1b,0x00,0x16
000148  1a393a1f          DCB      0x1a,0x39,0x3a,0x1f
00014c  00000000          DCB      0x00,0x00,0x00,0x00
000150  00000000          DCB      0x00,0x00,0x00,0x00
000154  00000000          DCB      0x00,0x00,0x00,0x00
000158  00000000          DCB      0x00,0x00,0x00,0x00
00015c  45284431          DCB      0x45,0x28,0x44,0x31
000160  002a4243          DCB      0x00,0x2a,0x42,0x43
000164  0037000f          DCB      0x00,0x37,0x00,0x0f
000168  12404126          DCB      0x12,0x40,0x41,0x26
00016c  00363f0e          DCB      0x00,0x36,0x3f,0x0e
000170  0c302e25          DCB      0x0c,0x30,0x2e,0x25
000174  38e03433          DCB      0x38,0xe0,0x34,0x33
000178  132f2d27          DCB      0x13,0x2f,0x2d,0x27
00017c  001d2904          DCB      0x00,0x1d,0x29,0x04
000180  142b351e          DCB      0x14,0x2b,0x35,0x1e
000184  05190a09          DCB      0x05,0x19,0x0a,0x09
000188  15172221          DCB      0x15,0x17,0x22,0x21
00018c  98063d07          DCB      0x98,0x06,0x3d,0x07
000190  083c3b20          DCB      0x08,0x3c,0x3b,0x20

                          AREA ||.data||, DATA, ALIGN=2

                  qty
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  NOW
                          DCD      0x00000000
                  remap
000008  3abe3bbf          DCB      0x3a,0xbe,0x3b,0xbf
00000c  3dc040b1          DCB      0x3d,0xc0,0x40,0xb1
000010  41b342b0          DCB      0x41,0xb3,0x42,0xb0
000014  43b444b7          DCB      0x43,0xb4,0x44,0xb7
000018  45b646ba          DCB      0x45,0xb6,0x46,0xba
                  matrix
00001c  0812              DCB      0x08,0x12
                          DCDU     rMap
                          DCDU     cMap
                          DCDU     keyMatrix
00002a  0000              DCW      0x0000
                          %        60
000068  0000              DCB      0x00,0x00
00006a  0000              DCW      0x0000
                          %        28
000088  0000              DCB      0x00,0x00
00008a  0000              DCW      0x0000
                          %        28
0000a8  00000100          DCB      0x00,0x00,0x01,0x00
                          DCD      remap
0000b0  0a000000          DCB      0x0a,0x00,0x00,0x00
0000b4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
0000c8  00                DCB      0x00
                  b_flag
0000c9  00                DCB      0x00
                  lock_flag
0000ca  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L70.24|
                  |L70.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L70.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L70.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\user\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_qty____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___6_main_c_qty____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_qty____REVSH|
#line 144
|__asm___6_main_c_qty____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
