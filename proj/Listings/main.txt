; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I..\iap2 -IC:\Users\dell1\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -D__UVISION_VERSION=534 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\main.crf ..\user\main.c]
                          THUMB

                          AREA ||i.build_keycode||, CODE, READONLY, ALIGN=1

                  build_keycode PROC
;;;514    
;;;515    void build_keycode(matrix_t* matrix)
000000  b5f0              PUSH     {r4-r7,lr}
;;;516    {
000002  b0a1              SUB      sp,sp,#0x84
000004  4604              MOV      r4,r0
;;;517    	uint8_t t_buff[128] = {0x00};
000006  2180              MOVS     r1,#0x80
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memclr4
;;;518    	uint8_t i, q = 0x00, index = 2;
00000e  2700              MOVS     r7,#0
000010  2602              MOVS     r6,#2
;;;519    
;;;520    	handle_super_key(matrix);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       handle_super_key
;;;521    	q = get_key_down_list(&(matrix->buf), t_buff, sizeof(t_buff));
000018  2280              MOVS     r2,#0x80
00001a  a901              ADD      r1,sp,#4
00001c  4620              MOV      r0,r4
00001e  304e              ADDS     r0,r0,#0x4e
000020  f7fffffe          BL       get_key_down_list
000024  4607              MOV      r7,r0
;;;522    	
;;;523    	for(i = 0; i < q && index < 8; ++i)
000026  2500              MOVS     r5,#0
000028  e03c              B        |L1.164|
                  |L1.42|
;;;524    	{
;;;525    		switch(t_buff[i])
00002a  a801              ADD      r0,sp,#4
00002c  5d40              LDRB     r0,[r0,r5]
00002e  28b7              CMP      r0,#0xb7
000030  d01e              BEQ      |L1.112|
000032  dc08              BGT      |L1.70|
000034  38b0              SUBS     r0,r0,#0xb0
000036  0003              MOVS     r3,r0
000038  f7fffffe          BL       __ARM_common_switch8
00003c  07181628          DCB      0x07,0x18,0x16,0x28
000040  1719281b          DCB      0x17,0x19,0x28,0x1b
000044  2800              DCB      0x28,0x00
                  |L1.70|
000046  28bf              CMP      r0,#0xbf
000048  d00b              BEQ      |L1.98|
00004a  dc04              BGT      |L1.86|
00004c  28ba              CMP      r0,#0xba
00004e  d011              BEQ      |L1.116|
000050  28be              CMP      r0,#0xbe
000052  d11b              BNE      |L1.140|
000054  e004              B        |L1.96|
                  |L1.86|
000056  28c1              CMP      r0,#0xc1
000058  d004              BEQ      |L1.100|
00005a  28c7              CMP      r0,#0xc7
00005c  d116              BNE      |L1.140|
00005e  e002              B        |L1.102|
                  |L1.96|
;;;526    		{
;;;527    			case BRIGHT_DOWN:			
;;;528    			case BRIGHT_UP:			
000060  bf00              NOP      
                  |L1.98|
;;;529    			case WWW_HOME:				
000062  bf00              NOP      
                  |L1.100|
;;;530    			case SOFT_KEYBOARD:					
000064  bf00              NOP      
                  |L1.102|
;;;531    			case PRETRACK:			
000066  bf00              NOP      
;;;532    			case PLAY_PAUSE:	
000068  bf00              NOP      
;;;533    			case NEXTTRACK:	
00006a  bf00              NOP      
;;;534    			case MUTE:
00006c  bf00              NOP      
;;;535    			case VOL_DOWN:				
00006e  bf00              NOP      
                  |L1.112|
;;;536    			case VOL_UP:
000070  bf00              NOP      
;;;537    			case LOCK:
000072  bf00              NOP      
                  |L1.116|
;;;538    				if(matrix->acpi_send_flag == 0x00)
000074  20a4              MOVS     r0,#0xa4
000076  5d00              LDRB     r0,[r0,r4]
000078  2800              CMP      r0,#0
00007a  d106              BNE      |L1.138|
;;;539    				{
;;;540    					matrix->acpi_send[0] = t_buff[i];
00007c  a801              ADD      r0,sp,#4
00007e  5d41              LDRB     r1,[r0,r5]
000080  20a2              MOVS     r0,#0xa2
000082  5501              STRB     r1,[r0,r4]
;;;541    					matrix->acpi_send_flag = 0x01;
000084  2101              MOVS     r1,#1
000086  20a4              MOVS     r0,#0xa4
000088  5501              STRB     r1,[r0,r4]
                  |L1.138|
;;;542    				}
;;;543    			break;	
00008a  e008              B        |L1.158|
                  |L1.140|
;;;544    			default: matrix->send[index++] = t_buff[i];
00008c  a801              ADD      r0,sp,#4
00008e  5d41              LDRB     r1,[r0,r5]
000090  4630              MOV      r0,r6
000092  1c72              ADDS     r2,r6,#1
000094  b2d6              UXTB     r6,r2
000096  4622              MOV      r2,r4
000098  329a              ADDS     r2,r2,#0x9a
00009a  5411              STRB     r1,[r2,r0]
00009c  bf00              NOP                            ;525
                  |L1.158|
00009e  bf00              NOP                            ;543
0000a0  1c68              ADDS     r0,r5,#1              ;523
0000a2  b2c5              UXTB     r5,r0                 ;523
                  |L1.164|
0000a4  42bd              CMP      r5,r7                 ;523
0000a6  da01              BGE      |L1.172|
0000a8  2e08              CMP      r6,#8                 ;523
0000aa  dbbe              BLT      |L1.42|
                  |L1.172|
;;;545    		}	
;;;546    	
;;;547    	}
;;;548    	
;;;549    	if(matrix->acpi_send_flag == 0x02 && !get_key(&matrix->buf, matrix->acpi_send[0]))
0000ac  20a4              MOVS     r0,#0xa4
0000ae  5d00              LDRB     r0,[r0,r4]
0000b0  2802              CMP      r0,#2
0000b2  d10f              BNE      |L1.212|
0000b4  20a2              MOVS     r0,#0xa2
0000b6  5d01              LDRB     r1,[r0,r4]
0000b8  4620              MOV      r0,r4
0000ba  304e              ADDS     r0,r0,#0x4e
0000bc  f7fffffe          BL       get_key
0000c0  2800              CMP      r0,#0
0000c2  d107              BNE      |L1.212|
;;;550    	{
;;;551    		memset(matrix->acpi_send, 0x00, sizeof(matrix->acpi_send));
0000c4  4620              MOV      r0,r4
0000c6  30a2              ADDS     r0,r0,#0xa2
0000c8  2100              MOVS     r1,#0
0000ca  7001              STRB     r1,[r0,#0]
0000cc  7041              STRB     r1,[r0,#1]
;;;552    		matrix->acpi_send_flag = 0x03;
0000ce  2103              MOVS     r1,#3
0000d0  20a4              MOVS     r0,#0xa4
0000d2  5501              STRB     r1,[r0,r4]
                  |L1.212|
;;;553    	}
;;;554    	
;;;555    	key_clear(&(matrix->buf));
0000d4  4620              MOV      r0,r4
0000d6  304e              ADDS     r0,r0,#0x4e
0000d8  f7fffffe          BL       key_clear
;;;556    }
0000dc  b021              ADD      sp,sp,#0x84
0000de  bdf0              POP      {r4-r7,pc}
;;;557    
                          ENDP


                          AREA ||i.build_media_key||, CODE, READONLY, ALIGN=1

                  build_media_key PROC
;;;601    
;;;602    void build_media_key(matrix_t* matrix, uint8_t* media_buffer, uint8_t len)
000000  b510              PUSH     {r4,lr}
;;;603    {
000002  4614              MOV      r4,r2
;;;604    	media_buffer[0] = 0x03;
000004  2203              MOVS     r2,#3
000006  700a              STRB     r2,[r1,#0]
;;;605    	switch(matrix->acpi_send[0])
000008  22a2              MOVS     r2,#0xa2
00000a  5c12              LDRB     r2,[r2,r0]
00000c  2ab7              CMP      r2,#0xb7
00000e  d02f              BEQ      |L2.112|
000010  dc08              BGT      |L2.36|
000012  3ab0              SUBS     r2,r2,#0xb0
000014  0013              MOVS     r3,r2
000016  f7fffffe          BL       __ARM_common_switch8
00001a  0712              DCB      0x07,0x12
00001c  17491c21          DCB      0x17,0x49,0x1c,0x21
000020  49264900          DCB      0x49,0x26,0x49,0x00
                  |L2.36|
000024  2abf              CMP      r2,#0xbf
000026  d032              BEQ      |L2.142|
000028  dc04              BGT      |L2.52|
00002a  2aba              CMP      r2,#0xba
00002c  d025              BEQ      |L2.122|
00002e  2abe              CMP      r2,#0xbe
000030  d13c              BNE      |L2.172|
000032  e027              B        |L2.132|
                  |L2.52|
000034  2ac1              CMP      r2,#0xc1
000036  d02f              BEQ      |L2.152|
000038  2ac7              CMP      r2,#0xc7
00003a  d137              BNE      |L2.172|
00003c  e031              B        |L2.162|
;;;606    	{
;;;607    		/*下一曲*/
;;;608    		case NEXTTRACK:		
;;;609    			media_buffer[1] = 0xB5; 
00003e  22b5              MOVS     r2,#0xb5
000040  704a              STRB     r2,[r1,#1]
;;;610    			media_buffer[2] = 0x00; 
000042  2200              MOVS     r2,#0
000044  708a              STRB     r2,[r1,#2]
;;;611    		break;
000046  e031              B        |L2.172|
;;;612    			
;;;613    		/*上一曲*/
;;;614    		case PRETRACK: 		
;;;615    			media_buffer[1] = 0xB6; 
000048  22b6              MOVS     r2,#0xb6
00004a  704a              STRB     r2,[r1,#1]
;;;616    			media_buffer[2] = 0x00; 
00004c  2200              MOVS     r2,#0
00004e  708a              STRB     r2,[r1,#2]
;;;617    		break;
000050  e02c              B        |L2.172|
;;;618    			
;;;619    		/*播放-暂停*/
;;;620    		case PLAY_PAUSE:	
;;;621    			media_buffer[1] = 0xCD; 
000052  22cd              MOVS     r2,#0xcd
000054  704a              STRB     r2,[r1,#1]
;;;622    			media_buffer[2] = 0x00; 
000056  2200              MOVS     r2,#0
000058  708a              STRB     r2,[r1,#2]
;;;623    		break;
00005a  e027              B        |L2.172|
;;;624    		
;;;625    		/*静音*/
;;;626    		case MUTE: 			
;;;627    			media_buffer[1] = 0xE2; 
00005c  22e2              MOVS     r2,#0xe2
00005e  704a              STRB     r2,[r1,#1]
;;;628    			media_buffer[2] = 0x00; 
000060  2200              MOVS     r2,#0
000062  708a              STRB     r2,[r1,#2]
;;;629    		break;
000064  e022              B        |L2.172|
;;;630    			
;;;631    		/*音量+*/
;;;632    		case VOL_UP:		
;;;633    			media_buffer[1] = 0xE9; 
000066  22e9              MOVS     r2,#0xe9
000068  704a              STRB     r2,[r1,#1]
;;;634    			media_buffer[2] = 0x00; 
00006a  2200              MOVS     r2,#0
00006c  708a              STRB     r2,[r1,#2]
;;;635    		break;
00006e  e01d              B        |L2.172|
                  |L2.112|
;;;636    			
;;;637    		/*音量-*/
;;;638    		case VOL_DOWN:		
;;;639    			media_buffer[1] = 0xEA; 
000070  22ea              MOVS     r2,#0xea
000072  704a              STRB     r2,[r1,#1]
;;;640    			media_buffer[2] = 0x00; 
000074  2200              MOVS     r2,#0
000076  708a              STRB     r2,[r1,#2]
;;;641    		break; 
000078  e018              B        |L2.172|
                  |L2.122|
;;;642    			
;;;643    		/*锁屏*/
;;;644    		case LOCK:			
;;;645    			media_buffer[1] = 0x30; 
00007a  2230              MOVS     r2,#0x30
00007c  704a              STRB     r2,[r1,#1]
;;;646    			media_buffer[2] = 0x00; 
00007e  2200              MOVS     r2,#0
000080  708a              STRB     r2,[r1,#2]
;;;647    		break;
000082  e013              B        |L2.172|
                  |L2.132|
;;;648    			
;;;649    		/*背光-*/
;;;650    		case BRIGHT_DOWN:	
;;;651    			media_buffer[1] = 0x70; 
000084  2270              MOVS     r2,#0x70
000086  704a              STRB     r2,[r1,#1]
;;;652    			media_buffer[2] = 0x00;
000088  2200              MOVS     r2,#0
00008a  708a              STRB     r2,[r1,#2]
;;;653    		break;
00008c  e00e              B        |L2.172|
                  |L2.142|
;;;654    			
;;;655    		/*背光+*/
;;;656    		case BRIGHT_UP:		
;;;657    			media_buffer[1] = 0x6F; 
00008e  226f              MOVS     r2,#0x6f
000090  704a              STRB     r2,[r1,#1]
;;;658    			media_buffer[2] = 0x00; 
000092  2200              MOVS     r2,#0
000094  708a              STRB     r2,[r1,#2]
;;;659    		break;        
000096  e009              B        |L2.172|
                  |L2.152|
;;;660    		
;;;661    		/*主页*/
;;;662    		case WWW_HOME:		
;;;663    			media_buffer[1] = 0x23; 
000098  2223              MOVS     r2,#0x23
00009a  704a              STRB     r2,[r1,#1]
;;;664    			media_buffer[2] = 0x02; 
00009c  2202              MOVS     r2,#2
00009e  708a              STRB     r2,[r1,#2]
;;;665    		break;
0000a0  e004              B        |L2.172|
                  |L2.162|
;;;666    			
;;;667    		/*软键盘*/
;;;668    		case SOFT_KEYBOARD:		
;;;669    			media_buffer[1] = 0xAE; 
0000a2  22ae              MOVS     r2,#0xae
0000a4  704a              STRB     r2,[r1,#1]
;;;670    			media_buffer[2] = 0x01; 
0000a6  2201              MOVS     r2,#1
0000a8  708a              STRB     r2,[r1,#2]
;;;671    		break;
0000aa  bf00              NOP      
                  |L2.172|
0000ac  bf00              NOP                            ;611
;;;672    	}
;;;673    }
0000ae  bd10              POP      {r4,pc}
;;;674    
                          ENDP


                          AREA ||i.handle_super_key||, CODE, READONLY, ALIGN=1

                  handle_super_key PROC
;;;493    
;;;494    static void handle_super_key(matrix_t* matrix)
000000  b570              PUSH     {r4-r6,lr}
;;;495    {
000002  4604              MOV      r4,r0
;;;496    	uint8_t i;
;;;497    	
;;;498    	for(i = 0; i < 8; ++i)
000004  2500              MOVS     r5,#0
000006  e019              B        |L3.60|
                  |L3.8|
;;;499    	{
;;;500    		if(get_key(&(matrix->buf), 0xE0 + i))
000008  4628              MOV      r0,r5
00000a  30e0              ADDS     r0,r0,#0xe0
00000c  b2c1              UXTB     r1,r0
00000e  4620              MOV      r0,r4
000010  304e              ADDS     r0,r0,#0x4e
000012  f7fffffe          BL       get_key
000016  2800              CMP      r0,#0
000018  d00e              BEQ      |L3.56|
;;;501    		{
;;;502    			key_up(&(matrix->buf), 0xE0 + i);
00001a  4628              MOV      r0,r5
00001c  30e0              ADDS     r0,r0,#0xe0
00001e  b2c1              UXTB     r1,r0
000020  4620              MOV      r0,r4
000022  304e              ADDS     r0,r0,#0x4e
000024  f7fffffe          BL       key_up
;;;503    			matrix->send[0] |= 1 << i;
000028  209a              MOVS     r0,#0x9a
00002a  5d00              LDRB     r0,[r0,r4]
00002c  2101              MOVS     r1,#1
00002e  40a9              LSLS     r1,r1,r5
000030  4308              ORRS     r0,r0,r1
000032  b2c1              UXTB     r1,r0
000034  209a              MOVS     r0,#0x9a
000036  5501              STRB     r1,[r0,r4]
                  |L3.56|
000038  1c68              ADDS     r0,r5,#1              ;498
00003a  b2c5              UXTB     r5,r0                 ;498
                  |L3.60|
00003c  2d08              CMP      r5,#8                 ;498
00003e  dbe3              BLT      |L3.8|
;;;504    		}
;;;505    	}
;;;506    }
000040  bd70              POP      {r4-r6,pc}
;;;507    
                          ENDP


                          AREA ||i.hotKey||, CODE, READONLY, ALIGN=2

                  hotKey PROC
;;;443    
;;;444    void hotKey(matrix_t* matrix)
000000  b570              PUSH     {r4-r6,lr}
;;;445    {
000002  4604              MOV      r4,r0
;;;446    	static uint8_t lock_flag = 0x00;
;;;447    		
;;;448    	if(get_key(&(matrix->buf), KEY_FN))
000004  21af              MOVS     r1,#0xaf
000006  4620              MOV      r0,r4
000008  304e              ADDS     r0,r0,#0x4e
00000a  f7fffffe          BL       get_key
00000e  2800              CMP      r0,#0
000010  d04e              BEQ      |L4.176|
;;;449    	{
;;;450    		/*抬起FN键*/
;;;451    		key_up(&(matrix->buf), KEY_FN);
000012  21af              MOVS     r1,#0xaf
000014  4620              MOV      r0,r4
000016  304e              ADDS     r0,r0,#0x4e
000018  f7fffffe          BL       key_up
;;;452    		
;;;453    		/*FN+ESC Fn锁切换判断*/
;;;454    		if(get_key(&(matrix->buf), KEY_ESC) && !lock_flag)
00001c  2129              MOVS     r1,#0x29
00001e  4620              MOV      r0,r4
000020  304e              ADDS     r0,r0,#0x4e
000022  f7fffffe          BL       get_key
000026  2800              CMP      r0,#0
000028  d014              BEQ      |L4.84|
00002a  4829              LDR      r0,|L4.208|
00002c  7800              LDRB     r0,[r0,#0]  ; lock_flag
00002e  2800              CMP      r0,#0
000030  d110              BNE      |L4.84|
;;;455    		{
;;;456    			lock_flag = 0x01;
000032  2001              MOVS     r0,#1
000034  4926              LDR      r1,|L4.208|
000036  7008              STRB     r0,[r1,#0]
;;;457    			matrix->fn_led_status ^= 1;
000038  208e              MOVS     r0,#0x8e
00003a  5d00              LDRB     r0,[r0,r4]
00003c  2101              MOVS     r1,#1
00003e  4048              EORS     r0,r0,r1
000040  218e              MOVS     r1,#0x8e
000042  5508              STRB     r0,[r1,r4]
;;;458    			/*操作FN指示灯*/
;;;459    			GPIO_WriteBit(FN_PORT, GPIO_Pin_13, (BitAction)(matrix->fn_led_status));
000044  208e              MOVS     r0,#0x8e
000046  5d02              LDRB     r2,[r0,r4]
000048  2101              MOVS     r1,#1
00004a  0349              LSLS     r1,r1,#13
00004c  4821              LDR      r0,|L4.212|
00004e  f7fffffe          BL       GPIO_WriteBit
000052  e00d              B        |L4.112|
                  |L4.84|
;;;460    			
;;;461    		}else if(get_key(&(matrix->buf), KEY_ESC) == 0x00 && lock_flag)
000054  2129              MOVS     r1,#0x29
000056  4620              MOV      r0,r4
000058  304e              ADDS     r0,r0,#0x4e
00005a  f7fffffe          BL       get_key
00005e  2800              CMP      r0,#0
000060  d106              BNE      |L4.112|
000062  481b              LDR      r0,|L4.208|
000064  7800              LDRB     r0,[r0,#0]  ; lock_flag
000066  2800              CMP      r0,#0
000068  d002              BEQ      |L4.112|
;;;462    		{
;;;463    			lock_flag = 0x00;
00006a  2000              MOVS     r0,#0
00006c  4918              LDR      r1,|L4.208|
00006e  7008              STRB     r0,[r1,#0]
                  |L4.112|
;;;464    		}
;;;465    		
;;;466    		key_up(&(matrix->buf), KEY_ESC);
000070  2129              MOVS     r1,#0x29
000072  4620              MOV      r0,r4
000074  304e              ADDS     r0,r0,#0x4e
000076  f7fffffe          BL       key_up
;;;467    		
;;;468    		
;;;469    		/*FN组合亮灯, 输出图标功能*/
;;;470    		if(matrix->fn_led_status)
00007a  208e              MOVS     r0,#0x8e
00007c  5d00              LDRB     r0,[r0,r4]
00007e  2800              CMP      r0,#0
000080  d00a              BEQ      |L4.152|
;;;471    		{		
;;;472    			remap_fun(matrix, matrix->remap, matrix->remap_num);
000082  4620              MOV      r0,r4
000084  3090              ADDS     r0,r0,#0x90
000086  f7fffffe          BL       __aeabi_uread4
00008a  4605              MOV      r5,r0
00008c  2094              MOVS     r0,#0x94
00008e  5d02              LDRB     r2,[r0,r4]
000090  4629              MOV      r1,r5
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       remap_fun
                  |L4.152|
;;;473    		}
;;;474    		
;;;475    		/*映射上下左右*/
;;;476    		remap_fun(matrix, matrix->remap2, matrix->remap2_num);
000098  4620              MOV      r0,r4
00009a  3095              ADDS     r0,r0,#0x95
00009c  f7fffffe          BL       __aeabi_uread4
0000a0  4605              MOV      r5,r0
0000a2  2099              MOVS     r0,#0x99
0000a4  5d02              LDRB     r2,[r0,r4]
0000a6  4629              MOV      r1,r5
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       remap_fun
0000ae  e00e              B        |L4.206|
                  |L4.176|
;;;477    	}
;;;478    	else
;;;479    	{
;;;480    		/*没按下FN键*/
;;;481    		if(!(matrix->fn_led_status))
0000b0  208e              MOVS     r0,#0x8e
0000b2  5d00              LDRB     r0,[r0,r4]
0000b4  2800              CMP      r0,#0
0000b6  d10a              BNE      |L4.206|
;;;482    		{
;;;483    			/*单按灭灯,输入图标功能*/
;;;484    			remap_fun(matrix, matrix->remap, matrix->remap_num);
0000b8  4620              MOV      r0,r4
0000ba  3090              ADDS     r0,r0,#0x90
0000bc  f7fffffe          BL       __aeabi_uread4
0000c0  4605              MOV      r5,r0
0000c2  2094              MOVS     r0,#0x94
0000c4  5d02              LDRB     r2,[r0,r4]
0000c6  4629              MOV      r1,r5
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       remap_fun
                  |L4.206|
;;;485    		}
;;;486    	}
;;;487    }
0000ce  bd70              POP      {r4-r6,pc}
;;;488    
                          ENDP

                  |L4.208|
                          DCD      lock_flag
                  |L4.212|
                          DCD      0x48000800

                          AREA ||i.iAP2PacketParseBuffer||, CODE, READONLY, ALIGN=2

                  iAP2PacketParseBuffer PROC
;;;207    
;;;208    int iAP2PacketParseBuffer ( uint8_t*  buffer,
000000  b5fe              PUSH     {r1-r7,lr}
;;;209                                    uint32_t        bufferLen
;;;210                                   )
;;;211    
;;;212    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;213    	  uint8_t* pbuffer = buffer;
000006  4634              MOV      r4,r6
;;;214    	  int pbuffer_len =0;
000008  2000              MOVS     r0,#0
00000a  9002              STR      r0,[sp,#8]
;;;215    	  
;;;216    	  SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
00000c  23d8              MOVS     r3,#0xd8
00000e  4ab1              LDR      r2,|L5.724|
000010  a1b1              ADR      r1,|L5.728|
000012  f7fffffe          BL       SEGGER_RTT_printf
;;;217    	  if(pbuffer ==NULL)
000016  2c00              CMP      r4,#0
000018  d107              BNE      |L5.42|
;;;218    	  	{
;;;219    	  	
;;;220    		SEGGER_RTT_printf(0,"### function=%s line=%d pbuffer ==NULL\n",__FUNCTION__,__LINE__);
00001a  23dc              MOVS     r3,#0xdc
00001c  4aad              LDR      r2,|L5.724|
00001e  a1b5              ADR      r1,|L5.756|
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       SEGGER_RTT_printf
;;;221    		return -1;
000026  1e60              SUBS     r0,r4,#1
                  |L5.40|
;;;222    	  	}
;;;223    	  
;;;224    	 SEGGER_RTT_printf(0,"### function=%s line=%d pbuffer_len=%d,bufferLen%d\n",__FUNCTION__,__LINE__,pbuffer_len,bufferLen);
;;;225    	 for(int i=0;i< bufferLen;i++)
;;;226    	 	 SEGGER_RTT_printf(0,"0x%02x ",buffer[i]);
;;;227    
;;;228    	  	 SEGGER_RTT_printf(0,"\n iAP2PacketParseBuffer\n");
;;;229    		while(pbuffer_len < bufferLen)
;;;230    		{
;;;231    		
;;;232    		SEGGER_RTT_printf(0,"### function=%s line=%d pbuffer_len=%d,bufferLen=%d\n",__FUNCTION__,__LINE__,pbuffer_len,bufferLen);
;;;233    		SEGGER_RTT_printf(0,"### function=%s line=%d g_ParseState_t=%d\n",__FUNCTION__,__LINE__,g_ParseState_t);
;;;234    	   switch(g_ParseState_t)
;;;235    		{ 
;;;236    		  case kiAP2PacketParseStateSOP1:
;;;237    				memset(g_usbdata_head,0,9);
;;;238    				buffer_offset = 0;
;;;239    				g_packetLen = 0;
;;;240    			if(*pbuffer==kIAP2PacketSYNC )
;;;241    				{
;;;242    					g_ParseState_t	= kiAP2PacketParseStateSOP2;
;;;243    					g_usbdata_head[kIAP2PacketIndexSYNC]=(uint8)kIAP2PacketSYNC;
;;;244    				}
;;;245    						
;;;246    				
;;;247    				pbuffer++;
;;;248    				break;
;;;249    				
;;;250    		   case kiAP2PacketParseStateSOP2:
;;;251    				 if(*pbuffer==kIAP2PacketSOP)
;;;252    				 {
;;;253    								g_ParseState_t	= kiAP2PacketParseStateLEN1;
;;;254    					 g_usbdata_head[kIAP2PacketIndexSOP]=(uint8)kIAP2PacketSOP;
;;;255    					
;;;256    					 pbuffer++;
;;;257    				 }
;;;258    			else if(*pbuffer==kIAP2PacketSOPOrig )
;;;259    				{
;;;260    						g_ParseState_t	= kiAP2PacketParseStateLEN1;
;;;261    					
;;;262    					g_usbdata_head[kIAP2PacketIndexSOP]=(uint8)kIAP2PacketSOPOrig;
;;;263    					pbuffer++;
;;;264    				}		
;;;265    				else if(*pbuffer==kIAP2PacketSYNC )
;;;266    				{
;;;267    					 g_ParseState_t = kiAP2PacketParseStateSOP1 ; 
;;;268    				}  
;;;269    				
;;;270    				break;
;;;271    			 
;;;272    				case  kiAP2PacketParseStateLEN1:
;;;273    					g_packetLen = (((uint16_t) *pbuffer) << 8);
;;;274    				g_ParseState_t	= kiAP2PacketParseStateLEN2;
;;;275    								g_usbdata_head[kIAP2PacketIndexLEN1]=(uint8)*pbuffer;
;;;276    	
;;;277    				   pbuffer++;
;;;278    					break;
;;;279    				case  kiAP2PacketParseStateLEN2:
;;;280    				g_packetLen += ((uint16_t) *pbuffer);
;;;281    				//g_ParseState_t  = kiAP2PacketParseStateLEN2;
;;;282    				  // pbuffer++;
;;;283    				if (((g_packetLen <= 65535) &&
;;;284    							g_packetLen >= kIAP2PacketHeaderLen) ||
;;;285    							kIAP2PacketDetectLEN == g_packetLen ||
;;;286    							kIAP2PacketDetectNACKLEN == g_packetLen)
;;;287    				{
;;;288    					  g_ParseState_t = kiAP2PacketParseStateCTRL;
;;;289    							g_usbdata_head[kIAP2PacketIndexLEN2]=(uint8)*pbuffer;
;;;290    					   pbuffer++;
;;;291    				}
;;;292    				else
;;;293    				{
;;;294    					 g_ParseState_t = kiAP2PacketParseStateSOP1;
;;;295    				}
;;;296    				
;;;297    					break;
;;;298    				
;;;299    				   case kiAP2PacketParseStateCTRL:
;;;300    						 g_usbdata_head[kIAP2PacketIndexCTRL]=(uint8)*pbuffer;
;;;301    					 pbuffer++;
;;;302    						 g_ParseState_t = kiAP2PacketParseStateSEQ;
;;;303    						 break;
;;;304    					 case kiAP2PacketParseStateSEQ:
;;;305    						 g_usbdata_head[kIAP2PacketIndexCTRL]=(uint8)*pbuffer;
;;;306    						 if(g_usbdata_head[kIAP2PacketIndexLEN1] == 0x20 && g_usbdata_head[kIAP2PacketIndexLEN1] == 0x00 &&
;;;307    									 g_usbdata_head[kIAP2PacketIndexCTRL] == 0xee && 0x10==  *pbuffer	 )
;;;308    							{
;;;309    								//huanghanjing	todo usb package
;;;310    								
;;;311    									 g_ParseState_t = kiAP2PacketParseStateSOP1 ; 
;;;312    								Driver_RxDone(g_usbdata_head,6);
;;;313    							}
;;;314    							else	
;;;315    							{							
;;;316    						 g_ParseState_t = kiAP2PacketParseStateACK;
;;;317    								 g_usbdata_head[kIAP2PacketIndexSEQ] =* pbuffer;
;;;318    							}
;;;319    							 pbuffer++;
;;;320    						 break;
;;;321    					  case kiAP2PacketParseStateACK:
;;;322    						 g_ParseState_t = kiAP2PacketParseStateSESSID;
;;;323    						 g_usbdata_head[kIAP2PacketIndexACK] =* pbuffer;
;;;324    						pbuffer++;
;;;325    						 break;
;;;326    						case kiAP2PacketParseStateSESSID:
;;;327    						{
;;;328    					   
;;;329    						g_ParseState_t = kiAP2PacketParseStateCHK;
;;;330    						 g_usbdata_head[kIAP2PacketIndexSESSID] =* pbuffer;
;;;331    						pbuffer++;
;;;332    							
;;;333    					   
;;;334    					}
;;;335    							break;
;;;336    						case kiAP2PacketParseStateCHK:
;;;337    					
;;;338    									{
;;;339    										 g_usbdata_head[kIAP2PacketIndexCHK] =* pbuffer;
;;;340    										
;;;341    												if(  (g_usbdata_head[kIAP2PacketIndexLEN1] == 0x04 &&
;;;342    											g_usbdata_head[kIAP2PacketIndexLEN1] == 0x00 &&
;;;343    				kIAP2PacketDetectNACKCTRL	== g_usbdata_head[kIAP2PacketIndexCTRL] &&
;;;344    				kIAP2PacketDetectNACKSEQ	== g_usbdata_head[kIAP2PacketIndexSEQ] &&
;;;345    				kIAP2PacketDetectNACKACK	== g_usbdata_head[kIAP2PacketIndexACK]	&&
;;;346    				kIAP2PacketDetectNACKSESSID == g_usbdata_head[kIAP2PacketIndexSESSID]))
;;;347    										{
;;;348    												//huanghanjing	todo usb package
;;;349    											  g_ParseState_t = kiAP2PacketParseStateSOP1 ; 
;;;350    													Driver_RxDone(g_usbdata_head,8);
;;;351    										} 
;;;352    										else{
;;;353    										g_ParseState_t = kiAP2PacketParseStatePAYLOAD;
;;;354    												
;;;355    											g_usbdata->data_size = g_packetLen;
;;;356    											if(g_usbdata->pdata!=NULL)
;;;357    												free(g_usbdata->pdata);
;;;358    										g_usbdata->pdata = malloc(g_usbdata->data_size);
;;;359    											memset(g_usbdata->pdata,0,g_usbdata->data_size);
;;;360    											memcpy(g_usbdata->pdata,g_usbdata_head,9);
;;;361    											buffer_offset = 9;
;;;362    										}
;;;363    								pbuffer++;
;;;364    										
;;;365    						
;;;366    					}
;;;367    						 break;
;;;368    						 
;;;369    					 case kiAP2PacketParseStatePAYLOAD:
;;;370    					{
;;;371    										g_usbdata->pdata[buffer_offset]= *pbuffer;
;;;372    										buffer_offset++;
;;;373    										pbuffer++;
;;;374    										if(buffer_offset == g_packetLen)
;;;375    										{
;;;376    											g_ParseState_t =  kiAP2PacketParseStateSOP1;
;;;377    											Driver_RxDone(g_usbdata->pdata,g_packetLen);
;;;378    											//huanghanjing	todoi
;;;379    											
;;;380    											
;;;381    										}
;;;382    									}
;;;383    					 break;
;;;384    					case kiAP2PacketParseStateFINISH:
;;;385    					case kiAP2PacketParseStateDETECT:
;;;386    					case kiAP2PacketParseStateDETECTBAD:
;;;387    						break;
;;;388    				
;;;389    					 
;;;390    		}
;;;391    		}
;;;392    	
;;;393    	  return 0;
;;;394    	}
000028  bdfe              POP      {r1-r7,pc}
                  |L5.42|
00002a  9802              LDR      r0,[sp,#8]            ;224
00002c  23e0              MOVS     r3,#0xe0              ;224
00002e  4aa9              LDR      r2,|L5.724|
000030  a1ba              ADR      r1,|L5.796|
000032  9501              STR      r5,[sp,#4]            ;224
000034  9000              STR      r0,[sp,#0]            ;224
000036  2000              MOVS     r0,#0                 ;224
000038  f7fffffe          BL       SEGGER_RTT_printf
00003c  2700              MOVS     r7,#0                 ;225
00003e  e005              B        |L5.76|
                  |L5.64|
000040  5df2              LDRB     r2,[r6,r7]            ;226
000042  a1c3              ADR      r1,|L5.848|
000044  2000              MOVS     r0,#0                 ;226
000046  f7fffffe          BL       SEGGER_RTT_printf
00004a  1c7f              ADDS     r7,r7,#1              ;225
                  |L5.76|
00004c  42af              CMP      r7,r5                 ;225
00004e  d3f7              BCC      |L5.64|
000050  a1c1              ADR      r1,|L5.856|
000052  2000              MOVS     r0,#0                 ;228
000054  f7fffffe          BL       SEGGER_RTT_printf
000058  e135              B        |L5.710|
                  |L5.90|
00005a  9802              LDR      r0,[sp,#8]            ;232
00005c  23e8              MOVS     r3,#0xe8              ;232
00005e  4a9d              LDR      r2,|L5.724|
000060  a1c4              ADR      r1,|L5.884|
000062  9501              STR      r5,[sp,#4]            ;232
000064  9000              STR      r0,[sp,#0]            ;232
000066  2000              MOVS     r0,#0                 ;232
000068  f7fffffe          BL       SEGGER_RTT_printf
00006c  48cf              LDR      r0,|L5.940|
00006e  6800              LDR      r0,[r0,#0]            ;233  ; g_ParseState_t
000070  23e9              MOVS     r3,#0xe9              ;233
000072  4a98              LDR      r2,|L5.724|
000074  a1ce              ADR      r1,|L5.944|
000076  9000              STR      r0,[sp,#0]            ;233
000078  2000              MOVS     r0,#0                 ;233
00007a  f7fffffe          BL       SEGGER_RTT_printf
00007e  48cb              LDR      r0,|L5.940|
000080  6800              LDR      r0,[r0,#0]            ;234  ; g_ParseState_t
000082  0003              MOVS     r3,r0                 ;234
000084  f7fffffe          BL       __ARM_common_switch8
000088  0e081c39          DCB      0x0e,0x08,0x1c,0x39
00008c  456b7395          DCB      0x45,0x6b,0x73,0x95
000090  9da5fd1b          DCB      0x9d,0xa5,0xfd,0x1b
000094  fbfaf91b          DCB      0xfb,0xfa,0xf9,0x1b
000098  2109              MOVS     r1,#9                 ;237
00009a  48d0              LDR      r0,|L5.988|
00009c  f7fffffe          BL       __aeabi_memclr
0000a0  2000              MOVS     r0,#0                 ;238
0000a2  49cf              LDR      r1,|L5.992|
0000a4  6008              STR      r0,[r1,#0]            ;238  ; buffer_offset
0000a6  49cf              LDR      r1,|L5.996|
0000a8  8008              STRH     r0,[r1,#0]            ;239
0000aa  7820              LDRB     r0,[r4,#0]            ;240
0000ac  28ff              CMP      r0,#0xff              ;240
0000ae  d105              BNE      |L5.188|
0000b0  2001              MOVS     r0,#1                 ;242
0000b2  49be              LDR      r1,|L5.940|
0000b4  6008              STR      r0,[r1,#0]            ;242  ; g_ParseState_t
0000b6  20ff              MOVS     r0,#0xff              ;243
0000b8  49c8              LDR      r1,|L5.988|
0000ba  7008              STRB     r0,[r1,#0]            ;243
                  |L5.188|
0000bc  1c64              ADDS     r4,r4,#1              ;247
0000be  e101              B        |L5.708|
0000c0  7820              LDRB     r0,[r4,#0]            ;251
0000c2  285a              CMP      r0,#0x5a              ;251
0000c4  d107              BNE      |L5.214|
0000c6  2002              MOVS     r0,#2                 ;253
0000c8  49b8              LDR      r1,|L5.940|
0000ca  6008              STR      r0,[r1,#0]            ;253  ; g_ParseState_t
0000cc  205a              MOVS     r0,#0x5a              ;254
0000ce  49c3              LDR      r1,|L5.988|
0000d0  7048              STRB     r0,[r1,#1]            ;254
0000d2  1c64              ADDS     r4,r4,#1              ;256
0000d4  e010              B        |L5.248|
                  |L5.214|
0000d6  7820              LDRB     r0,[r4,#0]            ;258
0000d8  2855              CMP      r0,#0x55              ;258
0000da  d107              BNE      |L5.236|
0000dc  2002              MOVS     r0,#2                 ;260
0000de  49b3              LDR      r1,|L5.940|
0000e0  6008              STR      r0,[r1,#0]            ;260  ; g_ParseState_t
0000e2  2055              MOVS     r0,#0x55              ;262
0000e4  49bd              LDR      r1,|L5.988|
0000e6  7048              STRB     r0,[r1,#1]            ;262
0000e8  1c64              ADDS     r4,r4,#1              ;263
0000ea  e005              B        |L5.248|
                  |L5.236|
0000ec  7820              LDRB     r0,[r4,#0]            ;265
0000ee  28ff              CMP      r0,#0xff              ;265
0000f0  d102              BNE      |L5.248|
0000f2  2000              MOVS     r0,#0                 ;267
0000f4  49ad              LDR      r1,|L5.940|
0000f6  6008              STR      r0,[r1,#0]            ;267  ; g_ParseState_t
                  |L5.248|
0000f8  e0e4              B        |L5.708|
0000fa  7820              LDRB     r0,[r4,#0]            ;273
0000fc  0200              LSLS     r0,r0,#8              ;273
0000fe  49b9              LDR      r1,|L5.996|
000100  8008              STRH     r0,[r1,#0]            ;273
000102  2003              MOVS     r0,#3                 ;274
000104  49a9              LDR      r1,|L5.940|
000106  6008              STR      r0,[r1,#0]            ;274  ; g_ParseState_t
000108  7820              LDRB     r0,[r4,#0]            ;275
00010a  49b4              LDR      r1,|L5.988|
00010c  7088              STRB     r0,[r1,#2]            ;275
00010e  1c64              ADDS     r4,r4,#1              ;277
000110  e0d8              B        |L5.708|
000112  7820              LDRB     r0,[r4,#0]            ;280
000114  49b3              LDR      r1,|L5.996|
000116  8809              LDRH     r1,[r1,#0]            ;280  ; g_packetLen
000118  1840              ADDS     r0,r0,r1              ;280
00011a  49b2              LDR      r1,|L5.996|
00011c  8008              STRH     r0,[r1,#0]            ;280
00011e  4608              MOV      r0,r1                 ;283
000120  8800              LDRH     r0,[r0,#0]            ;283  ; g_packetLen
000122  49b1              LDR      r1,|L5.1000|
000124  4288              CMP      r0,r1                 ;283
000126  dc03              BGT      |L5.304|
000128  48ae              LDR      r0,|L5.996|
00012a  8800              LDRH     r0,[r0,#0]            ;284  ; g_packetLen
00012c  2809              CMP      r0,#9                 ;284
00012e  da0a              BGE      |L5.326|
                  |L5.304|
000130  48ac              LDR      r0,|L5.996|
000132  8800              LDRH     r0,[r0,#0]            ;285  ; g_packetLen
000134  2101              MOVS     r1,#1                 ;285
000136  0249              LSLS     r1,r1,#9              ;285
000138  4288              CMP      r0,r1                 ;285
00013a  d004              BEQ      |L5.326|
00013c  48a9              LDR      r0,|L5.996|
00013e  8800              LDRH     r0,[r0,#0]            ;286  ; g_packetLen
000140  0049              LSLS     r1,r1,#1              ;286
000142  4288              CMP      r0,r1                 ;286
000144  d107              BNE      |L5.342|
                  |L5.326|
000146  2004              MOVS     r0,#4                 ;288
000148  4998              LDR      r1,|L5.940|
00014a  6008              STR      r0,[r1,#0]            ;288  ; g_ParseState_t
00014c  7820              LDRB     r0,[r4,#0]            ;289
00014e  49a3              LDR      r1,|L5.988|
000150  70c8              STRB     r0,[r1,#3]            ;289
000152  1c64              ADDS     r4,r4,#1              ;290
000154  e002              B        |L5.348|
                  |L5.342|
000156  2000              MOVS     r0,#0                 ;294
000158  4994              LDR      r1,|L5.940|
00015a  6008              STR      r0,[r1,#0]            ;294  ; g_ParseState_t
                  |L5.348|
00015c  e0b2              B        |L5.708|
00015e  7820              LDRB     r0,[r4,#0]            ;300
000160  499e              LDR      r1,|L5.988|
000162  7108              STRB     r0,[r1,#4]            ;300
000164  1c64              ADDS     r4,r4,#1              ;301
000166  2005              MOVS     r0,#5                 ;302
000168  4990              LDR      r1,|L5.940|
00016a  6008              STR      r0,[r1,#0]            ;302  ; g_ParseState_t
00016c  e0aa              B        |L5.708|
00016e  7820              LDRB     r0,[r4,#0]            ;305
000170  499a              LDR      r1,|L5.988|
000172  7108              STRB     r0,[r1,#4]            ;305
000174  4608              MOV      r0,r1                 ;306
000176  7880              LDRB     r0,[r0,#2]            ;306  ; g_usbdata_head
000178  2820              CMP      r0,#0x20              ;306
00017a  d112              BNE      |L5.418|
00017c  4608              MOV      r0,r1                 ;306
00017e  7880              LDRB     r0,[r0,#2]            ;306  ; g_usbdata_head
000180  2800              CMP      r0,#0                 ;306
000182  d10e              BNE      |L5.418|
000184  4608              MOV      r0,r1                 ;307
000186  7900              LDRB     r0,[r0,#4]            ;307  ; g_usbdata_head
000188  28ee              CMP      r0,#0xee              ;307
00018a  d10a              BNE      |L5.418|
00018c  7820              LDRB     r0,[r4,#0]            ;307
00018e  2810              CMP      r0,#0x10              ;307
000190  d107              BNE      |L5.418|
000192  2000              MOVS     r0,#0                 ;311
000194  4985              LDR      r1,|L5.940|
000196  6008              STR      r0,[r1,#0]            ;311  ; g_ParseState_t
000198  2106              MOVS     r1,#6                 ;312
00019a  4890              LDR      r0,|L5.988|
00019c  f7fffffe          BL       Driver_RxDone
0001a0  e005              B        |L5.430|
                  |L5.418|
0001a2  2006              MOVS     r0,#6                 ;316
0001a4  4981              LDR      r1,|L5.940|
0001a6  6008              STR      r0,[r1,#0]            ;316  ; g_ParseState_t
0001a8  7820              LDRB     r0,[r4,#0]            ;317
0001aa  498c              LDR      r1,|L5.988|
0001ac  7148              STRB     r0,[r1,#5]            ;317
                  |L5.430|
0001ae  1c64              ADDS     r4,r4,#1              ;319
0001b0  e088              B        |L5.708|
0001b2  2007              MOVS     r0,#7                 ;322
0001b4  497d              LDR      r1,|L5.940|
0001b6  6008              STR      r0,[r1,#0]            ;322  ; g_ParseState_t
0001b8  7820              LDRB     r0,[r4,#0]            ;323
0001ba  4988              LDR      r1,|L5.988|
0001bc  7188              STRB     r0,[r1,#6]            ;323
0001be  1c64              ADDS     r4,r4,#1              ;324
0001c0  e080              B        |L5.708|
0001c2  2008              MOVS     r0,#8                 ;329
0001c4  4979              LDR      r1,|L5.940|
0001c6  6008              STR      r0,[r1,#0]            ;329  ; g_ParseState_t
0001c8  7820              LDRB     r0,[r4,#0]            ;330
0001ca  4984              LDR      r1,|L5.988|
0001cc  71c8              STRB     r0,[r1,#7]            ;330
0001ce  1c64              ADDS     r4,r4,#1              ;331
0001d0  e078              B        |L5.708|
0001d2  7820              LDRB     r0,[r4,#0]            ;339
0001d4  4981              LDR      r1,|L5.988|
0001d6  7208              STRB     r0,[r1,#8]            ;339
0001d8  4608              MOV      r0,r1                 ;341
0001da  7880              LDRB     r0,[r0,#2]            ;341  ; g_usbdata_head
0001dc  2804              CMP      r0,#4                 ;341
0001de  d11b              BNE      |L5.536|
0001e0  4608              MOV      r0,r1                 ;342
0001e2  7880              LDRB     r0,[r0,#2]            ;342  ; g_usbdata_head
0001e4  2800              CMP      r0,#0                 ;342
0001e6  d117              BNE      |L5.536|
0001e8  4608              MOV      r0,r1                 ;343
0001ea  7900              LDRB     r0,[r0,#4]            ;343  ; g_usbdata_head
0001ec  2802              CMP      r0,#2                 ;343
0001ee  d113              BNE      |L5.536|
0001f0  4608              MOV      r0,r1                 ;344
0001f2  7940              LDRB     r0,[r0,#5]            ;344  ; g_usbdata_head
0001f4  2804              CMP      r0,#4                 ;344
0001f6  d10f              BNE      |L5.536|
0001f8  4608              MOV      r0,r1                 ;345
0001fa  7980              LDRB     r0,[r0,#6]            ;345  ; g_usbdata_head
0001fc  28ee              CMP      r0,#0xee              ;345
0001fe  d10b              BNE      |L5.536|
000200  4608              MOV      r0,r1                 ;346
000202  79c0              LDRB     r0,[r0,#7]            ;346  ; g_usbdata_head
000204  2808              CMP      r0,#8                 ;346
000206  d107              BNE      |L5.536|
000208  2000              MOVS     r0,#0                 ;349
00020a  4968              LDR      r1,|L5.940|
00020c  6008              STR      r0,[r1,#0]            ;349  ; g_ParseState_t
00020e  2108              MOVS     r1,#8                 ;350
000210  4872              LDR      r0,|L5.988|
000212  f7fffffe          BL       Driver_RxDone
000216  e02e              B        |L5.630|
                  |L5.536|
000218  2009              MOVS     r0,#9                 ;353
00021a  4964              LDR      r1,|L5.940|
00021c  6008              STR      r0,[r1,#0]            ;353  ; g_ParseState_t
00021e  4871              LDR      r0,|L5.996|
000220  8800              LDRH     r0,[r0,#0]            ;355  ; g_packetLen
000222  b200              SXTH     r0,r0                 ;355
000224  4971              LDR      r1,|L5.1004|
000226  6809              LDR      r1,[r1,#0]            ;355  ; g_usbdata
000228  8108              STRH     r0,[r1,#8]            ;355
00022a  4870              LDR      r0,|L5.1004|
00022c  6800              LDR      r0,[r0,#0]            ;356  ; g_usbdata
00022e  68c0              LDR      r0,[r0,#0xc]          ;356
000230  2800              CMP      r0,#0                 ;356
000232  d004              BEQ      |L5.574|
000234  496d              LDR      r1,|L5.1004|
000236  6809              LDR      r1,[r1,#0]            ;357  ; g_usbdata
000238  68c8              LDR      r0,[r1,#0xc]          ;357
00023a  f7fffffe          BL       free
                  |L5.574|
00023e  496b              LDR      r1,|L5.1004|
000240  6809              LDR      r1,[r1,#0]            ;358  ; g_usbdata
000242  2008              MOVS     r0,#8                 ;358
000244  5e08              LDRSH    r0,[r1,r0]            ;358
000246  f7fffffe          BL       malloc
00024a  4968              LDR      r1,|L5.1004|
00024c  6809              LDR      r1,[r1,#0]            ;358  ; g_usbdata
00024e  60c8              STR      r0,[r1,#0xc]          ;358
000250  4a66              LDR      r2,|L5.1004|
000252  6812              LDR      r2,[r2,#0]            ;359  ; g_usbdata
000254  2108              MOVS     r1,#8                 ;359
000256  5e51              LDRSH    r1,[r2,r1]            ;359
000258  4a64              LDR      r2,|L5.1004|
00025a  6812              LDR      r2,[r2,#0]            ;359  ; g_usbdata
00025c  68d0              LDR      r0,[r2,#0xc]          ;359
00025e  f7fffffe          BL       __aeabi_memclr
000262  4962              LDR      r1,|L5.1004|
000264  6809              LDR      r1,[r1,#0]            ;360  ; g_usbdata
000266  2209              MOVS     r2,#9                 ;360
000268  68c8              LDR      r0,[r1,#0xc]          ;360
00026a  495c              LDR      r1,|L5.988|
00026c  f7fffffe          BL       __aeabi_memcpy
000270  2009              MOVS     r0,#9                 ;361
000272  495b              LDR      r1,|L5.992|
000274  6008              STR      r0,[r1,#0]            ;361  ; buffer_offset
                  |L5.630|
000276  1c64              ADDS     r4,r4,#1              ;363
000278  e024              B        |L5.708|
00027a  e022              B        |L5.706|
00027c  e020              B        |L5.704|
00027e  e01e              B        |L5.702|
000280  e7ff              B        |L5.642|
                  |L5.642|
000282  7821              LDRB     r1,[r4,#0]            ;371
000284  4859              LDR      r0,|L5.1004|
000286  6800              LDR      r0,[r0,#0]            ;371  ; g_usbdata
000288  68c0              LDR      r0,[r0,#0xc]          ;371
00028a  4a55              LDR      r2,|L5.992|
00028c  6812              LDR      r2,[r2,#0]            ;371  ; buffer_offset
00028e  5481              STRB     r1,[r0,r2]            ;371
000290  4853              LDR      r0,|L5.992|
000292  6800              LDR      r0,[r0,#0]            ;372  ; buffer_offset
000294  1c40              ADDS     r0,r0,#1              ;372
000296  4952              LDR      r1,|L5.992|
000298  6008              STR      r0,[r1,#0]            ;372  ; buffer_offset
00029a  1c64              ADDS     r4,r4,#1              ;373
00029c  4608              MOV      r0,r1                 ;374
00029e  6800              LDR      r0,[r0,#0]            ;374  ; buffer_offset
0002a0  4950              LDR      r1,|L5.996|
0002a2  8809              LDRH     r1,[r1,#0]            ;374  ; g_packetLen
0002a4  4288              CMP      r0,r1                 ;374
0002a6  d109              BNE      |L5.700|
0002a8  2000              MOVS     r0,#0                 ;376
0002aa  4940              LDR      r1,|L5.940|
0002ac  6008              STR      r0,[r1,#0]            ;376  ; g_ParseState_t
0002ae  494f              LDR      r1,|L5.1004|
0002b0  6809              LDR      r1,[r1,#0]            ;377  ; g_usbdata
0002b2  68c8              LDR      r0,[r1,#0xc]          ;377
0002b4  494b              LDR      r1,|L5.996|
0002b6  8809              LDRH     r1,[r1,#0]            ;377  ; g_packetLen
0002b8  f7fffffe          BL       Driver_RxDone
                  |L5.700|
0002bc  e002              B        |L5.708|
                  |L5.702|
0002be  bf00              NOP                            ;385
                  |L5.704|
0002c0  bf00              NOP                            ;386
                  |L5.706|
0002c2  bf00              NOP                            ;387
                  |L5.708|
0002c4  bf00              NOP                            ;248
                  |L5.710|
0002c6  9802              LDR      r0,[sp,#8]            ;229
0002c8  42a8              CMP      r0,r5                 ;229
0002ca  d200              BCS      |L5.718|
0002cc  e6c5              B        |L5.90|
                  |L5.718|
0002ce  2000              MOVS     r0,#0                 ;393
0002d0  e6aa              B        |L5.40|
;;;395    
                          ENDP

0002d2  0000              DCW      0x0000
                  |L5.724|
                          DCD      __FUNCTION__
                  |L5.728|
0002d8  23232320          DCB      "### function=%s line=%d\n",0
0002dc  66756e63
0002e0  74696f6e
0002e4  3d257320
0002e8  6c696e65
0002ec  3d25640a
0002f0  00      
0002f1  00                DCB      0
0002f2  00                DCB      0
0002f3  00                DCB      0
                  |L5.756|
0002f4  23232320          DCB      "### function=%s line=%d pbuffer ==NULL\n",0
0002f8  66756e63
0002fc  74696f6e
000300  3d257320
000304  6c696e65
000308  3d256420
00030c  70627566
000310  66657220
000314  3d3d4e55
000318  4c4c0a00
                  |L5.796|
00031c  23232320          DCB      "### function=%s line=%d pbuffer_len=%d,bufferLen%d\n",0
000320  66756e63
000324  74696f6e
000328  3d257320
00032c  6c696e65
000330  3d256420
000334  70627566
000338  6665725f
00033c  6c656e3d
000340  25642c62
000344  75666665
000348  724c656e
00034c  25640a00
                  |L5.848|
000350  30782530          DCB      "0x%02x ",0
000354  32782000
                  |L5.856|
000358  0a206941          DCB      "\n iAP2PacketParseBuffer\n",0
00035c  50325061
000360  636b6574
000364  50617273
000368  65427566
00036c  6665720a
000370  00      
000371  00                DCB      0
000372  00                DCB      0
000373  00                DCB      0
                  |L5.884|
000374  23232320          DCB      "### function=%s line=%d pbuffer_len=%d,bufferLen=%d\n",0
000378  66756e63
00037c  74696f6e
000380  3d257320
000384  6c696e65
000388  3d256420
00038c  70627566
000390  6665725f
000394  6c656e3d
000398  25642c62
00039c  75666665
0003a0  724c656e
0003a4  3d25640a
0003a8  00      
0003a9  00                DCB      0
0003aa  00                DCB      0
0003ab  00                DCB      0
                  |L5.940|
                          DCD      g_ParseState_t
                  |L5.944|
0003b0  23232320          DCB      "### function=%s line=%d g_ParseState_t=%d\n",0
0003b4  66756e63
0003b8  74696f6e
0003bc  3d257320
0003c0  6c696e65
0003c4  3d256420
0003c8  675f5061
0003cc  72736553
0003d0  74617465
0003d4  5f743d25
0003d8  640a00  
0003db  00                DCB      0
                  |L5.988|
                          DCD      g_usbdata_head
                  |L5.992|
                          DCD      buffer_offset
                  |L5.996|
                          DCD      g_packetLen
                  |L5.1000|
                          DCD      0x0000ffff
                  |L5.1004|
                          DCD      g_usbdata

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;722    int b_config = 0;
;;;723    int main(void)
000000  b08e              SUB      sp,sp,#0x38
;;;724    {
;;;725    	I2C_InitTypeDef* g_I2C_1_InitStruct;
;;;726    //    int usb_receive_len;
;;;727    	 uint8 data_offset=0;
000002  bf00              NOP      
;;;728    	int list_data_count = 0;
000004  2400              MOVS     r4,#0
;;;729    	 ListUsbData * usbdata = NULL;
000006  bf00              NOP      
;;;730    
;;;731    
;;;732    	
;;;733    	Systick_Init();
000008  f7fffffe          BL       Systick_Init
;;;734    	I2C_DeInit(I2C1);
00000c  4840              LDR      r0,|L6.272|
00000e  f7fffffe          BL       I2C_DeInit
;;;735    	I2C_StructInit(g_I2C_1_InitStruct);
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       I2C_StructInit
;;;736    	I2C_Init(I2C1,g_I2C_1_InitStruct);
000018  4629              MOV      r1,r5
00001a  483d              LDR      r0,|L6.272|
00001c  f7fffffe          BL       I2C_Init
;;;737    	I2C_Cmd(I2C1,ENABLE);
000020  2101              MOVS     r1,#1
000022  483b              LDR      r0,|L6.272|
000024  f7fffffe          BL       I2C_Cmd
;;;738    	USB_Init();
000028  f7fffffe          BL       USB_Init
;;;739    
;;;740    
;;;741    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
00002c  2101              MOVS     r1,#1
00002e  0448              LSLS     r0,r1,#17
000030  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;742    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
000034  2101              MOVS     r1,#1
000036  0488              LSLS     r0,r1,#18
000038  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;743    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
00003c  2101              MOVS     r1,#1
00003e  04c8              LSLS     r0,r1,#19
000040  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;744    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
000044  2101              MOVS     r1,#1
000046  0588              LSLS     r0,r1,#22
000048  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;745    	
;;;746    	
;;;747    	SEGGER_RTT_printf(0, "g2g start\n");
00004c  a131              ADR      r1,|L6.276|
00004e  2000              MOVS     r0,#0
000050  f7fffffe          BL       SEGGER_RTT_printf
;;;748    	ListUsbData_Init(g_usbdata);
000054  4832              LDR      r0,|L6.288|
000056  6800              LDR      r0,[r0,#0]  ; g_usbdata
000058  f7fffffe          BL       ListUsbData_Init
;;;749    	
;;;750    	ListUsbData_Init(g_usbdata_list);
00005c  4831              LDR      r0,|L6.292|
00005e  6800              LDR      r0,[r0,#0]  ; g_usbdata_list
000060  f7fffffe          BL       ListUsbData_Init
;;;751    	
;;;752       while(1)
000064  e003              B        |L6.110|
                  |L6.102|
;;;753       	{
;;;754       	  SysTick_Delay_Ms(5000);
000066  4830              LDR      r0,|L6.296|
000068  f7fffffe          BL       SysTick_Delay_Ms
;;;755    			break;
00006c  e000              B        |L6.112|
                  |L6.110|
00006e  e7fa              B        |L6.102|
                  |L6.112|
000070  bf00              NOP      
;;;756       	}
;;;757    
;;;758       
;;;759       SEGGER_RTT_printf(0,"xxxx b_config == 1\n");
000072  a12e              ADR      r1,|L6.300|
000074  2000              MOVS     r0,#0
000076  f7fffffe          BL       SEGGER_RTT_printf
;;;760    	//USB_Init();
;;;761    //	ListUsbData_Init(g_usbdata);
;;;762    	
;;;763    	//	I2C_Init(I2C_TypeDef * I2Cx,I2C_InitTypeDef * I2C_InitStruct)
;;;764    		
;;;765    		//Test_IO_Config();
;;;766    		
;;;767    		//GPIO_SetBits(GPIOA,GPIO_Pin_5);
;;;768    		
;;;769    		
;;;770    		Iap2CtrlSession g_Iap2CtrlSession;
;;;771    		Iap2Link_Init(g_pIap2Link, (Iap2LinkTransferFn)Driver_TransferStart);
00007a  4931              LDR      r1,|L6.320|
00007c  4831              LDR      r0,|L6.324|
00007e  6800              LDR      r0,[r0,#0]  ; g_pIap2Link
000080  f7fffffe          BL       Iap2Link_Init
;;;772    		Iap2CtrlSession_Init(&g_Iap2CtrlSession);
000084  a801              ADD      r0,sp,#4
000086  f7fffffe          BL       Iap2CtrlSession_Init
;;;773    		//Iap2Link_RegSession(g_pIap2Link, &g_Iap2CtrlSession);
;;;774    		Iap2Link_Start(g_pIap2Link);
00008a  482e              LDR      r0,|L6.324|
00008c  6800              LDR      r0,[r0,#0]  ; g_pIap2Link
00008e  f7fffffe          BL       Iap2Link_Start
;;;775    
;;;776    
;;;777    	
;;;778    	while (1)
000092  e03b              B        |L6.268|
                  |L6.148|
;;;779    	{
;;;780    		SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
000094  23c3              MOVS     r3,#0xc3
000096  009b              LSLS     r3,r3,#2
000098  4a2b              LDR      r2,|L6.328|
00009a  a12c              ADR      r1,|L6.332|
00009c  2000              MOVS     r0,#0
00009e  f7fffffe          BL       SEGGER_RTT_printf
;;;781    		usbdata = NULL;
0000a2  bf00              NOP      
;;;782    
;;;783    	//  Iap2Link_Start(g_pIap2Link);
;;;784    	
;;;785    #if 1
;;;786    		Driver_Check();
0000a4  f7fffffe          BL       Driver_Check
;;;787    
;;;788    				//SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
;;;789    		data_offset =0;
0000a8  bf00              NOP      
;;;790    			//	SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
;;;791    		memset(g_hid_report,0,6);
0000aa  2106              MOVS     r1,#6
0000ac  482e              LDR      r0,|L6.360|
0000ae  f7fffffe          BL       __aeabi_memclr4
;;;792    				//SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
;;;793    
;;;794    		//Iap2Link_Run(g_pIap2Link);
;;;795    		list_data_count = ListUsbData_Count();
0000b2  f7fffffe          BL       ListUsbData_Count
0000b6  4604              MOV      r4,r0
;;;796    		SEGGER_RTT_printf(0,"### function=%s line=%d list_data_count=%d\n",__FUNCTION__,__LINE__,list_data_count);
0000b8  23c7              MOVS     r3,#0xc7
0000ba  009b              LSLS     r3,r3,#2
0000bc  4a22              LDR      r2,|L6.328|
0000be  a12b              ADR      r1,|L6.364|
0000c0  2000              MOVS     r0,#0
0000c2  9400              STR      r4,[sp,#0]
0000c4  f7fffffe          BL       SEGGER_RTT_printf
;;;797    		//	SEGGER_RTT_printf(0,"### function=%s line=%d ListUsbData_Count=%d\n",__FUNCTION__,__LINE__,ListUsbData_Count());
;;;798    #else
;;;799    
;;;800             if(ListUsbData_Count()> 0)
;;;801             {
;;;802    				//usb_receive_len = USB_EP_Rx(1,receive_data_buf,512);
;;;803    				startCriticalSection();
;;;804    				usbdata = ListUsbData_Remove(g_usbdata_list);
;;;805    				endCriticalSection();
;;;806    				}
;;;807    						SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
;;;808    		if(usbdata!=NULL )
;;;809    			{
;;;810    			
;;;811    			SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
;;;812    			iAP2PacketParseBuffer(usbdata->pdata,usbdata->data_size);
;;;813    					SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
;;;814    			free(usbdata->pdata);
;;;815    					SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
;;;816    			free(usbdata);
;;;817    					SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
;;;818    			}
;;;819    
;;;820    				SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
;;;821    		//
;;;822    		#endif
;;;823    		if(!g_start_key)
0000c8  4833              LDR      r0,|L6.408|
0000ca  7800              LDRB     r0,[r0,#0]  ; g_start_key
0000cc  2800              CMP      r0,#0
0000ce  d107              BNE      |L6.224|
;;;824    			{
;;;825    			SEGGER_RTT_printf(0,"continue \n");
0000d0  a132              ADR      r1,|L6.412|
0000d2  f7fffffe          BL       SEGGER_RTT_printf
;;;826    			SysTick_Delay_Ms(1000);
0000d6  207d              MOVS     r0,#0x7d
0000d8  00c0              LSLS     r0,r0,#3
0000da  f7fffffe          BL       SysTick_Delay_Ms
;;;827    				continue;
0000de  e015              B        |L6.268|
                  |L6.224|
;;;828    			}
;;;829    
;;;830    		matrix_scan_key(&matrix);
0000e0  4831              LDR      r0,|L6.424|
0000e2  f7fffffe          BL       matrix_scan_key
;;;831    		matrix_scan_again(&matrix);
0000e6  4830              LDR      r0,|L6.424|
0000e8  f7fffffe          BL       matrix_scan_again
;;;832    		matrix_key_handle(&matrix);
0000ec  482e              LDR      r0,|L6.424|
0000ee  f7fffffe          BL       matrix_key_handle
;;;833    
;;;834    		/*处理热键*/
;;;835    		hotKey(&matrix);
0000f2  482d              LDR      r0,|L6.424|
0000f4  f7fffffe          BL       hotKey
;;;836    		
;;;837    		/*KeyCode处理格式*/
;;;838    		build_keycode(&matrix);
0000f8  482b              LDR      r0,|L6.424|
0000fa  f7fffffe          BL       build_keycode
;;;839    		
;;;840    		/*发送按键码*/
;;;841    		send_keycode(&matrix);
0000fe  482a              LDR      r0,|L6.424|
000100  f7fffffe          BL       send_keycode
;;;842    		
;;;843    		/*发送多媒体键*/
;;;844    		send_acpi_media_keycode(&matrix);
000104  4828              LDR      r0,|L6.424|
000106  f7fffffe          BL       send_acpi_media_keycode
00010a  bf00              NOP                            ;827
                  |L6.268|
00010c  e7c2              B        |L6.148|
;;;845    		
;;;846    	}
;;;847    }
;;;848    
                          ENDP

00010e  0000              DCW      0x0000
                  |L6.272|
                          DCD      0x40005400
                  |L6.276|
000114  67326720          DCB      "g2g start\n",0
000118  73746172
00011c  740a00  
00011f  00                DCB      0
                  |L6.288|
                          DCD      g_usbdata
                  |L6.292|
                          DCD      g_usbdata_list
                  |L6.296|
                          DCD      0x00001388
                  |L6.300|
00012c  78787878          DCB      "xxxx b_config == 1\n",0
000130  20625f63
000134  6f6e6669
000138  67203d3d
00013c  20310a00
                  |L6.320|
                          DCD      Driver_TransferStart
                  |L6.324|
                          DCD      g_pIap2Link
                  |L6.328|
                          DCD      |symbol_number.40|
                  |L6.332|
00014c  23232320          DCB      "### function=%s line=%d\n",0
000150  66756e63
000154  74696f6e
000158  3d257320
00015c  6c696e65
000160  3d25640a
000164  00      
000165  00                DCB      0
000166  00                DCB      0
000167  00                DCB      0
                  |L6.360|
                          DCD      g_hid_report
                  |L6.364|
00016c  23232320          DCB      "### function=%s line=%d list_data_count=%d\n",0
000170  66756e63
000174  74696f6e
000178  3d257320
00017c  6c696e65
000180  3d256420
000184  6c697374
000188  5f646174
00018c  615f636f
000190  756e743d
000194  25640a00
                  |L6.408|
                          DCD      g_start_key
                  |L6.412|
00019c  636f6e74          DCB      "continue \n",0
0001a0  696e7565
0001a4  200a00  
0001a7  00                DCB      0
                  |L6.424|
                          DCD      matrix

                          AREA ||i.remap_fun||, CODE, READONLY, ALIGN=1

                  remap_fun PROC
;;;425    
;;;426    static void remap_fun(matrix_t* matrix, remap_t* remap, uint8_t num)
000000  b5f8              PUSH     {r3-r7,lr}
;;;427    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;428    	int i;
;;;429    	for(i = 0; i < num; ++i)
000008  2400              MOVS     r4,#0
00000a  e015              B        |L7.56|
                  |L7.12|
;;;430    	{
;;;431    		if(get_key(&(matrix->buf), remap[i].key))
00000c  0060              LSLS     r0,r4,#1
00000e  5c31              LDRB     r1,[r6,r0]
000010  4628              MOV      r0,r5
000012  304e              ADDS     r0,r0,#0x4e
000014  f7fffffe          BL       get_key
000018  2800              CMP      r0,#0
00001a  d00c              BEQ      |L7.54|
;;;432    		{
;;;433    			key_up(&(matrix->buf), remap[i].key);
00001c  0060              LSLS     r0,r4,#1
00001e  5c31              LDRB     r1,[r6,r0]
000020  4628              MOV      r0,r5
000022  304e              ADDS     r0,r0,#0x4e
000024  f7fffffe          BL       key_up
;;;434    			key_down(&(matrix->buf), remap[i].remap);
000028  0060              LSLS     r0,r4,#1
00002a  1980              ADDS     r0,r0,r6
00002c  7841              LDRB     r1,[r0,#1]
00002e  4628              MOV      r0,r5
000030  304e              ADDS     r0,r0,#0x4e
000032  f7fffffe          BL       key_down
                  |L7.54|
000036  1c64              ADDS     r4,r4,#1              ;429
                  |L7.56|
000038  42bc              CMP      r4,r7                 ;429
00003a  dbe7              BLT      |L7.12|
;;;435    		}
;;;436    	}
;;;437    }
00003c  bdf8              POP      {r3-r7,pc}
;;;438    
                          ENDP


                          AREA ||i.send_acpi_media_keycode||, CODE, READONLY, ALIGN=2

                  send_acpi_media_keycode PROC
;;;678    
;;;679    void send_acpi_media_keycode(matrix_t* matrix)
000000  b538              PUSH     {r3-r5,lr}
;;;680    {
000002  4604              MOV      r4,r0
;;;681    	uint8_t media_buffer[3] = {0x03, 0x00, 0x00};
000004  a010              ADR      r0,|L8.72|
000006  6800              LDR      r0,[r0,#0]
000008  9000              STR      r0,[sp,#0]
;;;682    		
;;;683    	//发送多媒体键，ACPI键
;;;684    	if(matrix->acpi_send_flag == 0x01)
00000a  20a4              MOVS     r0,#0xa4
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2801              CMP      r0,#1
000010  d10d              BNE      |L8.46|
;;;685    	{
;;;686    		//发送多媒体键
;;;687    		build_media_key(matrix, media_buffer, sizeof(media_buffer));
000012  2203              MOVS     r2,#3
000014  4669              MOV      r1,sp
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       build_media_key
;;;688    		
;;;689    		//SEGGER_RTT_printf(0, "%02x %02x %02x %02x\n", matrix->acpi_send[0], media_buffer[0], media_buffer[1], media_buffer[2]);
;;;690    		
;;;691    		USB_EP_Tx(ep_consumer, media_buffer, sizeof(media_buffer));
00001c  2203              MOVS     r2,#3
00001e  4669              MOV      r1,sp
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       USB_EP_Tx
;;;692    		matrix->acpi_send_flag = 0x02;
000026  2102              MOVS     r1,#2
000028  20a4              MOVS     r0,#0xa4
00002a  5501              STRB     r1,[r0,r4]
00002c  e00b              B        |L8.70|
                  |L8.46|
;;;693    		
;;;694    	}
;;;695    	else if(matrix->acpi_send_flag == 0x03)
00002e  20a4              MOVS     r0,#0xa4
000030  5d00              LDRB     r0,[r0,r4]
000032  2803              CMP      r0,#3
000034  d107              BNE      |L8.70|
;;;696    	{
;;;697    		//发送抬起包
;;;698    		USB_EP_Tx(ep_consumer, media_buffer, sizeof(media_buffer));
000036  2203              MOVS     r2,#3
000038  4669              MOV      r1,sp
00003a  2002              MOVS     r0,#2
00003c  f7fffffe          BL       USB_EP_Tx
;;;699    		matrix->acpi_send_flag = 0x00;
000040  2100              MOVS     r1,#0
000042  20a4              MOVS     r0,#0xa4
000044  5501              STRB     r1,[r0,r4]
                  |L8.70|
;;;700    	}
;;;701    	
;;;702    }
000046  bd38              POP      {r3-r5,pc}
;;;703    
                          ENDP

                  |L8.72|
000048  0300              DCB      3,0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.send_keycode||, CODE, READONLY, ALIGN=1

                  send_keycode PROC
;;;564    
;;;565    void send_keycode(matrix_t* matrix)
000000  b57c              PUSH     {r2-r6,lr}
;;;566    {
000002  4604              MOV      r4,r0
;;;567    	uint8_t flag = 0;
000004  2500              MOVS     r5,#0
;;;568    	
;;;569    	for(uint8_t i = 0; i < 8; ++i)
000006  2000              MOVS     r0,#0
000008  e00a              B        |L9.32|
                  |L9.10|
;;;570    	{
;;;571    		if(matrix->send_last[i] == matrix->send[i])
00000a  4621              MOV      r1,r4
00000c  31a5              ADDS     r1,r1,#0xa5
00000e  5c0a              LDRB     r2,[r1,r0]
000010  390b              SUBS     r1,r1,#0xb
000012  5c09              LDRB     r1,[r1,r0]
000014  428a              CMP      r2,r1
000016  d101              BNE      |L9.28|
;;;572    		{
;;;573    			flag++;
000018  1c69              ADDS     r1,r5,#1
00001a  b2cd              UXTB     r5,r1
                  |L9.28|
00001c  1c41              ADDS     r1,r0,#1              ;569
00001e  b2c8              UXTB     r0,r1                 ;569
                  |L9.32|
000020  2808              CMP      r0,#8                 ;569
000022  dbf2              BLT      |L9.10|
;;;574    		}
;;;575    	}
;;;576    	
;;;577    	if(flag < 8)
000024  2d08              CMP      r5,#8
000026  da15              BGE      |L9.84|
;;;578    	{
;;;579    
;;;580    		uint8_t key_send_buff[8] = {0x00};
000028  2000              MOVS     r0,#0
00002a  9000              STR      r0,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
;;;581    		memcpy(key_send_buff, matrix->send, sizeof(matrix->send));
00002e  2208              MOVS     r2,#8
000030  4621              MOV      r1,r4
000032  319a              ADDS     r1,r1,#0x9a
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       __aeabi_memcpy
;;;582    				
;;;583    		//发送
;;;584    		USB_EP_Tx(ep_boot_keyboard, key_send_buff, sizeof(key_send_buff));
00003a  2208              MOVS     r2,#8
00003c  4669              MOV      r1,sp
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       USB_EP_Tx
;;;585    
;;;586    		//更新
;;;587    		memcpy(matrix->send_last, matrix->send, sizeof(matrix->send_last));
000044  2208              MOVS     r2,#8
000046  4621              MOV      r1,r4
000048  319a              ADDS     r1,r1,#0x9a
00004a  4620              MOV      r0,r4
00004c  30a5              ADDS     r0,r0,#0xa5
00004e  f7fffffe          BL       __aeabi_memcpy
;;;588    	}
000052  bf00              NOP      
                  |L9.84|
;;;589    	
;;;590    	memset(matrix->send, 0x00, sizeof(matrix->send));
000054  2108              MOVS     r1,#8
000056  4620              MOV      r0,r4
000058  309a              ADDS     r0,r0,#0x9a
00005a  f7fffffe          BL       __aeabi_memclr
;;;591    }
00005e  bd7c              POP      {r2-r6,pc}
;;;592    
                          ENDP


                          AREA ||i.usb_send_data_buffer||, CODE, READONLY, ALIGN=2

                  usb_send_data_buffer PROC
;;;398    
;;;399    void usb_send_data_buffer(uint8_t *pdata, uint16 data_size )
000000  b570              PUSH     {r4-r6,lr}
;;;400    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;401        if(data_size > 0)
000006  2c00              CMP      r4,#0
000008  dd21              BLE      |L10.78|
;;;402        	{
;;;403        	#if 1 //printf debug msg
;;;404    		SEGGER_RTT_printf(0,"usb_send_data_buffer data_size=%d\n",data_size);
00000a  4622              MOV      r2,r4
00000c  a110              ADR      r1,|L10.80|
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       SEGGER_RTT_printf
;;;405        	for(int i = 0;i<data_size;i++)
000014  2600              MOVS     r6,#0
000016  e005              B        |L10.36|
                  |L10.24|
;;;406        		{ 
;;;407        		SEGGER_RTT_printf(0,"0x%02x ",pdata[i]);
000018  5daa              LDRB     r2,[r5,r6]
00001a  a116              ADR      r1,|L10.116|
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       SEGGER_RTT_printf
000022  1c76              ADDS     r6,r6,#1              ;405
                  |L10.36|
000024  42a6              CMP      r6,r4                 ;405
000026  dbf7              BLT      |L10.24|
;;;408        		}
;;;409    		SEGGER_RTT_printf(0," \n usb_send_data_buffer \n");
000028  a114              ADR      r1,|L10.124|
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       SEGGER_RTT_printf
;;;410    		#endif 
;;;411    		
;;;412    		if(USB_EP_Tx(1,pdata,data_size) != SUCCESS)
000030  b2e2              UXTB     r2,r4
000032  4629              MOV      r1,r5
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       USB_EP_Tx
00003a  2801              CMP      r0,#1
00003c  d003              BEQ      |L10.70|
;;;413    			{
;;;414    					SEGGER_RTT_printf(0," \n usb_send_data_buffer error \n");
00003e  a116              ADR      r1,|L10.152|
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       SEGGER_RTT_printf
                  |L10.70|
;;;415    				//f_send_kb = 0;
;;;416    			}
;;;417    		SEGGER_RTT_printf(0," \n usb_send_data_buffer suceessful \n");
000046  a11c              ADR      r1,|L10.184|
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       SEGGER_RTT_printf
                  |L10.78|
;;;418    			//SysTick_Delay_Ms(100);
;;;419        	}
;;;420    	}	
00004e  bd70              POP      {r4-r6,pc}
;;;421    
                          ENDP

                  |L10.80|
000050  7573625f          DCB      "usb_send_data_buffer data_size=%d\n",0
000054  73656e64
000058  5f646174
00005c  615f6275
000060  66666572
000064  20646174
000068  615f7369
00006c  7a653d25
000070  640a00  
000073  00                DCB      0
                  |L10.116|
000074  30782530          DCB      "0x%02x ",0
000078  32782000
                  |L10.124|
00007c  200a2075          DCB      " \n usb_send_data_buffer \n",0
000080  73625f73
000084  656e645f
000088  64617461
00008c  5f627566
000090  66657220
000094  0a00    
000096  00                DCB      0
000097  00                DCB      0
                  |L10.152|
000098  200a2075          DCB      " \n usb_send_data_buffer error \n",0
00009c  73625f73
0000a0  656e645f
0000a4  64617461
0000a8  5f627566
0000ac  66657220
0000b0  6572726f
0000b4  72200a00
                  |L10.184|
0000b8  200a2075          DCB      " \n usb_send_data_buffer suceessful \n",0
0000bc  73625f73
0000c0  656e645f
0000c4  64617461
0000c8  5f627566
0000cc  66657220
0000d0  73756365
0000d4  65737366
0000d8  756c200a
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_usbdata_head
                          %        9
                  receive_data_buf
                          %        512
                  buff
                          %        128

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  rMap
                          DCDU     0x48000000
                          DCDU     0x00000001
000008  0000              DCB      0x00,0x00
                          DCDU     0x48000000
                          DCDU     0x00000002
000012  0001              DCB      0x00,0x01
                          DCDU     0x48000000
                          DCDU     0x00000004
00001c  0002              DCB      0x00,0x02
                          DCDU     0x48000000
                          DCDU     0x00000008
000026  0003              DCB      0x00,0x03
                          DCDU     0x48000000
                          DCDU     0x00000010
000030  0004              DCB      0x00,0x04
                          DCDU     0x48000000
                          DCDU     0x00000020
00003a  0005              DCB      0x00,0x05
                          DCDU     0x48000000
                          DCDU     0x00000040
000044  0006              DCB      0x00,0x06
                          DCDU     0x48000000
                          DCDU     0x00000080
00004e  0007              DCB      0x00,0x07
                  cMap
                          DCDU     0x48000400
                          DCDU     0x00000001
000058  0100              DCB      0x01,0x00
                          DCDU     0x48000400
                          DCDU     0x00000002
000062  0101              DCB      0x01,0x01
                          DCDU     0x48000400
                          DCDU     0x00000004
00006c  0102              DCB      0x01,0x02
                          DCDU     0x48000400
                          DCDU     0x00000400
000076  010a              DCB      0x01,0x0a
                          DCDU     0x48000400
                          DCDU     0x00000800
000080  010b              DCB      0x01,0x0b
                          DCDU     0x48000400
                          DCDU     0x00001000
00008a  010c              DCB      0x01,0x0c
                          DCDU     0x48000400
                          DCDU     0x00002000
000094  010d              DCB      0x01,0x0d
                          DCDU     0x48000400
                          DCDU     0x00004000
00009e  010e              DCB      0x01,0x0e
                          DCDU     0x48000400
                          DCDU     0x00008000
0000a8  010f              DCB      0x01,0x0f
                          DCDU     0x48000000
                          DCDU     0x00008000
0000b2  000f              DCB      0x00,0x0f
                          DCDU     0x48000400
                          DCDU     0x00000008
0000bc  0103              DCB      0x01,0x03
                          DCDU     0x48000400
                          DCDU     0x00000010
0000c6  0104              DCB      0x01,0x04
                          DCDU     0x48000400
                          DCDU     0x00000020
0000d0  0105              DCB      0x01,0x05
                          DCDU     0x48000400
                          DCDU     0x00000040
0000da  0106              DCB      0x01,0x06
                          DCDU     0x48000400
                          DCDU     0x00000080
0000e4  0107              DCB      0x01,0x07
                          DCDU     0x48000800
                          DCDU     0x00004000
0000ee  020e              DCB      0x02,0x0e
                          DCDU     0x48001400
                          DCDU     0x00000001
0000f8  0500              DCB      0x05,0x00
                          DCDU     0x48001400
                          DCDU     0x00000002
000102  0501              DCB      0x05,0x01
                  keyMatrix
000104  00000000          DCB      0x00,0x00,0x00,0x00
000108  00e30000          DCB      0x00,0xe3,0x00,0x00
00010c  e600e200          DCB      0xe6,0x00,0xe2,0x00
000110  00000000          DCB      0x00,0x00,0x00,0x00
000114  00e70000          DCB      0x00,0xe7,0x00,0x00
000118  0000e03e          DCB      0x00,0x00,0xe0,0x3e
00011c  51002c00          DCB      0x51,0x00,0x2c,0x00
000120  00004600          DCB      0x00,0x00,0x46,0x00
000124  4f000000          DCB      0x4f,0x00,0x00,0x00
000128  00000000          DCB      0x00,0x00,0x00,0x00
00012c  50005200          DCB      0x50,0x00,0x52,0x00
000130  00000000          DCB      0x00,0x00,0x00,0x00
000134  11100b0d          DCB      0x11,0x10,0x0b,0x0d
000138  181c2324          DCB      0x18,0x1c,0x23,0x24
00013c  000000e5          DCB      0x00,0x00,0x00,0xe5
000140  00e10000          DCB      0x00,0xe1,0x00,0x00
000144  001b0016          DCB      0x00,0x1b,0x00,0x16
000148  1a393a1f          DCB      0x1a,0x39,0x3a,0x1f
00014c  00000000          DCB      0x00,0x00,0x00,0x00
000150  00000000          DCB      0x00,0x00,0x00,0x00
000154  00000000          DCB      0x00,0x00,0x00,0x00
000158  00000000          DCB      0x00,0x00,0x00,0x00
00015c  45284431          DCB      0x45,0x28,0x44,0x31
000160  002a4243          DCB      0x00,0x2a,0x42,0x43
000164  0037000f          DCB      0x00,0x37,0x00,0x0f
000168  12404126          DCB      0x12,0x40,0x41,0x26
00016c  00363f0e          DCB      0x00,0x36,0x3f,0x0e
000170  0c302e25          DCB      0x0c,0x30,0x2e,0x25
000174  38af3433          DCB      0x38,0xaf,0x34,0x33
000178  132f2d27          DCB      0x13,0x2f,0x2d,0x27
00017c  00000000          DCB      0x00,0x00,0x00,0x00
000180  00000000          DCB      0x00,0x00,0x00,0x00
000184  05190a09          DCB      0x05,0x19,0x0a,0x09
000188  15172221          DCB      0x15,0x17,0x22,0x21
00018c  98063d07          DCB      0x98,0x06,0x3d,0x07
000190  083c3b20          DCB      0x08,0x3c,0x3b,0x20
                  __FUNCTION__
000194  69415032          DCB      0x69,0x41,0x50,0x32
000198  5061636b          DCB      0x50,0x61,0x63,0x6b
00019c  65745061          DCB      0x65,0x74,0x50,0x61
0001a0  72736542          DCB      0x72,0x73,0x65,0x42
0001a4  75666665          DCB      0x75,0x66,0x66,0x65
0001a8  7200              DCB      0x72,0x00
                  |symbol_number.40|
0001aa  6d61              DCB      0x6d,0x61
0001ac  696e00            DCB      0x69,0x6e,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  g_start_key
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  g_count
                          DCD      0x00000000
                  g_usbdata
                          DCD      0x00000000
                  g_usbdata_list
                          DCD      0x00000000
                  g_hid_report
                          DCD      0x00000000
000014  0000              DCB      0x00,0x00
                  qty
000016  0000              DCB      0x00,0x00
                  NOW
                          DCD      0x00000000
                  remap
00001c  3abe3bbf          DCB      0x3a,0xbe,0x3b,0xbf
000020  3cc13dc7          DCB      0x3c,0xc1,0x3d,0xc7
000024  40b141b3          DCB      0x40,0xb1,0x41,0xb3
000028  42b043b4          DCB      0x42,0xb0,0x43,0xb4
00002c  44b745b6          DCB      0x44,0xb7,0x45,0xb6
000030  46ba              DCB      0x46,0xba
                  remap2
000032  504a              DCB      0x50,0x4a
000034  4f4d524b          DCB      0x4f,0x4d,0x52,0x4b
000038  514e              DCB      0x51,0x4e
                  matrix
00003a  0812              DCB      0x08,0x12
                          DCD      rMap
                          DCD      cMap
                          DCD      keyMatrix
000048  0000              DCW      0x0000
00004a  0000              DCB      0x00,0x00
                          %        60
000088  0000              DCW      0x0000
00008a  0000              DCB      0x00,0x00
                          %        28
0000a8  0000              DCW      0x0000
0000aa  0000              DCB      0x00,0x00
                          %        28
0000c8  0000              DCB      0x00,0x00
                          DCDU     remap
0000ce  0b                DCB      0x0b
                          DCDU     remap2
0000d3  04                DCB      0x04
                          %        8
0000dc  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
                  g_ParseState_t
                          DCD      0x00000000
                  buffer_offset
                          DCD      0x00000000
                  g_packets
                          DCD      0x00000000
                  g_packetLen
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
                  b_config
                          DCD      0x00000000
                  lock_flag
0000fc  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L70.24|
                  |L70.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L70.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L70.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\user\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_3a854f33____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___6_main_c_3a854f33____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_3a854f33____REVSH|
#line 144
|__asm___6_main_c_3a854f33____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
