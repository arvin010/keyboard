; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I..\iap2 -IC:\Users\dell1\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -D__UVISION_VERSION=534 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\main.crf ..\user\main.c]
                          THUMB

                          AREA ||i.build_keycode||, CODE, READONLY, ALIGN=1

                  build_keycode PROC
;;;505    
;;;506    void build_keycode(matrix_t* matrix)
000000  b5f0              PUSH     {r4-r7,lr}
;;;507    {
000002  b0a1              SUB      sp,sp,#0x84
000004  4604              MOV      r4,r0
;;;508    	uint8_t t_buff[128] = {0x00};
000006  2180              MOVS     r1,#0x80
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memclr4
;;;509    	uint8_t i, q = 0x00, index = 2;
00000e  2700              MOVS     r7,#0
000010  2602              MOVS     r6,#2
;;;510    
;;;511    	handle_super_key(matrix);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       handle_super_key
;;;512    	q = get_key_down_list(&(matrix->buf), t_buff, sizeof(t_buff));
000018  2280              MOVS     r2,#0x80
00001a  a901              ADD      r1,sp,#4
00001c  4620              MOV      r0,r4
00001e  304e              ADDS     r0,r0,#0x4e
000020  f7fffffe          BL       get_key_down_list
000024  4607              MOV      r7,r0
;;;513    	
;;;514    	for(i = 0; i < q && index < 8; ++i)
000026  2500              MOVS     r5,#0
000028  e03c              B        |L1.164|
                  |L1.42|
;;;515    	{
;;;516    		switch(t_buff[i])
00002a  a801              ADD      r0,sp,#4
00002c  5d40              LDRB     r0,[r0,r5]
00002e  28b7              CMP      r0,#0xb7
000030  d01e              BEQ      |L1.112|
000032  dc08              BGT      |L1.70|
000034  38b0              SUBS     r0,r0,#0xb0
000036  0003              MOVS     r3,r0
000038  f7fffffe          BL       __ARM_common_switch8
00003c  07181628          DCB      0x07,0x18,0x16,0x28
000040  1719281b          DCB      0x17,0x19,0x28,0x1b
000044  2800              DCB      0x28,0x00
                  |L1.70|
000046  28bf              CMP      r0,#0xbf
000048  d00b              BEQ      |L1.98|
00004a  dc04              BGT      |L1.86|
00004c  28ba              CMP      r0,#0xba
00004e  d011              BEQ      |L1.116|
000050  28be              CMP      r0,#0xbe
000052  d11b              BNE      |L1.140|
000054  e004              B        |L1.96|
                  |L1.86|
000056  28c1              CMP      r0,#0xc1
000058  d004              BEQ      |L1.100|
00005a  28c7              CMP      r0,#0xc7
00005c  d116              BNE      |L1.140|
00005e  e002              B        |L1.102|
                  |L1.96|
;;;517    		{
;;;518    			case BRIGHT_DOWN:			
;;;519    			case BRIGHT_UP:			
000060  bf00              NOP      
                  |L1.98|
;;;520    			case WWW_HOME:				
000062  bf00              NOP      
                  |L1.100|
;;;521    			case SOFT_KEYBOARD:					
000064  bf00              NOP      
                  |L1.102|
;;;522    			case PRETRACK:			
000066  bf00              NOP      
;;;523    			case PLAY_PAUSE:	
000068  bf00              NOP      
;;;524    			case NEXTTRACK:	
00006a  bf00              NOP      
;;;525    			case MUTE:
00006c  bf00              NOP      
;;;526    			case VOL_DOWN:				
00006e  bf00              NOP      
                  |L1.112|
;;;527    			case VOL_UP:
000070  bf00              NOP      
;;;528    			case LOCK:
000072  bf00              NOP      
                  |L1.116|
;;;529    				if(matrix->acpi_send_flag == 0x00)
000074  20a4              MOVS     r0,#0xa4
000076  5d00              LDRB     r0,[r0,r4]
000078  2800              CMP      r0,#0
00007a  d106              BNE      |L1.138|
;;;530    				{
;;;531    					matrix->acpi_send[0] = t_buff[i];
00007c  a801              ADD      r0,sp,#4
00007e  5d41              LDRB     r1,[r0,r5]
000080  20a2              MOVS     r0,#0xa2
000082  5501              STRB     r1,[r0,r4]
;;;532    					matrix->acpi_send_flag = 0x01;
000084  2101              MOVS     r1,#1
000086  20a4              MOVS     r0,#0xa4
000088  5501              STRB     r1,[r0,r4]
                  |L1.138|
;;;533    				}
;;;534    			break;	
00008a  e008              B        |L1.158|
                  |L1.140|
;;;535    			default: matrix->send[index++] = t_buff[i];
00008c  a801              ADD      r0,sp,#4
00008e  5d41              LDRB     r1,[r0,r5]
000090  4630              MOV      r0,r6
000092  1c72              ADDS     r2,r6,#1
000094  b2d6              UXTB     r6,r2
000096  4622              MOV      r2,r4
000098  329a              ADDS     r2,r2,#0x9a
00009a  5411              STRB     r1,[r2,r0]
00009c  bf00              NOP                            ;516
                  |L1.158|
00009e  bf00              NOP                            ;534
0000a0  1c68              ADDS     r0,r5,#1              ;514
0000a2  b2c5              UXTB     r5,r0                 ;514
                  |L1.164|
0000a4  42bd              CMP      r5,r7                 ;514
0000a6  da01              BGE      |L1.172|
0000a8  2e08              CMP      r6,#8                 ;514
0000aa  dbbe              BLT      |L1.42|
                  |L1.172|
;;;536    		}	
;;;537    	
;;;538    	}
;;;539    	
;;;540    	if(matrix->acpi_send_flag == 0x02 && !get_key(&matrix->buf, matrix->acpi_send[0]))
0000ac  20a4              MOVS     r0,#0xa4
0000ae  5d00              LDRB     r0,[r0,r4]
0000b0  2802              CMP      r0,#2
0000b2  d10f              BNE      |L1.212|
0000b4  20a2              MOVS     r0,#0xa2
0000b6  5d01              LDRB     r1,[r0,r4]
0000b8  4620              MOV      r0,r4
0000ba  304e              ADDS     r0,r0,#0x4e
0000bc  f7fffffe          BL       get_key
0000c0  2800              CMP      r0,#0
0000c2  d107              BNE      |L1.212|
;;;541    	{
;;;542    		memset(matrix->acpi_send, 0x00, sizeof(matrix->acpi_send));
0000c4  4620              MOV      r0,r4
0000c6  30a2              ADDS     r0,r0,#0xa2
0000c8  2100              MOVS     r1,#0
0000ca  7001              STRB     r1,[r0,#0]
0000cc  7041              STRB     r1,[r0,#1]
;;;543    		matrix->acpi_send_flag = 0x03;
0000ce  2103              MOVS     r1,#3
0000d0  20a4              MOVS     r0,#0xa4
0000d2  5501              STRB     r1,[r0,r4]
                  |L1.212|
;;;544    	}
;;;545    	
;;;546    	key_clear(&(matrix->buf));
0000d4  4620              MOV      r0,r4
0000d6  304e              ADDS     r0,r0,#0x4e
0000d8  f7fffffe          BL       key_clear
;;;547    }
0000dc  b021              ADD      sp,sp,#0x84
0000de  bdf0              POP      {r4-r7,pc}
;;;548    
                          ENDP


                          AREA ||i.build_media_key||, CODE, READONLY, ALIGN=1

                  build_media_key PROC
;;;592    
;;;593    void build_media_key(matrix_t* matrix, uint8_t* media_buffer, uint8_t len)
000000  b510              PUSH     {r4,lr}
;;;594    {
000002  4614              MOV      r4,r2
;;;595    	media_buffer[0] = 0x03;
000004  2203              MOVS     r2,#3
000006  700a              STRB     r2,[r1,#0]
;;;596    	switch(matrix->acpi_send[0])
000008  22a2              MOVS     r2,#0xa2
00000a  5c12              LDRB     r2,[r2,r0]
00000c  2ab7              CMP      r2,#0xb7
00000e  d02f              BEQ      |L2.112|
000010  dc08              BGT      |L2.36|
000012  3ab0              SUBS     r2,r2,#0xb0
000014  0013              MOVS     r3,r2
000016  f7fffffe          BL       __ARM_common_switch8
00001a  0712              DCB      0x07,0x12
00001c  17491c21          DCB      0x17,0x49,0x1c,0x21
000020  49264900          DCB      0x49,0x26,0x49,0x00
                  |L2.36|
000024  2abf              CMP      r2,#0xbf
000026  d032              BEQ      |L2.142|
000028  dc04              BGT      |L2.52|
00002a  2aba              CMP      r2,#0xba
00002c  d025              BEQ      |L2.122|
00002e  2abe              CMP      r2,#0xbe
000030  d13c              BNE      |L2.172|
000032  e027              B        |L2.132|
                  |L2.52|
000034  2ac1              CMP      r2,#0xc1
000036  d02f              BEQ      |L2.152|
000038  2ac7              CMP      r2,#0xc7
00003a  d137              BNE      |L2.172|
00003c  e031              B        |L2.162|
;;;597    	{
;;;598    		/*下一曲*/
;;;599    		case NEXTTRACK:		
;;;600    			media_buffer[1] = 0xB5; 
00003e  22b5              MOVS     r2,#0xb5
000040  704a              STRB     r2,[r1,#1]
;;;601    			media_buffer[2] = 0x00; 
000042  2200              MOVS     r2,#0
000044  708a              STRB     r2,[r1,#2]
;;;602    		break;
000046  e031              B        |L2.172|
;;;603    			
;;;604    		/*上一曲*/
;;;605    		case PRETRACK: 		
;;;606    			media_buffer[1] = 0xB6; 
000048  22b6              MOVS     r2,#0xb6
00004a  704a              STRB     r2,[r1,#1]
;;;607    			media_buffer[2] = 0x00; 
00004c  2200              MOVS     r2,#0
00004e  708a              STRB     r2,[r1,#2]
;;;608    		break;
000050  e02c              B        |L2.172|
;;;609    			
;;;610    		/*播放-暂停*/
;;;611    		case PLAY_PAUSE:	
;;;612    			media_buffer[1] = 0xCD; 
000052  22cd              MOVS     r2,#0xcd
000054  704a              STRB     r2,[r1,#1]
;;;613    			media_buffer[2] = 0x00; 
000056  2200              MOVS     r2,#0
000058  708a              STRB     r2,[r1,#2]
;;;614    		break;
00005a  e027              B        |L2.172|
;;;615    		
;;;616    		/*静音*/
;;;617    		case MUTE: 			
;;;618    			media_buffer[1] = 0xE2; 
00005c  22e2              MOVS     r2,#0xe2
00005e  704a              STRB     r2,[r1,#1]
;;;619    			media_buffer[2] = 0x00; 
000060  2200              MOVS     r2,#0
000062  708a              STRB     r2,[r1,#2]
;;;620    		break;
000064  e022              B        |L2.172|
;;;621    			
;;;622    		/*音量+*/
;;;623    		case VOL_UP:		
;;;624    			media_buffer[1] = 0xE9; 
000066  22e9              MOVS     r2,#0xe9
000068  704a              STRB     r2,[r1,#1]
;;;625    			media_buffer[2] = 0x00; 
00006a  2200              MOVS     r2,#0
00006c  708a              STRB     r2,[r1,#2]
;;;626    		break;
00006e  e01d              B        |L2.172|
                  |L2.112|
;;;627    			
;;;628    		/*音量-*/
;;;629    		case VOL_DOWN:		
;;;630    			media_buffer[1] = 0xEA; 
000070  22ea              MOVS     r2,#0xea
000072  704a              STRB     r2,[r1,#1]
;;;631    			media_buffer[2] = 0x00; 
000074  2200              MOVS     r2,#0
000076  708a              STRB     r2,[r1,#2]
;;;632    		break; 
000078  e018              B        |L2.172|
                  |L2.122|
;;;633    			
;;;634    		/*锁屏*/
;;;635    		case LOCK:			
;;;636    			media_buffer[1] = 0x30; 
00007a  2230              MOVS     r2,#0x30
00007c  704a              STRB     r2,[r1,#1]
;;;637    			media_buffer[2] = 0x00; 
00007e  2200              MOVS     r2,#0
000080  708a              STRB     r2,[r1,#2]
;;;638    		break;
000082  e013              B        |L2.172|
                  |L2.132|
;;;639    			
;;;640    		/*背光-*/
;;;641    		case BRIGHT_DOWN:	
;;;642    			media_buffer[1] = 0x70; 
000084  2270              MOVS     r2,#0x70
000086  704a              STRB     r2,[r1,#1]
;;;643    			media_buffer[2] = 0x00;
000088  2200              MOVS     r2,#0
00008a  708a              STRB     r2,[r1,#2]
;;;644    		break;
00008c  e00e              B        |L2.172|
                  |L2.142|
;;;645    			
;;;646    		/*背光+*/
;;;647    		case BRIGHT_UP:		
;;;648    			media_buffer[1] = 0x6F; 
00008e  226f              MOVS     r2,#0x6f
000090  704a              STRB     r2,[r1,#1]
;;;649    			media_buffer[2] = 0x00; 
000092  2200              MOVS     r2,#0
000094  708a              STRB     r2,[r1,#2]
;;;650    		break;        
000096  e009              B        |L2.172|
                  |L2.152|
;;;651    		
;;;652    		/*主页*/
;;;653    		case WWW_HOME:		
;;;654    			media_buffer[1] = 0x23; 
000098  2223              MOVS     r2,#0x23
00009a  704a              STRB     r2,[r1,#1]
;;;655    			media_buffer[2] = 0x02; 
00009c  2202              MOVS     r2,#2
00009e  708a              STRB     r2,[r1,#2]
;;;656    		break;
0000a0  e004              B        |L2.172|
                  |L2.162|
;;;657    			
;;;658    		/*软键盘*/
;;;659    		case SOFT_KEYBOARD:		
;;;660    			media_buffer[1] = 0xAE; 
0000a2  22ae              MOVS     r2,#0xae
0000a4  704a              STRB     r2,[r1,#1]
;;;661    			media_buffer[2] = 0x01; 
0000a6  2201              MOVS     r2,#1
0000a8  708a              STRB     r2,[r1,#2]
;;;662    		break;
0000aa  bf00              NOP      
                  |L2.172|
0000ac  bf00              NOP                            ;602
;;;663    	}
;;;664    }
0000ae  bd10              POP      {r4,pc}
;;;665    
                          ENDP


                          AREA ||i.handle_super_key||, CODE, READONLY, ALIGN=1

                  handle_super_key PROC
;;;484    
;;;485    static void handle_super_key(matrix_t* matrix)
000000  b570              PUSH     {r4-r6,lr}
;;;486    {
000002  4604              MOV      r4,r0
;;;487    	uint8_t i;
;;;488    	
;;;489    	for(i = 0; i < 8; ++i)
000004  2500              MOVS     r5,#0
000006  e019              B        |L3.60|
                  |L3.8|
;;;490    	{
;;;491    		if(get_key(&(matrix->buf), 0xE0 + i))
000008  4628              MOV      r0,r5
00000a  30e0              ADDS     r0,r0,#0xe0
00000c  b2c1              UXTB     r1,r0
00000e  4620              MOV      r0,r4
000010  304e              ADDS     r0,r0,#0x4e
000012  f7fffffe          BL       get_key
000016  2800              CMP      r0,#0
000018  d00e              BEQ      |L3.56|
;;;492    		{
;;;493    			key_up(&(matrix->buf), 0xE0 + i);
00001a  4628              MOV      r0,r5
00001c  30e0              ADDS     r0,r0,#0xe0
00001e  b2c1              UXTB     r1,r0
000020  4620              MOV      r0,r4
000022  304e              ADDS     r0,r0,#0x4e
000024  f7fffffe          BL       key_up
;;;494    			matrix->send[0] |= 1 << i;
000028  209a              MOVS     r0,#0x9a
00002a  5d00              LDRB     r0,[r0,r4]
00002c  2101              MOVS     r1,#1
00002e  40a9              LSLS     r1,r1,r5
000030  4308              ORRS     r0,r0,r1
000032  b2c1              UXTB     r1,r0
000034  209a              MOVS     r0,#0x9a
000036  5501              STRB     r1,[r0,r4]
                  |L3.56|
000038  1c68              ADDS     r0,r5,#1              ;489
00003a  b2c5              UXTB     r5,r0                 ;489
                  |L3.60|
00003c  2d08              CMP      r5,#8                 ;489
00003e  dbe3              BLT      |L3.8|
;;;495    		}
;;;496    	}
;;;497    }
000040  bd70              POP      {r4-r6,pc}
;;;498    
                          ENDP


                          AREA ||i.hotKey||, CODE, READONLY, ALIGN=2

                  hotKey PROC
;;;434    
;;;435    void hotKey(matrix_t* matrix)
000000  b570              PUSH     {r4-r6,lr}
;;;436    {
000002  4604              MOV      r4,r0
;;;437    	static uint8_t lock_flag = 0x00;
;;;438    		
;;;439    	if(get_key(&(matrix->buf), KEY_FN))
000004  21af              MOVS     r1,#0xaf
000006  4620              MOV      r0,r4
000008  304e              ADDS     r0,r0,#0x4e
00000a  f7fffffe          BL       get_key
00000e  2800              CMP      r0,#0
000010  d04e              BEQ      |L4.176|
;;;440    	{
;;;441    		/*抬起FN键*/
;;;442    		key_up(&(matrix->buf), KEY_FN);
000012  21af              MOVS     r1,#0xaf
000014  4620              MOV      r0,r4
000016  304e              ADDS     r0,r0,#0x4e
000018  f7fffffe          BL       key_up
;;;443    		
;;;444    		/*FN+ESC Fn锁切换判断*/
;;;445    		if(get_key(&(matrix->buf), KEY_ESC) && !lock_flag)
00001c  2129              MOVS     r1,#0x29
00001e  4620              MOV      r0,r4
000020  304e              ADDS     r0,r0,#0x4e
000022  f7fffffe          BL       get_key
000026  2800              CMP      r0,#0
000028  d014              BEQ      |L4.84|
00002a  4829              LDR      r0,|L4.208|
00002c  7800              LDRB     r0,[r0,#0]  ; lock_flag
00002e  2800              CMP      r0,#0
000030  d110              BNE      |L4.84|
;;;446    		{
;;;447    			lock_flag = 0x01;
000032  2001              MOVS     r0,#1
000034  4926              LDR      r1,|L4.208|
000036  7008              STRB     r0,[r1,#0]
;;;448    			matrix->fn_led_status ^= 1;
000038  208e              MOVS     r0,#0x8e
00003a  5d00              LDRB     r0,[r0,r4]
00003c  2101              MOVS     r1,#1
00003e  4048              EORS     r0,r0,r1
000040  218e              MOVS     r1,#0x8e
000042  5508              STRB     r0,[r1,r4]
;;;449    			/*操作FN指示灯*/
;;;450    			GPIO_WriteBit(FN_PORT, GPIO_Pin_13, (BitAction)(matrix->fn_led_status));
000044  208e              MOVS     r0,#0x8e
000046  5d02              LDRB     r2,[r0,r4]
000048  2101              MOVS     r1,#1
00004a  0349              LSLS     r1,r1,#13
00004c  4821              LDR      r0,|L4.212|
00004e  f7fffffe          BL       GPIO_WriteBit
000052  e00d              B        |L4.112|
                  |L4.84|
;;;451    			
;;;452    		}else if(get_key(&(matrix->buf), KEY_ESC) == 0x00 && lock_flag)
000054  2129              MOVS     r1,#0x29
000056  4620              MOV      r0,r4
000058  304e              ADDS     r0,r0,#0x4e
00005a  f7fffffe          BL       get_key
00005e  2800              CMP      r0,#0
000060  d106              BNE      |L4.112|
000062  481b              LDR      r0,|L4.208|
000064  7800              LDRB     r0,[r0,#0]  ; lock_flag
000066  2800              CMP      r0,#0
000068  d002              BEQ      |L4.112|
;;;453    		{
;;;454    			lock_flag = 0x00;
00006a  2000              MOVS     r0,#0
00006c  4918              LDR      r1,|L4.208|
00006e  7008              STRB     r0,[r1,#0]
                  |L4.112|
;;;455    		}
;;;456    		
;;;457    		key_up(&(matrix->buf), KEY_ESC);
000070  2129              MOVS     r1,#0x29
000072  4620              MOV      r0,r4
000074  304e              ADDS     r0,r0,#0x4e
000076  f7fffffe          BL       key_up
;;;458    		
;;;459    		
;;;460    		/*FN组合亮灯, 输出图标功能*/
;;;461    		if(matrix->fn_led_status)
00007a  208e              MOVS     r0,#0x8e
00007c  5d00              LDRB     r0,[r0,r4]
00007e  2800              CMP      r0,#0
000080  d00a              BEQ      |L4.152|
;;;462    		{		
;;;463    			remap_fun(matrix, matrix->remap, matrix->remap_num);
000082  4620              MOV      r0,r4
000084  3090              ADDS     r0,r0,#0x90
000086  f7fffffe          BL       __aeabi_uread4
00008a  4605              MOV      r5,r0
00008c  2094              MOVS     r0,#0x94
00008e  5d02              LDRB     r2,[r0,r4]
000090  4629              MOV      r1,r5
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       remap_fun
                  |L4.152|
;;;464    		}
;;;465    		
;;;466    		/*映射上下左右*/
;;;467    		remap_fun(matrix, matrix->remap2, matrix->remap2_num);
000098  4620              MOV      r0,r4
00009a  3095              ADDS     r0,r0,#0x95
00009c  f7fffffe          BL       __aeabi_uread4
0000a0  4605              MOV      r5,r0
0000a2  2099              MOVS     r0,#0x99
0000a4  5d02              LDRB     r2,[r0,r4]
0000a6  4629              MOV      r1,r5
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       remap_fun
0000ae  e00e              B        |L4.206|
                  |L4.176|
;;;468    	}
;;;469    	else
;;;470    	{
;;;471    		/*没按下FN键*/
;;;472    		if(!(matrix->fn_led_status))
0000b0  208e              MOVS     r0,#0x8e
0000b2  5d00              LDRB     r0,[r0,r4]
0000b4  2800              CMP      r0,#0
0000b6  d10a              BNE      |L4.206|
;;;473    		{
;;;474    			/*单按灭灯,输入图标功能*/
;;;475    			remap_fun(matrix, matrix->remap, matrix->remap_num);
0000b8  4620              MOV      r0,r4
0000ba  3090              ADDS     r0,r0,#0x90
0000bc  f7fffffe          BL       __aeabi_uread4
0000c0  4605              MOV      r5,r0
0000c2  2094              MOVS     r0,#0x94
0000c4  5d02              LDRB     r2,[r0,r4]
0000c6  4629              MOV      r1,r5
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       remap_fun
                  |L4.206|
;;;476    		}
;;;477    	}
;;;478    }
0000ce  bd70              POP      {r4-r6,pc}
;;;479    
                          ENDP

                  |L4.208|
                          DCD      lock_flag
                  |L4.212|
                          DCD      0x48000800

                          AREA ||i.iAP2PacketParseBuffer||, CODE, READONLY, ALIGN=2

                  iAP2PacketParseBuffer PROC
;;;206    
;;;207    int iAP2PacketParseBuffer ( uint8_t*  buffer,
000000  b5fe              PUSH     {r1-r7,lr}
;;;208                                    uint32_t        bufferLen
;;;209                                   )
;;;210    
;;;211    {
000002  4607              MOV      r7,r0
000004  460d              MOV      r5,r1
;;;212    	  uint8_t* pbuffer = buffer;
000006  463c              MOV      r4,r7
;;;213    	  int pbuffer_len =0;
000008  2600              MOVS     r6,#0
;;;214    	  
;;;215    	  SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
00000a  23d7              MOVS     r3,#0xd7
00000c  4aa5              LDR      r2,|L5.676|
00000e  a1a6              ADR      r1,|L5.680|
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       SEGGER_RTT_printf
;;;216    	  if(pbuffer ==NULL)
000016  2c00              CMP      r4,#0
000018  d101              BNE      |L5.30|
;;;217    		return -1;
00001a  1e60              SUBS     r0,r4,#1
                  |L5.28|
;;;218    	  
;;;219    	 SEGGER_RTT_printf(0,"### function=%s line=%d pbuffer_len%d,bufferLen\n",__FUNCTION__,__LINE__,pbuffer_len,bufferLen);
;;;220    		while(pbuffer_len < bufferLen)
;;;221    		{
;;;222    		
;;;223    		SEGGER_RTT_printf(0,"### function=%s line=%d pbuffer_len%d,bufferLen\n",__FUNCTION__,__LINE__,pbuffer_len,bufferLen);
;;;224    		SEGGER_RTT_printf(0,"### function=%s line=%d g_ParseState_t=%d\n",__FUNCTION__,__LINE__,g_ParseState_t);
;;;225    	   switch(g_ParseState_t)
;;;226    		{ 
;;;227    		  case kiAP2PacketParseStateSOP1:
;;;228    				memset(g_usbdata_head,0,9);
;;;229    				buffer_offset = 0;
;;;230    				g_packetLen = 0;
;;;231    			if(*pbuffer==kIAP2PacketSYNC )
;;;232    				{
;;;233    					g_ParseState_t	= kiAP2PacketParseStateSOP2;
;;;234    					g_usbdata_head[kIAP2PacketIndexSYNC]=(uint8)kIAP2PacketSYNC;
;;;235    				}
;;;236    						
;;;237    				
;;;238    				pbuffer++;
;;;239    				break;
;;;240    				
;;;241    		   case kiAP2PacketParseStateSOP2:
;;;242    				 if(*pbuffer==kIAP2PacketSOP)
;;;243    				 {
;;;244    								g_ParseState_t	= kiAP2PacketParseStateLEN1;
;;;245    					 g_usbdata_head[kIAP2PacketIndexSOP]=(uint8)kIAP2PacketSOP;
;;;246    					
;;;247    					 pbuffer++;
;;;248    				 }
;;;249    			else if(*pbuffer==kIAP2PacketSOPOrig )
;;;250    				{
;;;251    						g_ParseState_t	= kiAP2PacketParseStateLEN1;
;;;252    					
;;;253    					g_usbdata_head[kIAP2PacketIndexSOP]=(uint8)kIAP2PacketSOPOrig;
;;;254    					pbuffer++;
;;;255    				}		
;;;256    				else if(*pbuffer==kIAP2PacketSYNC )
;;;257    				{
;;;258    					 g_ParseState_t = kiAP2PacketParseStateSOP1 ; 
;;;259    				}  
;;;260    				
;;;261    				break;
;;;262    			 
;;;263    				case  kiAP2PacketParseStateLEN1:
;;;264    					g_packetLen = (((uint16_t) *pbuffer) << 8);
;;;265    				g_ParseState_t	= kiAP2PacketParseStateLEN2;
;;;266    								g_usbdata_head[kIAP2PacketIndexLEN1]=(uint8)*pbuffer;
;;;267    	
;;;268    				   pbuffer++;
;;;269    					break;
;;;270    				case  kiAP2PacketParseStateLEN2:
;;;271    				g_packetLen += ((uint16_t) *pbuffer);
;;;272    				//g_ParseState_t  = kiAP2PacketParseStateLEN2;
;;;273    				  // pbuffer++;
;;;274    				if (((g_packetLen <= 65535) &&
;;;275    							g_packetLen >= kIAP2PacketHeaderLen) ||
;;;276    							kIAP2PacketDetectLEN == g_packetLen ||
;;;277    							kIAP2PacketDetectNACKLEN == g_packetLen)
;;;278    				{
;;;279    					  g_ParseState_t = kiAP2PacketParseStateCTRL;
;;;280    							g_usbdata_head[kIAP2PacketIndexLEN2]=(uint8)*pbuffer;
;;;281    					   pbuffer++;
;;;282    				}
;;;283    				else
;;;284    				{
;;;285    					 g_ParseState_t = kiAP2PacketParseStateSOP1;
;;;286    				}
;;;287    				
;;;288    					break;
;;;289    				
;;;290    				   case kiAP2PacketParseStateCTRL:
;;;291    						 g_usbdata_head[kIAP2PacketIndexCTRL]=(uint8)*pbuffer;
;;;292    					 pbuffer++;
;;;293    						 g_ParseState_t = kiAP2PacketParseStateSEQ;
;;;294    						 break;
;;;295    					 case kiAP2PacketParseStateSEQ:
;;;296    						 g_usbdata_head[kIAP2PacketIndexCTRL]=(uint8)*pbuffer;
;;;297    						 if(g_usbdata_head[kIAP2PacketIndexLEN1] == 0x20 && g_usbdata_head[kIAP2PacketIndexLEN1] == 0x00 &&
;;;298    									 g_usbdata_head[kIAP2PacketIndexCTRL] == 0xee && 0x10==  *pbuffer	 )
;;;299    							{
;;;300    								//huanghanjing	todo usb package
;;;301    								
;;;302    									 g_ParseState_t = kiAP2PacketParseStateSOP1 ; 
;;;303    								Driver_RxDone(g_usbdata_head,6);
;;;304    							}
;;;305    							else	
;;;306    							{							
;;;307    						 g_ParseState_t = kiAP2PacketParseStateACK;
;;;308    								 g_usbdata_head[kIAP2PacketIndexSEQ] =* pbuffer;
;;;309    							}
;;;310    							 pbuffer++;
;;;311    						 break;
;;;312    					  case kiAP2PacketParseStateACK:
;;;313    						 g_ParseState_t = kiAP2PacketParseStateSESSID;
;;;314    						 g_usbdata_head[kIAP2PacketIndexACK] =* pbuffer;
;;;315    						pbuffer++;
;;;316    						 break;
;;;317    						case kiAP2PacketParseStateSESSID:
;;;318    						{
;;;319    					   
;;;320    						g_ParseState_t = kiAP2PacketParseStateCHK;
;;;321    						 g_usbdata_head[kIAP2PacketIndexSESSID] =* pbuffer;
;;;322    						pbuffer++;
;;;323    							
;;;324    					   
;;;325    					}
;;;326    							break;
;;;327    						case kiAP2PacketParseStateCHK:
;;;328    					
;;;329    									{
;;;330    										 g_usbdata_head[kIAP2PacketIndexCHK] =* pbuffer;
;;;331    										
;;;332    												if(  (g_usbdata_head[kIAP2PacketIndexLEN1] == 0x04 &&
;;;333    											g_usbdata_head[kIAP2PacketIndexLEN1] == 0x00 &&
;;;334    				kIAP2PacketDetectNACKCTRL	== g_usbdata_head[kIAP2PacketIndexCTRL] &&
;;;335    				kIAP2PacketDetectNACKSEQ	== g_usbdata_head[kIAP2PacketIndexSEQ] &&
;;;336    				kIAP2PacketDetectNACKACK	== g_usbdata_head[kIAP2PacketIndexACK]	&&
;;;337    				kIAP2PacketDetectNACKSESSID == g_usbdata_head[kIAP2PacketIndexSESSID]))
;;;338    										{
;;;339    												//huanghanjing	todo usb package
;;;340    											  g_ParseState_t = kiAP2PacketParseStateSOP1 ; 
;;;341    													Driver_RxDone(g_usbdata_head,8);
;;;342    										} 
;;;343    										else{
;;;344    										g_ParseState_t = kiAP2PacketParseStatePAYLOAD;
;;;345    												
;;;346    											g_usbdata->data_size = g_packetLen;
;;;347    											if(g_usbdata->pdata!=NULL)
;;;348    												free(g_usbdata->pdata);
;;;349    										g_usbdata->pdata = malloc(g_usbdata->data_size);
;;;350    											memset(g_usbdata->pdata,0,g_usbdata->data_size);
;;;351    											memcpy(g_usbdata->pdata,g_usbdata_head,9);
;;;352    											buffer_offset = 9;
;;;353    										}
;;;354    								pbuffer++;
;;;355    										
;;;356    						
;;;357    					}
;;;358    						 break;
;;;359    						 
;;;360    					 case kiAP2PacketParseStatePAYLOAD:
;;;361    					{
;;;362    										g_usbdata->pdata[buffer_offset]= *pbuffer;
;;;363    										buffer_offset++;
;;;364    										pbuffer++;
;;;365    										if(buffer_offset == g_packetLen)
;;;366    										{
;;;367    											g_ParseState_t =  kiAP2PacketParseStateSOP1;
;;;368    											Driver_RxDone(g_usbdata->pdata,g_packetLen);
;;;369    											//huanghanjing	todoi
;;;370    											
;;;371    											
;;;372    										}
;;;373    									}
;;;374    					 break;
;;;375    					case kiAP2PacketParseStateFINISH:
;;;376    					case kiAP2PacketParseStateDETECT:
;;;377    					case kiAP2PacketParseStateDETECTBAD:
;;;378    						break;
;;;379    				
;;;380    					 
;;;381    		}
;;;382    		}
;;;383    	
;;;384    	  return 0;
;;;385    	}
00001c  bdfe              POP      {r1-r7,pc}
                  |L5.30|
00001e  23db              MOVS     r3,#0xdb              ;219
000020  4aa0              LDR      r2,|L5.676|
000022  a1a8              ADR      r1,|L5.708|
000024  2000              MOVS     r0,#0                 ;219
000026  9600              STR      r6,[sp,#0]            ;219
000028  9501              STR      r5,[sp,#4]            ;219
00002a  f7fffffe          BL       SEGGER_RTT_printf
00002e  e134              B        |L5.666|
                  |L5.48|
000030  23df              MOVS     r3,#0xdf              ;223
000032  4a9c              LDR      r2,|L5.676|
000034  a1a3              ADR      r1,|L5.708|
000036  2000              MOVS     r0,#0                 ;223
000038  9600              STR      r6,[sp,#0]            ;223
00003a  9501              STR      r5,[sp,#4]            ;223
00003c  f7fffffe          BL       SEGGER_RTT_printf
000040  48ad              LDR      r0,|L5.760|
000042  6800              LDR      r0,[r0,#0]            ;224  ; g_ParseState_t
000044  23e0              MOVS     r3,#0xe0              ;224
000046  4a97              LDR      r2,|L5.676|
000048  a1ac              ADR      r1,|L5.764|
00004a  9000              STR      r0,[sp,#0]            ;224
00004c  2000              MOVS     r0,#0                 ;224
00004e  f7fffffe          BL       SEGGER_RTT_printf
000052  48a9              LDR      r0,|L5.760|
000054  6800              LDR      r0,[r0,#0]            ;225  ; g_ParseState_t
000056  0003              MOVS     r3,r0                 ;225
000058  f7fffffe          BL       __ARM_common_switch8
00005c  0e081c39          DCB      0x0e,0x08,0x1c,0x39
000060  456b7395          DCB      0x45,0x6b,0x73,0x95
000064  9da5fd1b          DCB      0x9d,0xa5,0xfd,0x1b
000068  fbfaf91b          DCB      0xfb,0xfa,0xf9,0x1b
00006c  2109              MOVS     r1,#9                 ;228
00006e  48ae              LDR      r0,|L5.808|
000070  f7fffffe          BL       __aeabi_memclr
000074  2000              MOVS     r0,#0                 ;229
000076  49ad              LDR      r1,|L5.812|
000078  6008              STR      r0,[r1,#0]            ;229  ; buffer_offset
00007a  49ad              LDR      r1,|L5.816|
00007c  8008              STRH     r0,[r1,#0]            ;230
00007e  7820              LDRB     r0,[r4,#0]            ;231
000080  28ff              CMP      r0,#0xff              ;231
000082  d105              BNE      |L5.144|
000084  2001              MOVS     r0,#1                 ;233
000086  499c              LDR      r1,|L5.760|
000088  6008              STR      r0,[r1,#0]            ;233  ; g_ParseState_t
00008a  20ff              MOVS     r0,#0xff              ;234
00008c  49a6              LDR      r1,|L5.808|
00008e  7008              STRB     r0,[r1,#0]            ;234
                  |L5.144|
000090  1c64              ADDS     r4,r4,#1              ;238
000092  e101              B        |L5.664|
000094  7820              LDRB     r0,[r4,#0]            ;242
000096  285a              CMP      r0,#0x5a              ;242
000098  d107              BNE      |L5.170|
00009a  2002              MOVS     r0,#2                 ;244
00009c  4996              LDR      r1,|L5.760|
00009e  6008              STR      r0,[r1,#0]            ;244  ; g_ParseState_t
0000a0  205a              MOVS     r0,#0x5a              ;245
0000a2  49a1              LDR      r1,|L5.808|
0000a4  7048              STRB     r0,[r1,#1]            ;245
0000a6  1c64              ADDS     r4,r4,#1              ;247
0000a8  e010              B        |L5.204|
                  |L5.170|
0000aa  7820              LDRB     r0,[r4,#0]            ;249
0000ac  2855              CMP      r0,#0x55              ;249
0000ae  d107              BNE      |L5.192|
0000b0  2002              MOVS     r0,#2                 ;251
0000b2  4991              LDR      r1,|L5.760|
0000b4  6008              STR      r0,[r1,#0]            ;251  ; g_ParseState_t
0000b6  2055              MOVS     r0,#0x55              ;253
0000b8  499b              LDR      r1,|L5.808|
0000ba  7048              STRB     r0,[r1,#1]            ;253
0000bc  1c64              ADDS     r4,r4,#1              ;254
0000be  e005              B        |L5.204|
                  |L5.192|
0000c0  7820              LDRB     r0,[r4,#0]            ;256
0000c2  28ff              CMP      r0,#0xff              ;256
0000c4  d102              BNE      |L5.204|
0000c6  2000              MOVS     r0,#0                 ;258
0000c8  498b              LDR      r1,|L5.760|
0000ca  6008              STR      r0,[r1,#0]            ;258  ; g_ParseState_t
                  |L5.204|
0000cc  e0e4              B        |L5.664|
0000ce  7820              LDRB     r0,[r4,#0]            ;264
0000d0  0200              LSLS     r0,r0,#8              ;264
0000d2  4997              LDR      r1,|L5.816|
0000d4  8008              STRH     r0,[r1,#0]            ;264
0000d6  2003              MOVS     r0,#3                 ;265
0000d8  4987              LDR      r1,|L5.760|
0000da  6008              STR      r0,[r1,#0]            ;265  ; g_ParseState_t
0000dc  7820              LDRB     r0,[r4,#0]            ;266
0000de  4992              LDR      r1,|L5.808|
0000e0  7088              STRB     r0,[r1,#2]            ;266
0000e2  1c64              ADDS     r4,r4,#1              ;268
0000e4  e0d8              B        |L5.664|
0000e6  7820              LDRB     r0,[r4,#0]            ;271
0000e8  4991              LDR      r1,|L5.816|
0000ea  8809              LDRH     r1,[r1,#0]            ;271  ; g_packetLen
0000ec  1840              ADDS     r0,r0,r1              ;271
0000ee  4990              LDR      r1,|L5.816|
0000f0  8008              STRH     r0,[r1,#0]            ;271
0000f2  4608              MOV      r0,r1                 ;274
0000f4  8800              LDRH     r0,[r0,#0]            ;274  ; g_packetLen
0000f6  498f              LDR      r1,|L5.820|
0000f8  4288              CMP      r0,r1                 ;274
0000fa  dc03              BGT      |L5.260|
0000fc  488c              LDR      r0,|L5.816|
0000fe  8800              LDRH     r0,[r0,#0]            ;275  ; g_packetLen
000100  2809              CMP      r0,#9                 ;275
000102  da0a              BGE      |L5.282|
                  |L5.260|
000104  488a              LDR      r0,|L5.816|
000106  8800              LDRH     r0,[r0,#0]            ;276  ; g_packetLen
000108  2101              MOVS     r1,#1                 ;276
00010a  0249              LSLS     r1,r1,#9              ;276
00010c  4288              CMP      r0,r1                 ;276
00010e  d004              BEQ      |L5.282|
000110  4887              LDR      r0,|L5.816|
000112  8800              LDRH     r0,[r0,#0]            ;277  ; g_packetLen
000114  0049              LSLS     r1,r1,#1              ;277
000116  4288              CMP      r0,r1                 ;277
000118  d107              BNE      |L5.298|
                  |L5.282|
00011a  2004              MOVS     r0,#4                 ;279
00011c  4976              LDR      r1,|L5.760|
00011e  6008              STR      r0,[r1,#0]            ;279  ; g_ParseState_t
000120  7820              LDRB     r0,[r4,#0]            ;280
000122  4981              LDR      r1,|L5.808|
000124  70c8              STRB     r0,[r1,#3]            ;280
000126  1c64              ADDS     r4,r4,#1              ;281
000128  e002              B        |L5.304|
                  |L5.298|
00012a  2000              MOVS     r0,#0                 ;285
00012c  4972              LDR      r1,|L5.760|
00012e  6008              STR      r0,[r1,#0]            ;285  ; g_ParseState_t
                  |L5.304|
000130  e0b2              B        |L5.664|
000132  7820              LDRB     r0,[r4,#0]            ;291
000134  497c              LDR      r1,|L5.808|
000136  7108              STRB     r0,[r1,#4]            ;291
000138  1c64              ADDS     r4,r4,#1              ;292
00013a  2005              MOVS     r0,#5                 ;293
00013c  496e              LDR      r1,|L5.760|
00013e  6008              STR      r0,[r1,#0]            ;293  ; g_ParseState_t
000140  e0aa              B        |L5.664|
000142  7820              LDRB     r0,[r4,#0]            ;296
000144  4978              LDR      r1,|L5.808|
000146  7108              STRB     r0,[r1,#4]            ;296
000148  4608              MOV      r0,r1                 ;297
00014a  7880              LDRB     r0,[r0,#2]            ;297  ; g_usbdata_head
00014c  2820              CMP      r0,#0x20              ;297
00014e  d112              BNE      |L5.374|
000150  4608              MOV      r0,r1                 ;297
000152  7880              LDRB     r0,[r0,#2]            ;297  ; g_usbdata_head
000154  2800              CMP      r0,#0                 ;297
000156  d10e              BNE      |L5.374|
000158  4608              MOV      r0,r1                 ;298
00015a  7900              LDRB     r0,[r0,#4]            ;298  ; g_usbdata_head
00015c  28ee              CMP      r0,#0xee              ;298
00015e  d10a              BNE      |L5.374|
000160  7820              LDRB     r0,[r4,#0]            ;298
000162  2810              CMP      r0,#0x10              ;298
000164  d107              BNE      |L5.374|
000166  2000              MOVS     r0,#0                 ;302
000168  4963              LDR      r1,|L5.760|
00016a  6008              STR      r0,[r1,#0]            ;302  ; g_ParseState_t
00016c  2106              MOVS     r1,#6                 ;303
00016e  486e              LDR      r0,|L5.808|
000170  f7fffffe          BL       Driver_RxDone
000174  e005              B        |L5.386|
                  |L5.374|
000176  2006              MOVS     r0,#6                 ;307
000178  495f              LDR      r1,|L5.760|
00017a  6008              STR      r0,[r1,#0]            ;307  ; g_ParseState_t
00017c  7820              LDRB     r0,[r4,#0]            ;308
00017e  496a              LDR      r1,|L5.808|
000180  7148              STRB     r0,[r1,#5]            ;308
                  |L5.386|
000182  1c64              ADDS     r4,r4,#1              ;310
000184  e088              B        |L5.664|
000186  2007              MOVS     r0,#7                 ;313
000188  495b              LDR      r1,|L5.760|
00018a  6008              STR      r0,[r1,#0]            ;313  ; g_ParseState_t
00018c  7820              LDRB     r0,[r4,#0]            ;314
00018e  4966              LDR      r1,|L5.808|
000190  7188              STRB     r0,[r1,#6]            ;314
000192  1c64              ADDS     r4,r4,#1              ;315
000194  e080              B        |L5.664|
000196  2008              MOVS     r0,#8                 ;320
000198  4957              LDR      r1,|L5.760|
00019a  6008              STR      r0,[r1,#0]            ;320  ; g_ParseState_t
00019c  7820              LDRB     r0,[r4,#0]            ;321
00019e  4962              LDR      r1,|L5.808|
0001a0  71c8              STRB     r0,[r1,#7]            ;321
0001a2  1c64              ADDS     r4,r4,#1              ;322
0001a4  e078              B        |L5.664|
0001a6  7820              LDRB     r0,[r4,#0]            ;330
0001a8  495f              LDR      r1,|L5.808|
0001aa  7208              STRB     r0,[r1,#8]            ;330
0001ac  4608              MOV      r0,r1                 ;332
0001ae  7880              LDRB     r0,[r0,#2]            ;332  ; g_usbdata_head
0001b0  2804              CMP      r0,#4                 ;332
0001b2  d11b              BNE      |L5.492|
0001b4  4608              MOV      r0,r1                 ;333
0001b6  7880              LDRB     r0,[r0,#2]            ;333  ; g_usbdata_head
0001b8  2800              CMP      r0,#0                 ;333
0001ba  d117              BNE      |L5.492|
0001bc  4608              MOV      r0,r1                 ;334
0001be  7900              LDRB     r0,[r0,#4]            ;334  ; g_usbdata_head
0001c0  2802              CMP      r0,#2                 ;334
0001c2  d113              BNE      |L5.492|
0001c4  4608              MOV      r0,r1                 ;335
0001c6  7940              LDRB     r0,[r0,#5]            ;335  ; g_usbdata_head
0001c8  2804              CMP      r0,#4                 ;335
0001ca  d10f              BNE      |L5.492|
0001cc  4608              MOV      r0,r1                 ;336
0001ce  7980              LDRB     r0,[r0,#6]            ;336  ; g_usbdata_head
0001d0  28ee              CMP      r0,#0xee              ;336
0001d2  d10b              BNE      |L5.492|
0001d4  4608              MOV      r0,r1                 ;337
0001d6  79c0              LDRB     r0,[r0,#7]            ;337  ; g_usbdata_head
0001d8  2808              CMP      r0,#8                 ;337
0001da  d107              BNE      |L5.492|
0001dc  2000              MOVS     r0,#0                 ;340
0001de  4946              LDR      r1,|L5.760|
0001e0  6008              STR      r0,[r1,#0]            ;340  ; g_ParseState_t
0001e2  2108              MOVS     r1,#8                 ;341
0001e4  4850              LDR      r0,|L5.808|
0001e6  f7fffffe          BL       Driver_RxDone
0001ea  e02e              B        |L5.586|
                  |L5.492|
0001ec  2009              MOVS     r0,#9                 ;344
0001ee  4942              LDR      r1,|L5.760|
0001f0  6008              STR      r0,[r1,#0]            ;344  ; g_ParseState_t
0001f2  484f              LDR      r0,|L5.816|
0001f4  8800              LDRH     r0,[r0,#0]            ;346  ; g_packetLen
0001f6  b200              SXTH     r0,r0                 ;346
0001f8  494f              LDR      r1,|L5.824|
0001fa  6809              LDR      r1,[r1,#0]            ;346  ; g_usbdata
0001fc  8108              STRH     r0,[r1,#8]            ;346
0001fe  484e              LDR      r0,|L5.824|
000200  6800              LDR      r0,[r0,#0]            ;347  ; g_usbdata
000202  68c0              LDR      r0,[r0,#0xc]          ;347
000204  2800              CMP      r0,#0                 ;347
000206  d004              BEQ      |L5.530|
000208  494b              LDR      r1,|L5.824|
00020a  6809              LDR      r1,[r1,#0]            ;348  ; g_usbdata
00020c  68c8              LDR      r0,[r1,#0xc]          ;348
00020e  f7fffffe          BL       free
                  |L5.530|
000212  4949              LDR      r1,|L5.824|
000214  6809              LDR      r1,[r1,#0]            ;349  ; g_usbdata
000216  2008              MOVS     r0,#8                 ;349
000218  5e08              LDRSH    r0,[r1,r0]            ;349
00021a  f7fffffe          BL       malloc
00021e  4946              LDR      r1,|L5.824|
000220  6809              LDR      r1,[r1,#0]            ;349  ; g_usbdata
000222  60c8              STR      r0,[r1,#0xc]          ;349
000224  4a44              LDR      r2,|L5.824|
000226  6812              LDR      r2,[r2,#0]            ;350  ; g_usbdata
000228  2108              MOVS     r1,#8                 ;350
00022a  5e51              LDRSH    r1,[r2,r1]            ;350
00022c  4a42              LDR      r2,|L5.824|
00022e  6812              LDR      r2,[r2,#0]            ;350  ; g_usbdata
000230  68d0              LDR      r0,[r2,#0xc]          ;350
000232  f7fffffe          BL       __aeabi_memclr
000236  4940              LDR      r1,|L5.824|
000238  6809              LDR      r1,[r1,#0]            ;351  ; g_usbdata
00023a  2209              MOVS     r2,#9                 ;351
00023c  68c8              LDR      r0,[r1,#0xc]          ;351
00023e  493a              LDR      r1,|L5.808|
000240  f7fffffe          BL       __aeabi_memcpy
000244  2009              MOVS     r0,#9                 ;352
000246  4939              LDR      r1,|L5.812|
000248  6008              STR      r0,[r1,#0]            ;352  ; buffer_offset
                  |L5.586|
00024a  1c64              ADDS     r4,r4,#1              ;354
00024c  e024              B        |L5.664|
00024e  e022              B        |L5.662|
000250  e020              B        |L5.660|
000252  e01e              B        |L5.658|
000254  e7ff              B        |L5.598|
                  |L5.598|
000256  7820              LDRB     r0,[r4,#0]            ;362
000258  4937              LDR      r1,|L5.824|
00025a  6809              LDR      r1,[r1,#0]            ;362  ; g_usbdata
00025c  68c9              LDR      r1,[r1,#0xc]          ;362
00025e  4a33              LDR      r2,|L5.812|
000260  6812              LDR      r2,[r2,#0]            ;362  ; buffer_offset
000262  5488              STRB     r0,[r1,r2]            ;362
000264  4831              LDR      r0,|L5.812|
000266  6800              LDR      r0,[r0,#0]            ;363  ; buffer_offset
000268  1c40              ADDS     r0,r0,#1              ;363
00026a  4930              LDR      r1,|L5.812|
00026c  6008              STR      r0,[r1,#0]            ;363  ; buffer_offset
00026e  1c64              ADDS     r4,r4,#1              ;364
000270  4608              MOV      r0,r1                 ;365
000272  6800              LDR      r0,[r0,#0]            ;365  ; buffer_offset
000274  492e              LDR      r1,|L5.816|
000276  8809              LDRH     r1,[r1,#0]            ;365  ; g_packetLen
000278  4288              CMP      r0,r1                 ;365
00027a  d109              BNE      |L5.656|
00027c  2000              MOVS     r0,#0                 ;367
00027e  491e              LDR      r1,|L5.760|
000280  6008              STR      r0,[r1,#0]            ;367  ; g_ParseState_t
000282  492d              LDR      r1,|L5.824|
000284  6809              LDR      r1,[r1,#0]            ;368  ; g_usbdata
000286  68c8              LDR      r0,[r1,#0xc]          ;368
000288  4929              LDR      r1,|L5.816|
00028a  8809              LDRH     r1,[r1,#0]            ;368  ; g_packetLen
00028c  f7fffffe          BL       Driver_RxDone
                  |L5.656|
000290  e002              B        |L5.664|
                  |L5.658|
000292  bf00              NOP                            ;376
                  |L5.660|
000294  bf00              NOP                            ;377
                  |L5.662|
000296  bf00              NOP                            ;378
                  |L5.664|
000298  bf00              NOP                            ;239
                  |L5.666|
00029a  42ae              CMP      r6,r5                 ;220
00029c  d200              BCS      |L5.672|
00029e  e6c7              B        |L5.48|
                  |L5.672|
0002a0  2000              MOVS     r0,#0                 ;384
0002a2  e6bb              B        |L5.28|
;;;386    
                          ENDP

                  |L5.676|
                          DCD      __FUNCTION__
                  |L5.680|
0002a8  23232320          DCB      "### function=%s line=%d\n",0
0002ac  66756e63
0002b0  74696f6e
0002b4  3d257320
0002b8  6c696e65
0002bc  3d25640a
0002c0  00      
0002c1  00                DCB      0
0002c2  00                DCB      0
0002c3  00                DCB      0
                  |L5.708|
0002c4  23232320          DCB      "### function=%s line=%d pbuffer_len%d,bufferLen\n",0
0002c8  66756e63
0002cc  74696f6e
0002d0  3d257320
0002d4  6c696e65
0002d8  3d256420
0002dc  70627566
0002e0  6665725f
0002e4  6c656e25
0002e8  642c6275
0002ec  66666572
0002f0  4c656e0a
0002f4  00      
0002f5  00                DCB      0
0002f6  00                DCB      0
0002f7  00                DCB      0
                  |L5.760|
                          DCD      g_ParseState_t
                  |L5.764|
0002fc  23232320          DCB      "### function=%s line=%d g_ParseState_t=%d\n",0
000300  66756e63
000304  74696f6e
000308  3d257320
00030c  6c696e65
000310  3d256420
000314  675f5061
000318  72736553
00031c  74617465
000320  5f743d25
000324  640a00  
000327  00                DCB      0
                  |L5.808|
                          DCD      g_usbdata_head
                  |L5.812|
                          DCD      buffer_offset
                  |L5.816|
                          DCD      g_packetLen
                  |L5.820|
                          DCD      0x0000ffff
                  |L5.824|
                          DCD      g_usbdata

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;713    int b_config = 0;
;;;714    int main(void)
000000  b08e              SUB      sp,sp,#0x38
;;;715    {
;;;716    	I2C_InitTypeDef* g_I2C_1_InitStruct;
;;;717        int usb_receive_len;
;;;718    	 uint8 data_offset=0;
000002  bf00              NOP      
;;;719    	 ListUsbData * usbdata;
;;;720    
;;;721    
;;;722    	
;;;723    	Systick_Init();
000004  f7fffffe          BL       Systick_Init
;;;724    	I2C_DeInit(I2C1);
000008  4864              LDR      r0,|L6.412|
00000a  f7fffffe          BL       I2C_DeInit
;;;725    	I2C_StructInit(g_I2C_1_InitStruct);
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       I2C_StructInit
;;;726    	I2C_Init(I2C1,g_I2C_1_InitStruct);
000014  4629              MOV      r1,r5
000016  4861              LDR      r0,|L6.412|
000018  f7fffffe          BL       I2C_Init
;;;727    	I2C_Cmd(I2C1,ENABLE);
00001c  2101              MOVS     r1,#1
00001e  485f              LDR      r0,|L6.412|
000020  f7fffffe          BL       I2C_Cmd
;;;728    	USB_Init();
000024  f7fffffe          BL       USB_Init
;;;729    
;;;730    
;;;731    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
000028  2101              MOVS     r1,#1
00002a  0448              LSLS     r0,r1,#17
00002c  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;732    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
000030  2101              MOVS     r1,#1
000032  0488              LSLS     r0,r1,#18
000034  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;733    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
000038  2101              MOVS     r1,#1
00003a  04c8              LSLS     r0,r1,#19
00003c  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;734    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
000040  2101              MOVS     r1,#1
000042  0588              LSLS     r0,r1,#22
000044  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;735    	
;;;736    	
;;;737    	SEGGER_RTT_printf(0, "g2g start\n");
000048  a155              ADR      r1,|L6.416|
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       SEGGER_RTT_printf
;;;738    	ListUsbData_Init(g_usbdata);
000050  4856              LDR      r0,|L6.428|
000052  6800              LDR      r0,[r0,#0]  ; g_usbdata
000054  f7fffffe          BL       ListUsbData_Init
;;;739    	
;;;740    	ListUsbData_Init(g_usbdata_list);
000058  4855              LDR      r0,|L6.432|
00005a  6800              LDR      r0,[r0,#0]  ; g_usbdata_list
00005c  f7fffffe          BL       ListUsbData_Init
;;;741    	
;;;742       while(1)
000060  e003              B        |L6.106|
                  |L6.98|
;;;743       	{
;;;744       	  SysTick_Delay_Ms(5000);
000062  4854              LDR      r0,|L6.436|
000064  f7fffffe          BL       SysTick_Delay_Ms
;;;745    			break;
000068  e000              B        |L6.108|
                  |L6.106|
00006a  e7fa              B        |L6.98|
                  |L6.108|
00006c  bf00              NOP      
;;;746       	}
;;;747    
;;;748       
;;;749       SEGGER_RTT_printf(0,"xxxx b_config == 1\n");
00006e  a152              ADR      r1,|L6.440|
000070  2000              MOVS     r0,#0
000072  f7fffffe          BL       SEGGER_RTT_printf
;;;750    	//USB_Init();
;;;751    //	ListUsbData_Init(g_usbdata);
;;;752    	
;;;753    	//	I2C_Init(I2C_TypeDef * I2Cx,I2C_InitTypeDef * I2C_InitStruct)
;;;754    		
;;;755    		//Test_IO_Config();
;;;756    		
;;;757    		//GPIO_SetBits(GPIOA,GPIO_Pin_5);
;;;758    		
;;;759    		
;;;760    		Iap2CtrlSession g_Iap2CtrlSession;
;;;761    		Iap2Link_Init(g_pIap2Link, (Iap2LinkTransferFn)Driver_TransferStart);
000076  4955              LDR      r1,|L6.460|
000078  4855              LDR      r0,|L6.464|
00007a  6800              LDR      r0,[r0,#0]  ; g_pIap2Link
00007c  f7fffffe          BL       Iap2Link_Init
;;;762    		Iap2CtrlSession_Init(&g_Iap2CtrlSession);
000080  a801              ADD      r0,sp,#4
000082  f7fffffe          BL       Iap2CtrlSession_Init
;;;763    		//Iap2Link_RegSession(g_pIap2Link, &g_Iap2CtrlSession);
;;;764    		Iap2Link_Start(g_pIap2Link);
000086  4852              LDR      r0,|L6.464|
000088  6800              LDR      r0,[r0,#0]  ; g_pIap2Link
00008a  f7fffffe          BL       Iap2Link_Start
;;;765    
;;;766    
;;;767    	
;;;768    	while (1)
00008e  e083              B        |L6.408|
                  |L6.144|
;;;769    	{
;;;770    		SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
000090  4b50              LDR      r3,|L6.468|
000092  4a51              LDR      r2,|L6.472|
000094  a151              ADR      r1,|L6.476|
000096  2000              MOVS     r0,#0
000098  f7fffffe          BL       SEGGER_RTT_printf
;;;771    
;;;772    	//  Iap2Link_Start(g_pIap2Link);
;;;773    	
;;;774    
;;;775    		Driver_Check();
00009c  f7fffffe          BL       Driver_Check
;;;776    				SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
0000a0  2361              MOVS     r3,#0x61
0000a2  00db              LSLS     r3,r3,#3
0000a4  4a4c              LDR      r2,|L6.472|
0000a6  a14d              ADR      r1,|L6.476|
0000a8  2000              MOVS     r0,#0
0000aa  f7fffffe          BL       SEGGER_RTT_printf
;;;777    		data_offset =0;
0000ae  bf00              NOP      
;;;778    				SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
0000b0  4b48              LDR      r3,|L6.468|
0000b2  3308              ADDS     r3,r3,#8
0000b4  4a48              LDR      r2,|L6.472|
0000b6  a149              ADR      r1,|L6.476|
0000b8  2000              MOVS     r0,#0
0000ba  f7fffffe          BL       SEGGER_RTT_printf
;;;779    		memset(g_hid_report,0,6);
0000be  2106              MOVS     r1,#6
0000c0  484d              LDR      r0,|L6.504|
0000c2  f7fffffe          BL       __aeabi_memclr4
;;;780    				SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
0000c6  23c3              MOVS     r3,#0xc3
0000c8  009b              LSLS     r3,r3,#2
0000ca  4a43              LDR      r2,|L6.472|
0000cc  a143              ADR      r1,|L6.476|
0000ce  2000              MOVS     r0,#0
0000d0  f7fffffe          BL       SEGGER_RTT_printf
;;;781    		Iap2Link_Run(g_pIap2Link);
0000d4  483e              LDR      r0,|L6.464|
0000d6  6800              LDR      r0,[r0,#0]  ; g_pIap2Link
0000d8  f7fffffe          BL       Iap2Link_Run
;;;782    		SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
0000dc  4b3d              LDR      r3,|L6.468|
0000de  330c              ADDS     r3,r3,#0xc
0000e0  4a3d              LDR      r2,|L6.472|
0000e2  a13e              ADR      r1,|L6.476|
0000e4  2000              MOVS     r0,#0
0000e6  f7fffffe          BL       SEGGER_RTT_printf
;;;783    
;;;784    				//usb_receive_len = USB_EP_Rx(1,receive_data_buf,512);
;;;785    				usbdata = ListUsbData_Remove(g_usbdata_list);
0000ea  4831              LDR      r0,|L6.432|
0000ec  6800              LDR      r0,[r0,#0]  ; g_usbdata_list
0000ee  f7fffffe          BL       ListUsbData_Remove
0000f2  4604              MOV      r4,r0
;;;786    						SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
0000f4  4b37              LDR      r3,|L6.468|
0000f6  3310              ADDS     r3,r3,#0x10
0000f8  4a37              LDR      r2,|L6.472|
0000fa  a138              ADR      r1,|L6.476|
0000fc  2000              MOVS     r0,#0
0000fe  f7fffffe          BL       SEGGER_RTT_printf
;;;787    		if(usbdata!=NULL )
000102  2c00              CMP      r4,#0
000104  d026              BEQ      |L6.340|
;;;788    			{
;;;789    			
;;;790    			SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
000106  4b33              LDR      r3,|L6.468|
000108  3314              ADDS     r3,r3,#0x14
00010a  4a33              LDR      r2,|L6.472|
00010c  a133              ADR      r1,|L6.476|
00010e  2000              MOVS     r0,#0
000110  f7fffffe          BL       SEGGER_RTT_printf
;;;791    			iAP2PacketParseBuffer(usbdata->pdata,usbdata->data_size);
000114  2108              MOVS     r1,#8
000116  5e61              LDRSH    r1,[r4,r1]
000118  68e0              LDR      r0,[r4,#0xc]
00011a  f7fffffe          BL       iAP2PacketParseBuffer
;;;792    					SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
00011e  2363              MOVS     r3,#0x63
000120  00db              LSLS     r3,r3,#3
000122  4a2d              LDR      r2,|L6.472|
000124  a12d              ADR      r1,|L6.476|
000126  2000              MOVS     r0,#0
000128  f7fffffe          BL       SEGGER_RTT_printf
;;;793    			free(usbdata->pdata);
00012c  68e0              LDR      r0,[r4,#0xc]
00012e  f7fffffe          BL       free
;;;794    					SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
000132  4b28              LDR      r3,|L6.468|
000134  3318              ADDS     r3,r3,#0x18
000136  4a28              LDR      r2,|L6.472|
000138  a128              ADR      r1,|L6.476|
00013a  2000              MOVS     r0,#0
00013c  f7fffffe          BL       SEGGER_RTT_printf
;;;795    			free(usbdata);
000140  4620              MOV      r0,r4
000142  f7fffffe          BL       free
;;;796    					SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
000146  23c7              MOVS     r3,#0xc7
000148  009b              LSLS     r3,r3,#2
00014a  4a23              LDR      r2,|L6.472|
00014c  a123              ADR      r1,|L6.476|
00014e  2000              MOVS     r0,#0
000150  f7fffffe          BL       SEGGER_RTT_printf
                  |L6.340|
;;;797    			}
;;;798    
;;;799    				SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
000154  4b1f              LDR      r3,|L6.468|
000156  331d              ADDS     r3,r3,#0x1d
000158  4a1f              LDR      r2,|L6.472|
00015a  a120              ADR      r1,|L6.476|
00015c  2000              MOVS     r0,#0
00015e  f7fffffe          BL       SEGGER_RTT_printf
;;;800    		//SysTick_Delay_Ms(1000);
;;;801    		if(!g_start_key)
000162  4826              LDR      r0,|L6.508|
000164  7800              LDRB     r0,[r0,#0]  ; g_start_key
000166  2800              CMP      r0,#0
000168  d100              BNE      |L6.364|
;;;802    				continue;
00016a  e015              B        |L6.408|
                  |L6.364|
;;;803    
;;;804    		matrix_scan_key(&matrix);
00016c  4824              LDR      r0,|L6.512|
00016e  f7fffffe          BL       matrix_scan_key
;;;805    		matrix_scan_again(&matrix);
000172  4823              LDR      r0,|L6.512|
000174  f7fffffe          BL       matrix_scan_again
;;;806    		matrix_key_handle(&matrix);
000178  4821              LDR      r0,|L6.512|
00017a  f7fffffe          BL       matrix_key_handle
;;;807    
;;;808    		/*处理热键*/
;;;809    		hotKey(&matrix);
00017e  4820              LDR      r0,|L6.512|
000180  f7fffffe          BL       hotKey
;;;810    		
;;;811    		/*KeyCode处理格式*/
;;;812    		build_keycode(&matrix);
000184  481e              LDR      r0,|L6.512|
000186  f7fffffe          BL       build_keycode
;;;813    		
;;;814    		/*发送按键码*/
;;;815    		send_keycode(&matrix);
00018a  481d              LDR      r0,|L6.512|
00018c  f7fffffe          BL       send_keycode
;;;816    		
;;;817    		/*发送多媒体键*/
;;;818    		send_acpi_media_keycode(&matrix);
000190  481b              LDR      r0,|L6.512|
000192  f7fffffe          BL       send_acpi_media_keycode
000196  bf00              NOP                            ;802
                  |L6.408|
000198  e77a              B        |L6.144|
;;;819    		
;;;820    	}
;;;821    }
;;;822    
                          ENDP

00019a  0000              DCW      0x0000
                  |L6.412|
                          DCD      0x40005400
                  |L6.416|
0001a0  67326720          DCB      "g2g start\n",0
0001a4  73746172
0001a8  740a00  
0001ab  00                DCB      0
                  |L6.428|
                          DCD      g_usbdata
                  |L6.432|
                          DCD      g_usbdata_list
                  |L6.436|
                          DCD      0x00001388
                  |L6.440|
0001b8  78787878          DCB      "xxxx b_config == 1\n",0
0001bc  20625f63
0001c0  6f6e6669
0001c4  67203d3d
0001c8  20310a00
                  |L6.460|
                          DCD      Driver_TransferStart
                  |L6.464|
                          DCD      g_pIap2Link
                  |L6.468|
                          DCD      0x00000302
                  |L6.472|
                          DCD      |symbol_number.40|
                  |L6.476|
0001dc  23232320          DCB      "### function=%s line=%d\n",0
0001e0  66756e63
0001e4  74696f6e
0001e8  3d257320
0001ec  6c696e65
0001f0  3d25640a
0001f4  00      
0001f5  00                DCB      0
0001f6  00                DCB      0
0001f7  00                DCB      0
                  |L6.504|
                          DCD      g_hid_report
                  |L6.508|
                          DCD      g_start_key
                  |L6.512|
                          DCD      matrix

                          AREA ||i.remap_fun||, CODE, READONLY, ALIGN=1

                  remap_fun PROC
;;;416    
;;;417    static void remap_fun(matrix_t* matrix, remap_t* remap, uint8_t num)
000000  b5f8              PUSH     {r3-r7,lr}
;;;418    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;419    	int i;
;;;420    	for(i = 0; i < num; ++i)
000008  2400              MOVS     r4,#0
00000a  e015              B        |L7.56|
                  |L7.12|
;;;421    	{
;;;422    		if(get_key(&(matrix->buf), remap[i].key))
00000c  0060              LSLS     r0,r4,#1
00000e  5c31              LDRB     r1,[r6,r0]
000010  4628              MOV      r0,r5
000012  304e              ADDS     r0,r0,#0x4e
000014  f7fffffe          BL       get_key
000018  2800              CMP      r0,#0
00001a  d00c              BEQ      |L7.54|
;;;423    		{
;;;424    			key_up(&(matrix->buf), remap[i].key);
00001c  0060              LSLS     r0,r4,#1
00001e  5c31              LDRB     r1,[r6,r0]
000020  4628              MOV      r0,r5
000022  304e              ADDS     r0,r0,#0x4e
000024  f7fffffe          BL       key_up
;;;425    			key_down(&(matrix->buf), remap[i].remap);
000028  0060              LSLS     r0,r4,#1
00002a  1980              ADDS     r0,r0,r6
00002c  7841              LDRB     r1,[r0,#1]
00002e  4628              MOV      r0,r5
000030  304e              ADDS     r0,r0,#0x4e
000032  f7fffffe          BL       key_down
                  |L7.54|
000036  1c64              ADDS     r4,r4,#1              ;420
                  |L7.56|
000038  42bc              CMP      r4,r7                 ;420
00003a  dbe7              BLT      |L7.12|
;;;426    		}
;;;427    	}
;;;428    }
00003c  bdf8              POP      {r3-r7,pc}
;;;429    
                          ENDP


                          AREA ||i.send_acpi_media_keycode||, CODE, READONLY, ALIGN=2

                  send_acpi_media_keycode PROC
;;;669    
;;;670    void send_acpi_media_keycode(matrix_t* matrix)
000000  b538              PUSH     {r3-r5,lr}
;;;671    {
000002  4604              MOV      r4,r0
;;;672    	uint8_t media_buffer[3] = {0x03, 0x00, 0x00};
000004  a010              ADR      r0,|L8.72|
000006  6800              LDR      r0,[r0,#0]
000008  9000              STR      r0,[sp,#0]
;;;673    		
;;;674    	//发送多媒体键，ACPI键
;;;675    	if(matrix->acpi_send_flag == 0x01)
00000a  20a4              MOVS     r0,#0xa4
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2801              CMP      r0,#1
000010  d10d              BNE      |L8.46|
;;;676    	{
;;;677    		//发送多媒体键
;;;678    		build_media_key(matrix, media_buffer, sizeof(media_buffer));
000012  2203              MOVS     r2,#3
000014  4669              MOV      r1,sp
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       build_media_key
;;;679    		
;;;680    		//SEGGER_RTT_printf(0, "%02x %02x %02x %02x\n", matrix->acpi_send[0], media_buffer[0], media_buffer[1], media_buffer[2]);
;;;681    		
;;;682    		USB_EP_Tx(ep_consumer, media_buffer, sizeof(media_buffer));
00001c  2203              MOVS     r2,#3
00001e  4669              MOV      r1,sp
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       USB_EP_Tx
;;;683    		matrix->acpi_send_flag = 0x02;
000026  2102              MOVS     r1,#2
000028  20a4              MOVS     r0,#0xa4
00002a  5501              STRB     r1,[r0,r4]
00002c  e00b              B        |L8.70|
                  |L8.46|
;;;684    		
;;;685    	}
;;;686    	else if(matrix->acpi_send_flag == 0x03)
00002e  20a4              MOVS     r0,#0xa4
000030  5d00              LDRB     r0,[r0,r4]
000032  2803              CMP      r0,#3
000034  d107              BNE      |L8.70|
;;;687    	{
;;;688    		//发送抬起包
;;;689    		USB_EP_Tx(ep_consumer, media_buffer, sizeof(media_buffer));
000036  2203              MOVS     r2,#3
000038  4669              MOV      r1,sp
00003a  2002              MOVS     r0,#2
00003c  f7fffffe          BL       USB_EP_Tx
;;;690    		matrix->acpi_send_flag = 0x00;
000040  2100              MOVS     r1,#0
000042  20a4              MOVS     r0,#0xa4
000044  5501              STRB     r1,[r0,r4]
                  |L8.70|
;;;691    	}
;;;692    	
;;;693    }
000046  bd38              POP      {r3-r5,pc}
;;;694    
                          ENDP

                  |L8.72|
000048  0300              DCB      3,0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.send_keycode||, CODE, READONLY, ALIGN=1

                  send_keycode PROC
;;;555    
;;;556    void send_keycode(matrix_t* matrix)
000000  b57c              PUSH     {r2-r6,lr}
;;;557    {
000002  4604              MOV      r4,r0
;;;558    	uint8_t flag = 0;
000004  2500              MOVS     r5,#0
;;;559    	
;;;560    	for(uint8_t i = 0; i < 8; ++i)
000006  2000              MOVS     r0,#0
000008  e00a              B        |L9.32|
                  |L9.10|
;;;561    	{
;;;562    		if(matrix->send_last[i] == matrix->send[i])
00000a  4621              MOV      r1,r4
00000c  31a5              ADDS     r1,r1,#0xa5
00000e  5c0a              LDRB     r2,[r1,r0]
000010  390b              SUBS     r1,r1,#0xb
000012  5c09              LDRB     r1,[r1,r0]
000014  428a              CMP      r2,r1
000016  d101              BNE      |L9.28|
;;;563    		{
;;;564    			flag++;
000018  1c69              ADDS     r1,r5,#1
00001a  b2cd              UXTB     r5,r1
                  |L9.28|
00001c  1c41              ADDS     r1,r0,#1              ;560
00001e  b2c8              UXTB     r0,r1                 ;560
                  |L9.32|
000020  2808              CMP      r0,#8                 ;560
000022  dbf2              BLT      |L9.10|
;;;565    		}
;;;566    	}
;;;567    	
;;;568    	if(flag < 8)
000024  2d08              CMP      r5,#8
000026  da15              BGE      |L9.84|
;;;569    	{
;;;570    
;;;571    		uint8_t key_send_buff[8] = {0x00};
000028  2000              MOVS     r0,#0
00002a  9000              STR      r0,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
;;;572    		memcpy(key_send_buff, matrix->send, sizeof(matrix->send));
00002e  2208              MOVS     r2,#8
000030  4621              MOV      r1,r4
000032  319a              ADDS     r1,r1,#0x9a
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       __aeabi_memcpy
;;;573    				
;;;574    		//发送
;;;575    		USB_EP_Tx(ep_boot_keyboard, key_send_buff, sizeof(key_send_buff));
00003a  2208              MOVS     r2,#8
00003c  4669              MOV      r1,sp
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       USB_EP_Tx
;;;576    
;;;577    		//更新
;;;578    		memcpy(matrix->send_last, matrix->send, sizeof(matrix->send_last));
000044  2208              MOVS     r2,#8
000046  4621              MOV      r1,r4
000048  319a              ADDS     r1,r1,#0x9a
00004a  4620              MOV      r0,r4
00004c  30a5              ADDS     r0,r0,#0xa5
00004e  f7fffffe          BL       __aeabi_memcpy
;;;579    	}
000052  bf00              NOP      
                  |L9.84|
;;;580    	
;;;581    	memset(matrix->send, 0x00, sizeof(matrix->send));
000054  2108              MOVS     r1,#8
000056  4620              MOV      r0,r4
000058  309a              ADDS     r0,r0,#0x9a
00005a  f7fffffe          BL       __aeabi_memclr
;;;582    }
00005e  bd7c              POP      {r2-r6,pc}
;;;583    
                          ENDP


                          AREA ||i.usb_send_data_buffer||, CODE, READONLY, ALIGN=2

                  usb_send_data_buffer PROC
;;;389    
;;;390    void usb_send_data_buffer(uint8_t *pdata, uint16 data_size )
000000  b570              PUSH     {r4-r6,lr}
;;;391    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;392        if(data_size > 0)
000006  2c00              CMP      r4,#0
000008  dd21              BLE      |L10.78|
;;;393        	{
;;;394        	#if 1 //printf debug msg
;;;395    		SEGGER_RTT_printf(0,"usb_send_data_buffer data_size=%d\n",data_size);
00000a  4622              MOV      r2,r4
00000c  a110              ADR      r1,|L10.80|
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       SEGGER_RTT_printf
;;;396        	for(int i = 0;i<data_size;i++)
000014  2600              MOVS     r6,#0
000016  e005              B        |L10.36|
                  |L10.24|
;;;397        		{ 
;;;398        		SEGGER_RTT_printf(0,"0x%02x ",pdata[i]);
000018  5daa              LDRB     r2,[r5,r6]
00001a  a116              ADR      r1,|L10.116|
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       SEGGER_RTT_printf
000022  1c76              ADDS     r6,r6,#1              ;396
                  |L10.36|
000024  42a6              CMP      r6,r4                 ;396
000026  dbf7              BLT      |L10.24|
;;;399        		}
;;;400    		SEGGER_RTT_printf(0," \n usb_send_data_buffer \n");
000028  a114              ADR      r1,|L10.124|
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       SEGGER_RTT_printf
;;;401    		#endif 
;;;402    		
;;;403    		if(USB_EP_Tx(1,pdata,data_size) != SUCCESS)
000030  b2e2              UXTB     r2,r4
000032  4629              MOV      r1,r5
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       USB_EP_Tx
00003a  2801              CMP      r0,#1
00003c  d003              BEQ      |L10.70|
;;;404    			{
;;;405    					SEGGER_RTT_printf(0," \n usb_send_data_buffer error \n");
00003e  a116              ADR      r1,|L10.152|
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       SEGGER_RTT_printf
                  |L10.70|
;;;406    				//f_send_kb = 0;
;;;407    			}
;;;408    		SEGGER_RTT_printf(0," \n usb_send_data_buffer suceessful \n");
000046  a11c              ADR      r1,|L10.184|
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       SEGGER_RTT_printf
                  |L10.78|
;;;409    			//SysTick_Delay_Ms(100);
;;;410        	}
;;;411    	}	
00004e  bd70              POP      {r4-r6,pc}
;;;412    
                          ENDP

                  |L10.80|
000050  7573625f          DCB      "usb_send_data_buffer data_size=%d\n",0
000054  73656e64
000058  5f646174
00005c  615f6275
000060  66666572
000064  20646174
000068  615f7369
00006c  7a653d25
000070  640a00  
000073  00                DCB      0
                  |L10.116|
000074  30782530          DCB      "0x%02x ",0
000078  32782000
                  |L10.124|
00007c  200a2075          DCB      " \n usb_send_data_buffer \n",0
000080  73625f73
000084  656e645f
000088  64617461
00008c  5f627566
000090  66657220
000094  0a00    
000096  00                DCB      0
000097  00                DCB      0
                  |L10.152|
000098  200a2075          DCB      " \n usb_send_data_buffer error \n",0
00009c  73625f73
0000a0  656e645f
0000a4  64617461
0000a8  5f627566
0000ac  66657220
0000b0  6572726f
0000b4  72200a00
                  |L10.184|
0000b8  200a2075          DCB      " \n usb_send_data_buffer suceessful \n",0
0000bc  73625f73
0000c0  656e645f
0000c4  64617461
0000c8  5f627566
0000cc  66657220
0000d0  73756365
0000d4  65737366
0000d8  756c200a
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_usbdata_head
                          %        9
                  receive_data_buf
                          %        512
                  buff
                          %        128

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  rMap
                          DCDU     0x48000000
                          DCDU     0x00000001
000008  0000              DCB      0x00,0x00
                          DCDU     0x48000000
                          DCDU     0x00000002
000012  0001              DCB      0x00,0x01
                          DCDU     0x48000000
                          DCDU     0x00000004
00001c  0002              DCB      0x00,0x02
                          DCDU     0x48000000
                          DCDU     0x00000008
000026  0003              DCB      0x00,0x03
                          DCDU     0x48000000
                          DCDU     0x00000010
000030  0004              DCB      0x00,0x04
                          DCDU     0x48000000
                          DCDU     0x00000020
00003a  0005              DCB      0x00,0x05
                          DCDU     0x48000000
                          DCDU     0x00000040
000044  0006              DCB      0x00,0x06
                          DCDU     0x48000000
                          DCDU     0x00000080
00004e  0007              DCB      0x00,0x07
                  cMap
                          DCDU     0x48000400
                          DCDU     0x00000001
000058  0100              DCB      0x01,0x00
                          DCDU     0x48000400
                          DCDU     0x00000002
000062  0101              DCB      0x01,0x01
                          DCDU     0x48000400
                          DCDU     0x00000004
00006c  0102              DCB      0x01,0x02
                          DCDU     0x48000400
                          DCDU     0x00000400
000076  010a              DCB      0x01,0x0a
                          DCDU     0x48000400
                          DCDU     0x00000800
000080  010b              DCB      0x01,0x0b
                          DCDU     0x48000400
                          DCDU     0x00001000
00008a  010c              DCB      0x01,0x0c
                          DCDU     0x48000400
                          DCDU     0x00002000
000094  010d              DCB      0x01,0x0d
                          DCDU     0x48000400
                          DCDU     0x00004000
00009e  010e              DCB      0x01,0x0e
                          DCDU     0x48000400
                          DCDU     0x00008000
0000a8  010f              DCB      0x01,0x0f
                          DCDU     0x48000000
                          DCDU     0x00008000
0000b2  000f              DCB      0x00,0x0f
                          DCDU     0x48000400
                          DCDU     0x00000008
0000bc  0103              DCB      0x01,0x03
                          DCDU     0x48000400
                          DCDU     0x00000010
0000c6  0104              DCB      0x01,0x04
                          DCDU     0x48000400
                          DCDU     0x00000020
0000d0  0105              DCB      0x01,0x05
                          DCDU     0x48000400
                          DCDU     0x00000040
0000da  0106              DCB      0x01,0x06
                          DCDU     0x48000400
                          DCDU     0x00000080
0000e4  0107              DCB      0x01,0x07
                          DCDU     0x48000800
                          DCDU     0x00004000
0000ee  020e              DCB      0x02,0x0e
                          DCDU     0x48001400
                          DCDU     0x00000001
0000f8  0500              DCB      0x05,0x00
                          DCDU     0x48001400
                          DCDU     0x00000002
000102  0501              DCB      0x05,0x01
                  keyMatrix
000104  00000000          DCB      0x00,0x00,0x00,0x00
000108  00e30000          DCB      0x00,0xe3,0x00,0x00
00010c  e600e200          DCB      0xe6,0x00,0xe2,0x00
000110  00000000          DCB      0x00,0x00,0x00,0x00
000114  00e70000          DCB      0x00,0xe7,0x00,0x00
000118  0000e03e          DCB      0x00,0x00,0xe0,0x3e
00011c  51002c00          DCB      0x51,0x00,0x2c,0x00
000120  00004600          DCB      0x00,0x00,0x46,0x00
000124  4f000000          DCB      0x4f,0x00,0x00,0x00
000128  00000000          DCB      0x00,0x00,0x00,0x00
00012c  50005200          DCB      0x50,0x00,0x52,0x00
000130  00000000          DCB      0x00,0x00,0x00,0x00
000134  11100b0d          DCB      0x11,0x10,0x0b,0x0d
000138  181c2324          DCB      0x18,0x1c,0x23,0x24
00013c  000000e5          DCB      0x00,0x00,0x00,0xe5
000140  00e10000          DCB      0x00,0xe1,0x00,0x00
000144  001b0016          DCB      0x00,0x1b,0x00,0x16
000148  1a393a1f          DCB      0x1a,0x39,0x3a,0x1f
00014c  00000000          DCB      0x00,0x00,0x00,0x00
000150  00000000          DCB      0x00,0x00,0x00,0x00
000154  00000000          DCB      0x00,0x00,0x00,0x00
000158  00000000          DCB      0x00,0x00,0x00,0x00
00015c  45284431          DCB      0x45,0x28,0x44,0x31
000160  002a4243          DCB      0x00,0x2a,0x42,0x43
000164  0037000f          DCB      0x00,0x37,0x00,0x0f
000168  12404126          DCB      0x12,0x40,0x41,0x26
00016c  00363f0e          DCB      0x00,0x36,0x3f,0x0e
000170  0c302e25          DCB      0x0c,0x30,0x2e,0x25
000174  38af3433          DCB      0x38,0xaf,0x34,0x33
000178  132f2d27          DCB      0x13,0x2f,0x2d,0x27
00017c  00000000          DCB      0x00,0x00,0x00,0x00
000180  00000000          DCB      0x00,0x00,0x00,0x00
000184  05190a09          DCB      0x05,0x19,0x0a,0x09
000188  15172221          DCB      0x15,0x17,0x22,0x21
00018c  98063d07          DCB      0x98,0x06,0x3d,0x07
000190  083c3b20          DCB      0x08,0x3c,0x3b,0x20
                  __FUNCTION__
000194  69415032          DCB      0x69,0x41,0x50,0x32
000198  5061636b          DCB      0x50,0x61,0x63,0x6b
00019c  65745061          DCB      0x65,0x74,0x50,0x61
0001a0  72736542          DCB      0x72,0x73,0x65,0x42
0001a4  75666665          DCB      0x75,0x66,0x66,0x65
0001a8  7200              DCB      0x72,0x00
                  |symbol_number.40|
0001aa  6d61              DCB      0x6d,0x61
0001ac  696e00            DCB      0x69,0x6e,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  g_start_key
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  g_usbdata
                          DCD      0x00000000
                  g_usbdata_list
                          DCD      0x00000000
                  g_hid_report
                          DCD      0x00000000
000010  0000              DCB      0x00,0x00
                  qty
000012  0000              DCB      0x00,0x00
                  NOW
                          DCD      0x00000000
                  remap
000018  3abe3bbf          DCB      0x3a,0xbe,0x3b,0xbf
00001c  3cc13dc7          DCB      0x3c,0xc1,0x3d,0xc7
000020  40b141b3          DCB      0x40,0xb1,0x41,0xb3
000024  42b043b4          DCB      0x42,0xb0,0x43,0xb4
000028  44b745b6          DCB      0x44,0xb7,0x45,0xb6
00002c  46ba              DCB      0x46,0xba
                  remap2
00002e  504a              DCB      0x50,0x4a
000030  4f4d524b          DCB      0x4f,0x4d,0x52,0x4b
000034  514e              DCB      0x51,0x4e
                  matrix
000036  0812              DCB      0x08,0x12
                          DCD      rMap
                          DCD      cMap
                          DCD      keyMatrix
000044  0000              DCW      0x0000
000046  0000              DCB      0x00,0x00
                          %        60
000084  0000              DCW      0x0000
000086  0000              DCB      0x00,0x00
                          %        28
0000a4  0000              DCW      0x0000
0000a6  0000              DCB      0x00,0x00
                          %        28
0000c4  0000              DCB      0x00,0x00
                          DCDU     remap
0000ca  0b                DCB      0x0b
                          DCDU     remap2
0000cf  04                DCB      0x04
                          %        8
0000d8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
                  g_ParseState_t
                          DCD      0x00000000
                  buffer_offset
                          DCD      0x00000000
                  g_packets
                          DCD      0x00000000
                  g_packetLen
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
                  b_config
                          DCD      0x00000000
                  lock_flag
0000f8  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L70.24|
                  |L70.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L70.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L70.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\user\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_3a854f33____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___6_main_c_3a854f33____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_3a854f33____REVSH|
#line 144
|__asm___6_main_c_3a854f33____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
