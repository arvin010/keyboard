; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\timer.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\timer.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I.\RTE\_Keyboard -IC:\Users\Reidgjiao\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -IC:\Keil_v5-MDK\ARM\CMSIS\Include -D__UVISION_VERSION=529 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\timer.crf ..\user\timer.c]
                          THUMB

                          AREA ||i.TIM_Config||, CODE, READONLY, ALIGN=2

                  TIM_Config PROC
;;;39     
;;;40     void TIM_Config(void)
000000  b500              PUSH     {lr}
;;;41     {
000002  b08b              SUB      sp,sp,#0x2c
;;;42       TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;43       TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;44       GPIO_InitTypeDef GPIO_InitStructure;
;;;45     
;;;46       /* GPIOA, GPIOB and GPIOE Clocks enable */
;;;47       RCC_AHBPeriphClockCmd( RCC_AHBPeriph_GPIOA, ENABLE);
000004  2101              MOVS     r1,#1
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;48       
;;;49       /* GPIOA Configuration: Channel 1, 2, 3, 4 and Channel 1N as alternate function push-pull */
;;;50       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
00000c  20ff              MOVS     r0,#0xff
00000e  3001              ADDS     r0,#1
000010  9001              STR      r0,[sp,#4]
;;;51       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000012  2102              MOVS     r1,#2
000014  4668              MOV      r0,sp
000016  7201              STRB     r1,[r0,#8]
;;;52       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2103              MOVS     r1,#3
00001a  7241              STRB     r1,[r0,#9]
;;;53       GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00001c  2100              MOVS     r1,#0
00001e  7281              STRB     r1,[r0,#0xa]
;;;54       GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
000020  2101              MOVS     r1,#1
000022  72c1              STRB     r1,[r0,#0xb]
;;;55       GPIO_Init(GPIOA, &GPIO_InitStructure);
000024  a901              ADD      r1,sp,#4
000026  2009              MOVS     r0,#9
000028  06c0              LSLS     r0,r0,#27
00002a  f7fffffe          BL       GPIO_Init
;;;56       
;;;57       GPIO_PinAFConfig(GPIOA, GPIO_PinSource8, GPIO_AF_2);
00002e  2202              MOVS     r2,#2
000030  2108              MOVS     r1,#8
000032  2009              MOVS     r0,#9
000034  06c0              LSLS     r0,r0,#27
000036  f7fffffe          BL       GPIO_PinAFConfig
;;;58         
;;;59       
;;;60       /* TIM1 Configuration ---------------------------------------------------
;;;61        Generate 7 PWM signals with 4 different duty cycles:
;;;62        TIM1 input clock (TIM1CLK) is set to APB2 clock (PCLK2)    
;;;63         => TIM1CLK = PCLK2 = SystemCoreClock
;;;64        TIM1CLK = SystemCoreClock, Prescaler = 0, TIM1 counter clock = SystemCoreClock
;;;65        SystemCoreClock is set to 48 MHz for FT32f0xx devices
;;;66        
;;;67        The objective is to generate 7 PWM signal at 17.57 KHz:
;;;68          - TIM1_Period = (SystemCoreClock / 17570) - 1
;;;69        The channel 1 and channel 1N duty cycle is set to 50%
;;;70        The channel 2 and channel 2N duty cycle is set to 37.5%
;;;71        The channel 3 and channel 3N duty cycle is set to 25%
;;;72        The channel 4 duty cycle is set to 12.5%
;;;73        The Timer pulse is calculated as follows:
;;;74          - ChannelxPulse = DutyCycle * (TIM1_Period - 1) / 100
;;;75        
;;;76        Note: 
;;;77         SystemCoreClock variable holds HCLK frequency and is defined in system_FT32f0xx.c file.
;;;78         Each time the core clock (HCLK) changes, user had to call SystemCoreClockUpdate()
;;;79         function to update SystemCoreClock variable value. Otherwise, any configuration
;;;80         based on this variable will be incorrect. 
;;;81       ----------------------------------------------------------------------- */
;;;82       /* Compute the value to be set in ARR regiter to generate signal frequency at 17.57 Khz */
;;;83       TimerPeriod = (SystemCoreClock / 17570 ) - 1;
00003a  4922              LDR      r1,|L1.196|
00003c  4822              LDR      r0,|L1.200|
00003e  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000040  f7fffffe          BL       __aeabi_uidivmod
000044  1e40              SUBS     r0,r0,#1
000046  4921              LDR      r1,|L1.204|
000048  8008              STRH     r0,[r1,#0]
;;;84       /* Compute CCR1 value to generate a duty cycle at 50% for channel 1 and 1N */
;;;85       
;;;86       
;;;87       Channel1Pulse = (uint16_t) (((uint32_t) 5 * (TimerPeriod - 1)) / 1);
00004a  4608              MOV      r0,r1
00004c  8800              LDRH     r0,[r0,#0]  ; TimerPeriod
00004e  1e40              SUBS     r0,r0,#1
000050  0081              LSLS     r1,r0,#2
000052  1840              ADDS     r0,r0,r1
000054  491e              LDR      r1,|L1.208|
000056  8008              STRH     r0,[r1,#0]
;;;88     
;;;89     
;;;90       /* TIM1 clock enable */
;;;91       RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1 , ENABLE);
000058  2101              MOVS     r1,#1
00005a  02c8              LSLS     r0,r1,#11
00005c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;92       
;;;93       /* Time Base configuration */
;;;94       TIM_TimeBaseStructure.TIM_Prescaler = 0;
000060  2100              MOVS     r1,#0
000062  4668              MOV      r0,sp
000064  8401              STRH     r1,[r0,#0x20]
;;;95       TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
000066  8441              STRH     r1,[r0,#0x22]
;;;96       TIM_TimeBaseStructure.TIM_Period = TimerPeriod;
000068  4818              LDR      r0,|L1.204|
00006a  8800              LDRH     r0,[r0,#0]  ; TimerPeriod
00006c  9009              STR      r0,[sp,#0x24]
;;;97       TIM_TimeBaseStructure.TIM_ClockDivision = 0;
00006e  4668              MOV      r0,sp
000070  8501              STRH     r1,[r0,#0x28]
;;;98       TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
000072  a808              ADD      r0,sp,#0x20
000074  7281              STRB     r1,[r0,#0xa]
;;;99     
;;;100      TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
000076  a908              ADD      r1,sp,#0x20
000078  4816              LDR      r0,|L1.212|
00007a  f7fffffe          BL       TIM_TimeBaseInit
;;;101    
;;;102      /* Channel 1, 2,3 and 4 Configuration in PWM mode */
;;;103      TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
00007e  2170              MOVS     r1,#0x70
000080  4668              MOV      r0,sp
000082  8181              STRH     r1,[r0,#0xc]
;;;104      TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
000084  2101              MOVS     r1,#1
000086  81c1              STRH     r1,[r0,#0xe]
;;;105      TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
000088  2104              MOVS     r1,#4
00008a  8201              STRH     r1,[r0,#0x10]
;;;106      TIM_OCInitStructure.TIM_Pulse = Channel1Pulse;
00008c  4810              LDR      r0,|L1.208|
00008e  8800              LDRH     r0,[r0,#0]  ; Channel1Pulse
000090  9005              STR      r0,[sp,#0x14]
;;;107      TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
000092  2102              MOVS     r1,#2
000094  4668              MOV      r0,sp
000096  8301              STRH     r1,[r0,#0x18]
;;;108      TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
000098  2100              MOVS     r1,#0
00009a  8341              STRH     r1,[r0,#0x1a]
;;;109      TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
00009c  21ff              MOVS     r1,#0xff
00009e  3101              ADDS     r1,#1
0000a0  8381              STRH     r1,[r0,#0x1c]
;;;110      TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
0000a2  2100              MOVS     r1,#0
0000a4  83c1              STRH     r1,[r0,#0x1e]
;;;111    
;;;112      TIM_OC1Init(TIM1, &TIM_OCInitStructure);
0000a6  a903              ADD      r1,sp,#0xc
0000a8  480a              LDR      r0,|L1.212|
0000aa  f7fffffe          BL       TIM_OC1Init
;;;113    
;;;114    
;;;115      /* TIM1 counter enable */
;;;116      TIM_Cmd(TIM1, ENABLE);
0000ae  2101              MOVS     r1,#1
0000b0  4808              LDR      r0,|L1.212|
0000b2  f7fffffe          BL       TIM_Cmd
;;;117    
;;;118      /* TIM1 Main Output Enable */
;;;119      TIM_CtrlPWMOutputs(TIM1, ENABLE);
0000b6  2101              MOVS     r1,#1
0000b8  4806              LDR      r0,|L1.212|
0000ba  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;120    }
0000be  b00b              ADD      sp,sp,#0x2c
0000c0  bd00              POP      {pc}
;;;121    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L1.196|
                          DCD      0x000044a2
                  |L1.200|
                          DCD      SystemCoreClock
                  |L1.204|
                          DCD      TimerPeriod
                  |L1.208|
                          DCD      Channel1Pulse
                  |L1.212|
                          DCD      0x40012c00

                          AREA ||i.set_bright_light||, CODE, READONLY, ALIGN=2

                  set_bright_light PROC
;;;125    
;;;126    void set_bright_light(void)
000000  b500              PUSH     {lr}
;;;127    {
000002  b085              SUB      sp,sp,#0x14
;;;128    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;129    
;;;130    	//…Ë÷√PWM	
;;;131    	Channel1Pulse =	(uint16_t) (((uint32_t) brightness[state].v * (TimerPeriod - 1)) / brightness[state].d);
000004  4a20              LDR      r2,|L2.136|
000006  7812              LDRB     r2,[r2,#0]  ; state
000008  0092              LSLS     r2,r2,#2
00000a  4b20              LDR      r3,|L2.140|
00000c  18d3              ADDS     r3,r2,r3
00000e  785a              LDRB     r2,[r3,#1]
000010  781b              LDRB     r3,[r3,#0]
000012  0212              LSLS     r2,r2,#8
000014  431a              ORRS     r2,r2,r3
000016  4b1e              LDR      r3,|L2.144|
000018  881b              LDRH     r3,[r3,#0]  ; TimerPeriod
00001a  1e5b              SUBS     r3,r3,#1
00001c  435a              MULS     r2,r3,r2
00001e  4610              MOV      r0,r2
000020  4a19              LDR      r2,|L2.136|
000022  7812              LDRB     r2,[r2,#0]  ; state
000024  0092              LSLS     r2,r2,#2
000026  4b19              LDR      r3,|L2.140|
000028  18d3              ADDS     r3,r2,r3
00002a  78da              LDRB     r2,[r3,#3]
00002c  789b              LDRB     r3,[r3,#2]
00002e  0212              LSLS     r2,r2,#8
000030  431a              ORRS     r2,r2,r3
000032  4611              MOV      r1,r2
000034  f7fffffe          BL       __aeabi_uidivmod
000038  4916              LDR      r1,|L2.148|
00003a  8008              STRH     r0,[r1,#0]
;;;132    	
;;;133    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
00003c  2170              MOVS     r1,#0x70
00003e  4668              MOV      r0,sp
000040  8001              STRH     r1,[r0,#0]
;;;134    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
000042  2101              MOVS     r1,#1
000044  8041              STRH     r1,[r0,#2]
;;;135    	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
000046  2104              MOVS     r1,#4
000048  8081              STRH     r1,[r0,#4]
;;;136    	TIM_OCInitStructure.TIM_Pulse = Channel1Pulse;
00004a  4812              LDR      r0,|L2.148|
00004c  8800              LDRH     r0,[r0,#0]  ; Channel1Pulse
00004e  9002              STR      r0,[sp,#8]
;;;137    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
000050  2102              MOVS     r1,#2
000052  4668              MOV      r0,sp
000054  8181              STRH     r1,[r0,#0xc]
;;;138    	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
000056  2100              MOVS     r1,#0
000058  81c1              STRH     r1,[r0,#0xe]
;;;139    	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
00005a  21ff              MOVS     r1,#0xff
00005c  3101              ADDS     r1,#1
00005e  8201              STRH     r1,[r0,#0x10]
;;;140    	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
000060  2100              MOVS     r1,#0
000062  8241              STRH     r1,[r0,#0x12]
;;;141    
;;;142    	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
000064  4669              MOV      r1,sp
000066  480c              LDR      r0,|L2.152|
000068  f7fffffe          BL       TIM_OC1Init
;;;143    	
;;;144    	state++;
00006c  4806              LDR      r0,|L2.136|
00006e  7800              LDRB     r0,[r0,#0]  ; state
000070  1c40              ADDS     r0,r0,#1
000072  4905              LDR      r1,|L2.136|
000074  7008              STRB     r0,[r1,#0]
;;;145    	
;;;146    	if(state > 3)
000076  4608              MOV      r0,r1
000078  7800              LDRB     r0,[r0,#0]  ; state
00007a  2803              CMP      r0,#3
00007c  dd01              BLE      |L2.130|
;;;147    	{
;;;148    		state = 0x00;
00007e  2000              MOVS     r0,#0
000080  7008              STRB     r0,[r1,#0]
                  |L2.130|
;;;149    	}
;;;150    	
;;;151    }
000082  b005              ADD      sp,sp,#0x14
000084  bd00              POP      {pc}
;;;152    
                          ENDP

000086  0000              DCW      0x0000
                  |L2.136|
                          DCD      state
                  |L2.140|
                          DCD      brightness
                  |L2.144|
                          DCD      TimerPeriod
                  |L2.148|
                          DCD      Channel1Pulse
                  |L2.152|
                          DCD      0x40012c00

                          AREA ||.data||, DATA, ALIGN=1

                  TimerPeriod
000000  0000              DCW      0x0000
                  Channel1Pulse
000002  0000              DCW      0x0000
                  state
000004  00                DCB      0x00
                  brightness
000005  005a              DCWU     0x005a
000007  0064              DCWU     0x0064
000009  004b              DCWU     0x004b
00000b  0064              DCWU     0x0064
00000d  0032              DCWU     0x0032
00000f  0064              DCWU     0x0064
000011  0005              DCWU     0x0005
000013  0001              DCWU     0x0001

;*** Start embedded assembler ***

#line 1 "..\\user\\timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_b3148385____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___7_timer_c_b3148385____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_b3148385____REVSH|
#line 144
|__asm___7_timer_c_b3148385____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
