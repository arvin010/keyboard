; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\online.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\online.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -IC:\Users\Tom\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.2\Drivers\CMSIS\FT32F0xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=533 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\online.crf ..\user\online.c]
                          THUMB

                          AREA ||i.host_recv_online||, CODE, READONLY, ALIGN=2

                  host_recv_online PROC
;;;8      
;;;9      uint8_t host_recv_online(queue_t* queue, uint8_t* cmd, uint8_t* recv, size_t* len)
000000  b5f0              PUSH     {r4-r7,lr}
;;;10     {
000002  b0a1              SUB      sp,sp,#0x84
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
;;;11     	pkg_st rpkg;
;;;12     	static size_t tlen = 0;
;;;13     	static uint8_t tcmd = 0;
;;;14     	static uint32_t now = 0;
;;;15     	if(queue_length(queue))
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       queue_length
000012  2800              CMP      r0,#0
000014  d034              BEQ      |L1.128|
;;;16     	{
;;;17     		queue_pop(queue, &rpkg, sizeof(pkg_st));
000016  2240              MOVS     r2,#0x40
000018  a911              ADD      r1,sp,#0x44
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       queue_pop
;;;18     		if(rpkg.sn == 0)
000020  a820              ADD      r0,sp,#0x80
000022  7840              LDRB     r0,[r0,#1]
000024  2800              CMP      r0,#0
000026  d107              BNE      |L1.56|
;;;19     		{
;;;20     			now = GetTime();
000028  f7fffffe          BL       GetTime
00002c  4927              LDR      r1,|L1.204|
00002e  6008              STR      r0,[r1,#0]  ; now
;;;21     			tcmd = rpkg.cmd;
000030  a820              ADD      r0,sp,#0x80
000032  7800              LDRB     r0,[r0,#0]
000034  4926              LDR      r1,|L1.208|
000036  7008              STRB     r0,[r1,#0]
                  |L1.56|
;;;22     		}
;;;23     		memcpy((recv + (rpkg.sn * ARG_MAX_LEN)), rpkg.buffer, rpkg.len);
000038  a920              ADD      r1,sp,#0x80
00003a  78ca              LDRB     r2,[r1,#3]
00003c  7849              LDRB     r1,[r1,#1]
00003e  233c              MOVS     r3,#0x3c
000040  4359              MULS     r1,r3,r1
000042  1988              ADDS     r0,r1,r6
000044  a911              ADD      r1,sp,#0x44
000046  f7fffffe          BL       __aeabi_memcpy
;;;24     		tlen += rpkg.len;
00004a  a920              ADD      r1,sp,#0x80
00004c  78c8              LDRB     r0,[r1,#3]
00004e  4921              LDR      r1,|L1.212|
000050  6809              LDR      r1,[r1,#0]  ; tlen
000052  1840              ADDS     r0,r0,r1
000054  491f              LDR      r1,|L1.212|
000056  6008              STR      r0,[r1,#0]  ; tlen
;;;25     		if(rpkg.sn == (rpkg.qty - 1))
000058  a920              ADD      r1,sp,#0x80
00005a  784a              LDRB     r2,[r1,#1]
00005c  7888              LDRB     r0,[r1,#2]
00005e  1e40              SUBS     r0,r0,#1
000060  4282              CMP      r2,r0
000062  d10d              BNE      |L1.128|
;;;26     		{
;;;27     			*len = tlen;
000064  481b              LDR      r0,|L1.212|
000066  6800              LDR      r0,[r0,#0]  ; tlen
000068  6028              STR      r0,[r5,#0]
;;;28     			*cmd = tcmd;
00006a  4819              LDR      r0,|L1.208|
00006c  7800              LDRB     r0,[r0,#0]  ; tcmd
00006e  7020              STRB     r0,[r4,#0]
;;;29     			tlen = 0;
000070  2000              MOVS     r0,#0
000072  4918              LDR      r1,|L1.212|
000074  6008              STR      r0,[r1,#0]  ; tlen
;;;30     			tcmd = 0;
000076  4916              LDR      r1,|L1.208|
000078  7008              STRB     r0,[r1,#0]
;;;31     			return 1;
00007a  2001              MOVS     r0,#1
                  |L1.124|
;;;32     		}
;;;33     	}
;;;34     	
;;;35     	if(tcmd != 0 && GetTime() - now >= CMD_WAIT_TIMEOUT)
;;;36     	{
;;;37     		uint8_t t[sizeof(pkg_st)];
;;;38     		while(queue_length(queue))
;;;39     		{ 
;;;40     			queue_pop(queue, t, sizeof(t));
;;;41     		}
;;;42     		tlen = 0;
;;;43     		tcmd = 0;	
;;;44     		*len = tlen;
;;;45     		*cmd = tcmd;
;;;46     		return 0;
;;;47     	}
;;;48     
;;;49     	return 0;
;;;50     }
00007c  b021              ADD      sp,sp,#0x84
00007e  bdf0              POP      {r4-r7,pc}
                  |L1.128|
000080  4813              LDR      r0,|L1.208|
000082  7800              LDRB     r0,[r0,#0]            ;35  ; tcmd
000084  2800              CMP      r0,#0                 ;35
000086  d01e              BEQ      |L1.198|
000088  f7fffffe          BL       GetTime
00008c  490f              LDR      r1,|L1.204|
00008e  6809              LDR      r1,[r1,#0]            ;35  ; now
000090  1a40              SUBS     r0,r0,r1              ;35
000092  4911              LDR      r1,|L1.216|
000094  4288              CMP      r0,r1                 ;35
000096  d316              BCC      |L1.198|
000098  e004              B        |L1.164|
                  |L1.154|
00009a  2240              MOVS     r2,#0x40              ;40
00009c  a901              ADD      r1,sp,#4              ;40
00009e  4638              MOV      r0,r7                 ;40
0000a0  f7fffffe          BL       queue_pop
                  |L1.164|
0000a4  4638              MOV      r0,r7                 ;38
0000a6  f7fffffe          BL       queue_length
0000aa  2800              CMP      r0,#0                 ;38
0000ac  d1f5              BNE      |L1.154|
0000ae  4909              LDR      r1,|L1.212|
0000b0  6008              STR      r0,[r1,#0]            ;42  ; tlen
0000b2  4907              LDR      r1,|L1.208|
0000b4  7008              STRB     r0,[r1,#0]            ;43
0000b6  4807              LDR      r0,|L1.212|
0000b8  6800              LDR      r0,[r0,#0]            ;44  ; tlen
0000ba  6028              STR      r0,[r5,#0]            ;44
0000bc  4608              MOV      r0,r1                 ;45
0000be  7800              LDRB     r0,[r0,#0]            ;45  ; tcmd
0000c0  7020              STRB     r0,[r4,#0]            ;45
0000c2  2000              MOVS     r0,#0                 ;46
0000c4  e7da              B        |L1.124|
                  |L1.198|
0000c6  2000              MOVS     r0,#0                 ;49
0000c8  e7d8              B        |L1.124|
;;;51     
                          ENDP

0000ca  0000              DCW      0x0000
                  |L1.204|
                          DCD      now
                  |L1.208|
                          DCD      tcmd
                  |L1.212|
                          DCD      tlen
                  |L1.216|
                          DCD      0x00001388

                          AREA ||i.host_send_online||, CODE, READONLY, ALIGN=1

                  host_send_online PROC
;;;59     //拆包发送
;;;60     uint8_t host_send_online(uint8_t cmd, const uint8_t* send, size_t len)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;61     {
000002  b092              SUB      sp,sp,#0x48
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;62     	pkg_st data;
;;;63     	size_t index = 0, qty = 0;
000008  2500              MOVS     r5,#0
00000a  2400              MOVS     r4,#0
;;;64     	uint8_t div_flag = 0;
00000c  2000              MOVS     r0,#0
00000e  9001              STR      r0,[sp,#4]
;;;65     
;;;66     	//确定拆包数量
;;;67     	if(send == NULL || len <= 0)
000010  2e00              CMP      r6,#0
000012  d001              BEQ      |L2.24|
000014  2f00              CMP      r7,#0
000016  d103              BNE      |L2.32|
                  |L2.24|
;;;68     	{
;;;69     		qty = 1;
000018  2401              MOVS     r4,#1
;;;70     		data.qty = qty;
00001a  a810              ADD      r0,sp,#0x40
00001c  7184              STRB     r4,[r0,#6]
00001e  e00f              B        |L2.64|
                  |L2.32|
;;;71     	}
;;;72     	else
;;;73     	{
;;;74     		qty = len / ARG_MAX_LEN;
000020  213c              MOVS     r1,#0x3c
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       __aeabi_uidivmod
000028  4604              MOV      r4,r0
;;;75     		if(len % ARG_MAX_LEN)
00002a  213c              MOVS     r1,#0x3c
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       __aeabi_uidivmod
000032  2900              CMP      r1,#0
000034  d002              BEQ      |L2.60|
;;;76     		{
;;;77     			div_flag = 1;
000036  2001              MOVS     r0,#1
000038  9001              STR      r0,[sp,#4]
;;;78     			qty++;
00003a  1c64              ADDS     r4,r4,#1
                  |L2.60|
;;;79     		}
;;;80     		data.qty = qty;
00003c  a910              ADD      r1,sp,#0x40
00003e  718c              STRB     r4,[r1,#6]
                  |L2.64|
;;;81     	}
;;;82     
;;;83     	data.cmd = cmd;
000040  a910              ADD      r1,sp,#0x40
000042  9812              LDR      r0,[sp,#0x48]
000044  7108              STRB     r0,[r1,#4]
;;;84     	
;;;85     	while(index <= (qty - 1))
000046  e02b              B        |L2.160|
                  |L2.72|
;;;86     	{
;;;87     		data.sn = index;
000048  a910              ADD      r1,sp,#0x40
00004a  714d              STRB     r5,[r1,#5]
;;;88     
;;;89     		//确定本包内容长度
;;;90     		if(send == NULL || len <= 0)
00004c  2e00              CMP      r6,#0
00004e  d001              BEQ      |L2.84|
000050  2f00              CMP      r7,#0
000052  d103              BNE      |L2.92|
                  |L2.84|
;;;91     		{
;;;92     			data.len = 0;
000054  2000              MOVS     r0,#0
000056  a910              ADD      r1,sp,#0x40
000058  71c8              STRB     r0,[r1,#7]
00005a  e017              B        |L2.140|
                  |L2.92|
;;;93     		}
;;;94     		else
;;;95     		{
;;;96     			if(index == (qty - 1) && div_flag == 1)
00005c  1e60              SUBS     r0,r4,#1
00005e  42a8              CMP      r0,r5
000060  d109              BNE      |L2.118|
000062  9801              LDR      r0,[sp,#4]
000064  2801              CMP      r0,#1
000066  d106              BNE      |L2.118|
;;;97     			{
;;;98     				data.len = len % ARG_MAX_LEN;
000068  213c              MOVS     r1,#0x3c
00006a  4638              MOV      r0,r7
00006c  f7fffffe          BL       __aeabi_uidivmod
000070  a810              ADD      r0,sp,#0x40
000072  71c1              STRB     r1,[r0,#7]
000074  e002              B        |L2.124|
                  |L2.118|
;;;99     			}
;;;100    			else
;;;101    			{
;;;102    				data.len = ARG_MAX_LEN;
000076  203c              MOVS     r0,#0x3c
000078  a910              ADD      r1,sp,#0x40
00007a  71c8              STRB     r0,[r1,#7]
                  |L2.124|
;;;103    			}
;;;104    
;;;105    			//准备包内容
;;;106    			memcpy(data.buffer, send + (index * ARG_MAX_LEN), data.len);
00007c  a810              ADD      r0,sp,#0x40
00007e  79c2              LDRB     r2,[r0,#7]
000080  203c              MOVS     r0,#0x3c
000082  4368              MULS     r0,r5,r0
000084  1981              ADDS     r1,r0,r6
000086  a802              ADD      r0,sp,#8
000088  f7fffffe          BL       __aeabi_memcpy
                  |L2.140|
;;;107    		}
;;;108    
;;;109    		//发送数据
;;;110    		USB_Transmit_VendorData((uint8_t*)&data, M_EP_MAXP);
00008c  2140              MOVS     r1,#0x40
00008e  a802              ADD      r0,sp,#8
000090  f7fffffe          BL       USB_Transmit_VendorData
;;;111    
;;;112    		index++;
000094  1c6d              ADDS     r5,r5,#1
;;;113    		
;;;114    		//判断是否完成
;;;115    		if(index == qty)
000096  42a5              CMP      r5,r4
000098  d102              BNE      |L2.160|
;;;116    		{
;;;117    			return 1;
00009a  2001              MOVS     r0,#1
                  |L2.156|
;;;118    		}
;;;119    	}
;;;120    	return 0;
;;;121    }
00009c  b015              ADD      sp,sp,#0x54
00009e  bdf0              POP      {r4-r7,pc}
                  |L2.160|
0000a0  1e60              SUBS     r0,r4,#1              ;85
0000a2  42a8              CMP      r0,r5                 ;85
0000a4  d2d0              BCS      |L2.72|
0000a6  2000              MOVS     r0,#0                 ;120
0000a8  e7f8              B        |L2.156|
;;;122    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  tlen
                          DCD      0x00000000
                  tcmd
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  now
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\user\\online.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_online_c_76cf1d75____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___8_online_c_76cf1d75____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_online_c_76cf1d75____REVSH|
#line 144
|__asm___8_online_c_76cf1d75____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
