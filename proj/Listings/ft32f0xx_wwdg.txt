; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\ft32f0xx_wwdg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ft32f0xx_wwdg.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I.\RTE\_Keyboard -IC:\Users\Reidgjiao\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -IC:\Keil_v5-MDK\ARM\CMSIS\Include -D__UVISION_VERSION=529 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\ft32f0xx_wwdg.crf ..\FTLib\Src\ft32f0xx_wwdg.c]
                          THUMB

                          AREA ||i.WWDG_ClearFlag||, CODE, READONLY, ALIGN=2

                  WWDG_ClearFlag PROC
;;;155      */
;;;156    void WWDG_ClearFlag(void)
000000  2000              MOVS     r0,#0
;;;157    {
;;;158      WWDG->SR = (uint32_t)RESET;
000002  4901              LDR      r1,|L1.8|
000004  6088              STR      r0,[r1,#8]
;;;159    }
000006  4770              BX       lr
;;;160    
                          ENDP

                  |L1.8|
                          DCD      0x40002c00

                          AREA ||i.WWDG_DeInit||, CODE, READONLY, ALIGN=1

                  WWDG_DeInit PROC
;;;29       */
;;;30     void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;31     {
;;;32       RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;33       RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  2001              MOVS     r0,#1
00000e  02c0              LSLS     r0,r0,#11
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;34     }
000014  bd10              POP      {r4,pc}
;;;35     
                          ENDP


                          AREA ||i.WWDG_Enable||, CODE, READONLY, ALIGN=2

                  WWDG_Enable PROC
;;;119      */
;;;120    void WWDG_Enable(uint8_t Counter)
000000  2180              MOVS     r1,#0x80
;;;121    {
;;;122      /* Check the parameters */
;;;123      assert_param(IS_WWDG_COUNTER(Counter));
;;;124      WWDG->CR = WWDG_CR_WDGA | Counter;
000002  4301              ORRS     r1,r1,r0
000004  4a01              LDR      r2,|L3.12|
000006  6011              STR      r1,[r2,#0]
;;;125    }
000008  4770              BX       lr
;;;126    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_EnableIT||, CODE, READONLY, ALIGN=2

                  WWDG_EnableIT PROC
;;;87       */
;;;88     void WWDG_EnableIT(void)
000000  4803              LDR      r0,|L4.16|
;;;89     {
;;;90       WWDG->CFR |= WWDG_CFR_EWI;
000002  6840              LDR      r0,[r0,#4]
000004  2101              MOVS     r1,#1
000006  0249              LSLS     r1,r1,#9
000008  4308              ORRS     r0,r0,r1
00000a  4901              LDR      r1,|L4.16|
00000c  6048              STR      r0,[r1,#4]
;;;91     }
00000e  4770              BX       lr
;;;92     
                          ENDP

                  |L4.16|
                          DCD      0x40002c00

                          AREA ||i.WWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDG_GetFlagStatus PROC
;;;135      */
;;;136    FlagStatus WWDG_GetFlagStatus(void)
000000  2000              MOVS     r0,#0
;;;137    {
;;;138      FlagStatus bitstatus = RESET;
;;;139        
;;;140      if ((WWDG->SR) != (uint32_t)RESET)
000002  4904              LDR      r1,|L5.20|
000004  6889              LDR      r1,[r1,#8]
000006  2900              CMP      r1,#0
000008  d001              BEQ      |L5.14|
;;;141      {
;;;142        bitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L5.16|
                  |L5.14|
;;;143      }
;;;144      else
;;;145      {
;;;146        bitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L5.16|
;;;147      }
;;;148      return bitstatus;
;;;149    }
000010  4770              BX       lr
;;;150    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetCounter||, CODE, READONLY, ALIGN=2

                  WWDG_SetCounter PROC
;;;99       */
;;;100    void WWDG_SetCounter(uint8_t Counter)
000000  0641              LSLS     r1,r0,#25
;;;101    {
;;;102      /* Check the parameters */
;;;103      assert_param(IS_WWDG_COUNTER(Counter));
;;;104      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;105         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;106      WWDG->CR = Counter & BIT_MASK;
000002  0e49              LSRS     r1,r1,#25
000004  4a01              LDR      r2,|L6.12|
000006  6011              STR      r1,[r2,#0]
;;;107    }
000008  4770              BX       lr
;;;108    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  WWDG_SetPrescaler PROC
;;;45       */
;;;46     void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000000  2100              MOVS     r1,#0
;;;47     {
;;;48       uint32_t tmpreg = 0;
;;;49       /* Check the parameters */
;;;50       assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;51       /* Clear WDGTB[1:0] bits */
;;;52       tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
000002  4a06              LDR      r2,|L7.28|
000004  6852              LDR      r2,[r2,#4]
000006  23ff              MOVS     r3,#0xff
000008  3381              ADDS     r3,r3,#0x81
00000a  439a              BICS     r2,r2,r3
00000c  4611              MOV      r1,r2
;;;53       /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;54       tmpreg |= WWDG_Prescaler;
00000e  460a              MOV      r2,r1
000010  4302              ORRS     r2,r2,r0
000012  4611              MOV      r1,r2
;;;55       /* Store the new value */
;;;56       WWDG->CFR = tmpreg;
000014  4a01              LDR      r2,|L7.28|
000016  6051              STR      r1,[r2,#4]
;;;57     }
000018  4770              BX       lr
;;;58     
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetWindowValue||, CODE, READONLY, ALIGN=2

                  WWDG_SetWindowValue PROC
;;;64       */
;;;65     void WWDG_SetWindowValue(uint8_t WindowValue)
000000  b508              PUSH     {r3,lr}
;;;66     {
;;;67       __IO uint32_t tmpreg = 0;
000002  2100              MOVS     r1,#0
000004  9100              STR      r1,[sp,#0]
;;;68     
;;;69       /* Check the parameters */
;;;70       assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;71       /* Clear W[6:0] bits */
;;;72     
;;;73       tmpreg = WWDG->CFR & CFR_W_MASK;
000006  4907              LDR      r1,|L8.36|
000008  6849              LDR      r1,[r1,#4]
00000a  09c9              LSRS     r1,r1,#7
00000c  01c9              LSLS     r1,r1,#7
00000e  9100              STR      r1,[sp,#0]
;;;74     
;;;75       /* Set W[6:0] bits according to WindowValue value */
;;;76       tmpreg |= WindowValue & (uint32_t) BIT_MASK;
000010  0641              LSLS     r1,r0,#25
000012  0e49              LSRS     r1,r1,#25
000014  9a00              LDR      r2,[sp,#0]
000016  4311              ORRS     r1,r1,r2
000018  9100              STR      r1,[sp,#0]
;;;77     
;;;78       /* Store the new value */
;;;79       WWDG->CFR = tmpreg;
00001a  4a02              LDR      r2,|L8.36|
00001c  9900              LDR      r1,[sp,#0]
00001e  6051              STR      r1,[r2,#4]
;;;80     }
000020  bd08              POP      {r3,pc}
;;;81     
                          ENDP

000022  0000              DCW      0x0000
                  |L8.36|
                          DCD      0x40002c00

;*** Start embedded assembler ***

#line 1 "..\\FTLib\\Src\\ft32f0xx_wwdg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_ft32f0xx_wwdg_c_9668c0ca____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___15_ft32f0xx_wwdg_c_9668c0ca____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_ft32f0xx_wwdg_c_9668c0ca____REVSH|
#line 144
|__asm___15_ft32f0xx_wwdg_c_9668c0ca____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
