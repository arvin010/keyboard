; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\swtimer.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\swtimer.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I..\iap2 -IC:\Users\dell1\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -D__UVISION_VERSION=534 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\swtimer.crf ..\iap2\SwTimer.c]
                          THUMB

                          AREA ||i.SwTimer_GetId||, CODE, READONLY, ALIGN=1

                  SwTimer_GetId PROC
;;;93     
;;;94     uint8 SwTimer_GetId(SwTimer* pTimer)
000000  4601              MOV      r1,r0
;;;95     {
;;;96     	return pTimer->m_nTimerId;
000002  7d48              LDRB     r0,[r1,#0x15]
;;;97     }
000004  4770              BX       lr
;;;98     
                          ENDP


                          AREA ||i.SwTimer_Init||, CODE, READONLY, ALIGN=1

                  SwTimer_Init PROC
;;;4      
;;;5      void SwTimer_Init(SwTimer* pTimer, TimeoutFun timeout, void* pContext)
000000  b570              PUSH     {r4-r6,lr}
;;;6      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;7      	memset(pTimer, 0, sizeof(SwTimer));
000008  2122              MOVS     r1,#0x22
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       __aeabi_memclr
;;;8      
;;;9      	pTimer->m_base.m_isUsed = 1;
000010  2001              MOVS     r0,#1
000012  7220              STRB     r0,[r4,#8]
;;;10     	pTimer->m_context = pContext;
000014  4621              MOV      r1,r4
000016  3116              ADDS     r1,r1,#0x16
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       __aeabi_uwrite4
;;;11     	pTimer->timeout = timeout;
00001e  4621              MOV      r1,r4
000020  311a              ADDS     r1,r1,#0x1a
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       __aeabi_uwrite4
;;;12     	pTimer->m_nTimerId = 0;
000028  2000              MOVS     r0,#0
00002a  7560              STRB     r0,[r4,#0x15]
;;;13     }
00002c  bd70              POP      {r4-r6,pc}
;;;14     
                          ENDP


                          AREA ||i.SwTimer_ReStart||, CODE, READONLY, ALIGN=1

                  SwTimer_ReStart PROC
;;;27     
;;;28     void SwTimer_ReStart(SwTimer* pTimer)
000000  b570              PUSH     {r4-r6,lr}
;;;29     {
000002  4604              MOV      r4,r0
;;;30     	pTimer->m_dwInitTicks = GET_TICKS();
000004  f7fffffe          BL       GetTime
000008  4605              MOV      r5,r0
00000a  4621              MOV      r1,r4
00000c  3110              ADDS     r1,r1,#0x10
00000e  f7fffffe          BL       __aeabi_uwrite4
;;;31     	pTimer->m_isStart = 1;
000012  7d20              LDRB     r0,[r4,#0x14]
000014  0840              LSRS     r0,r0,#1
000016  0040              LSLS     r0,r0,#1
000018  1c40              ADDS     r0,r0,#1
00001a  7520              STRB     r0,[r4,#0x14]
;;;32     }
00001c  bd70              POP      {r4-r6,pc}
;;;33     
                          ENDP


                          AREA ||i.SwTimer_Release||, CODE, READONLY, ALIGN=1

                  SwTimer_Release PROC
;;;38     
;;;39     void SwTimer_Release(SwTimer* pTimer)
000000  b510              PUSH     {r4,lr}
;;;40     {
000002  4604              MOV      r4,r0
;;;41     	TimerManager_RemoveTimer(pTimer);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       TimerManager_RemoveTimer
;;;42     	memset(pTimer, 0, sizeof(SwTimer));
00000a  2122              MOVS     r1,#0x22
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       __aeabi_memclr
;;;43     }
000012  bd10              POP      {r4,pc}
;;;44     
                          ENDP


                          AREA ||i.SwTimer_Reset||, CODE, READONLY, ALIGN=1

                  SwTimer_Reset PROC
;;;85     
;;;86     void SwTimer_Reset(SwTimer* pTimer)
000000  b570              PUSH     {r4-r6,lr}
;;;87     {
000002  4604              MOV      r4,r0
;;;88     	if(pTimer->m_pTimerManager)
000004  4620              MOV      r0,r4
000006  301e              ADDS     r0,r0,#0x1e
000008  f7fffffe          BL       __aeabi_uread4
00000c  2800              CMP      r0,#0
00000e  d00c              BEQ      |L5.42|
;;;89     	{
;;;90     		pTimer->m_dwInitTicks = pTimer->m_pTimerManager->m_ticks;
000010  4620              MOV      r0,r4
000012  301e              ADDS     r0,r0,#0x1e
000014  f7fffffe          BL       __aeabi_uread4
000018  1d06              ADDS     r6,r0,#4
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       __aeabi_uread4
000020  4605              MOV      r5,r0
000022  4621              MOV      r1,r4
000024  3110              ADDS     r1,r1,#0x10
000026  f7fffffe          BL       __aeabi_uwrite4
                  |L5.42|
;;;91     	}
;;;92     }
00002a  bd70              POP      {r4-r6,pc}
;;;93     
                          ENDP


                          AREA ||i.SwTimer_Start||, CODE, READONLY, ALIGN=2

                  SwTimer_Start PROC
;;;14     
;;;15     void SwTimer_Start(SwTimer* pTimer, uint8 timerId, uint32 value_ms)
000000  b5fe              PUSH     {r1-r7,lr}
;;;16     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;17     	//ASRT(value_ms);
;;;18     	if(!value_ms)
000008  2d00              CMP      r5,#0
00000a  d100              BNE      |L6.14|
                  |L6.12|
;;;19     		return;
;;;20     	pTimer->m_dwTimeoutTicks = value_ms ;/** MS_STICKS*/;
;;;21     	pTimer->m_dwInitTicks = GET_TICKS();
;;;22     	pTimer->m_nTimerId = timerId;
;;;23     	pTimer->m_isStart = 1;
;;;24     
;;;25     	SEGGER_RTT_printf(0,"Init Timer(ID=%d), Timerout ticks=%d, initTicks=0x%08x\n", pTimer->m_nTimerId, pTimer->m_dwTimeoutTicks, pTimer->m_dwInitTicks);
;;;26     }
00000c  bdfe              POP      {r1-r7,pc}
                  |L6.14|
00000e  4621              MOV      r1,r4                 ;20
000010  310c              ADDS     r1,r1,#0xc            ;20
000012  4628              MOV      r0,r5                 ;20
000014  f7fffffe          BL       __aeabi_uwrite4
000018  f7fffffe          BL       GetTime
00001c  4607              MOV      r7,r0                 ;21
00001e  4621              MOV      r1,r4                 ;21
000020  3110              ADDS     r1,r1,#0x10           ;21
000022  f7fffffe          BL       __aeabi_uwrite4
000026  7566              STRB     r6,[r4,#0x15]         ;22
000028  7d20              LDRB     r0,[r4,#0x14]         ;23
00002a  0840              LSRS     r0,r0,#1              ;23
00002c  0040              LSLS     r0,r0,#1              ;23
00002e  1c40              ADDS     r0,r0,#1              ;23
000030  7520              STRB     r0,[r4,#0x14]         ;23
000032  4620              MOV      r0,r4                 ;25
000034  3010              ADDS     r0,r0,#0x10           ;25
000036  f7fffffe          BL       __aeabi_uread4
00003a  4607              MOV      r7,r0                 ;25
00003c  4620              MOV      r0,r4                 ;25
00003e  300c              ADDS     r0,r0,#0xc            ;25
000040  f7fffffe          BL       __aeabi_uread4
000044  9700              STR      r7,[sp,#0]            ;25
000046  9001              STR      r0,[sp,#4]            ;25
000048  7d62              LDRB     r2,[r4,#0x15]         ;25
00004a  4603              MOV      r3,r0                 ;25
00004c  a102              ADR      r1,|L6.88|
00004e  2000              MOVS     r0,#0                 ;25
000050  f7fffffe          BL       SEGGER_RTT_printf
000054  bf00              NOP      
000056  e7d9              B        |L6.12|
;;;27     
                          ENDP

                  |L6.88|
000058  496e6974          DCB      "Init Timer(ID=%d), Timerout ticks=%d, initTicks=0x%08x\n"
00005c  2054696d
000060  65722849
000064  443d2564
000068  292c2054
00006c  696d6572
000070  6f757420
000074  7469636b
000078  733d2564
00007c  2c20696e
000080  69745469
000084  636b733d
000088  30782530
00008c  38780a  
00008f  00                DCB      0

                          AREA ||i.SwTimer_Stop||, CODE, READONLY, ALIGN=1

                  SwTimer_Stop PROC
;;;33     
;;;34     void SwTimer_Stop(SwTimer* pTimer)
000000  7d01              LDRB     r1,[r0,#0x14]
;;;35     {
;;;36     	pTimer->m_isStart = 0;
000002  0849              LSRS     r1,r1,#1
000004  0049              LSLS     r1,r1,#1
000006  7501              STRB     r1,[r0,#0x14]
;;;37     }
000008  4770              BX       lr
;;;38     
                          ENDP


                          AREA ||i.SwTimer_TimerOut||, CODE, READONLY, ALIGN=1

                  SwTimer_TimerOut PROC
;;;77     
;;;78     void SwTimer_TimerOut(SwTimer* pTimer)
000000  b570              PUSH     {r4-r6,lr}
;;;79     {
000002  4604              MOV      r4,r0
;;;80     	//ASRT(pTimer->timeout);
;;;81     	if(!pTimer->timeout)
000004  4620              MOV      r0,r4
000006  301a              ADDS     r0,r0,#0x1a
000008  f7fffffe          BL       __aeabi_uread4
00000c  2800              CMP      r0,#0
00000e  d100              BNE      |L8.18|
                  |L8.16|
;;;82     		return;
;;;83     	pTimer->timeout(pTimer, pTimer->m_context);
;;;84     }
000010  bd70              POP      {r4-r6,pc}
                  |L8.18|
000012  4620              MOV      r0,r4                 ;83
000014  3016              ADDS     r0,r0,#0x16           ;83
000016  f7fffffe          BL       __aeabi_uread4
00001a  4606              MOV      r6,r0                 ;83
00001c  4620              MOV      r0,r4                 ;83
00001e  301a              ADDS     r0,r0,#0x1a           ;83
000020  f7fffffe          BL       __aeabi_uread4
000024  4605              MOV      r5,r0                 ;83
000026  4631              MOV      r1,r6                 ;83
000028  4620              MOV      r0,r4                 ;83
00002a  47a8              BLX      r5                    ;83
00002c  bf00              NOP      
00002e  e7ef              B        |L8.16|
;;;85     
                          ENDP


                          AREA ||i.SwTimer_isStart||, CODE, READONLY, ALIGN=1

                  SwTimer_isStart PROC
;;;45     
;;;46     Bool SwTimer_isStart(SwTimer* pTimer)
000000  4601              MOV      r1,r0
;;;47     {
;;;48     	return pTimer->m_isStart;
000002  7d08              LDRB     r0,[r1,#0x14]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
;;;49     }
000008  4770              BX       lr
;;;50     
                          ENDP


                          AREA ||i.SwTimer_isTimerOut||, CODE, READONLY, ALIGN=2

                  SwTimer_isTimerOut PROC
;;;55     
;;;56     Bool SwTimer_isTimerOut(uint32 initTicks, uint32 newTicks, uint32 timeOutTicks)
000000  b5f8              PUSH     {r3-r7,lr}
;;;57     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;58     	uint32 totalTicks = 0;
000008  2700              MOVS     r7,#0
;;;59     	
;;;60     	SEGGER_RTT_printf(0,"### initTicks=%d newTicks=%d timeOutTicks=%d\n",initTicks,newTicks,timeOutTicks);
00000a  462b              MOV      r3,r5
00000c  4622              MOV      r2,r4
00000e  a10f              ADR      r1,|L10.76|
000010  2000              MOVS     r0,#0
000012  9600              STR      r6,[sp,#0]
000014  f7fffffe          BL       SEGGER_RTT_printf
;;;61     	if(newTicks < initTicks)
000018  42a5              CMP      r5,r4
00001a  d209              BCS      |L10.48|
;;;62     	{
;;;63     		//tick counter overflow
;;;64     		totalTicks = 0xFFFFFFFF - initTicks + newTicks;
00001c  1e78              SUBS     r0,r7,#1
00001e  1b00              SUBS     r0,r0,r4
000020  1947              ADDS     r7,r0,r5
;;;65     		
;;;66     		SEGGER_RTT_printf(0,"### function=%s line=%d \n",__FUNCTION__,__LINE__);
000022  2342              MOVS     r3,#0x42
000024  4a15              LDR      r2,|L10.124|
000026  a116              ADR      r1,|L10.128|
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       SEGGER_RTT_printf
00002e  e006              B        |L10.62|
                  |L10.48|
;;;67     	}
;;;68     	else
;;;69     	{
;;;70     	
;;;71     	SEGGER_RTT_printf(0,"### function=%s line=%d \n",__FUNCTION__,__LINE__);
000030  2347              MOVS     r3,#0x47
000032  4a12              LDR      r2,|L10.124|
000034  a112              ADR      r1,|L10.128|
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       SEGGER_RTT_printf
;;;72     		totalTicks = newTicks - initTicks;
00003c  1b2f              SUBS     r7,r5,r4
                  |L10.62|
;;;73     	}
;;;74     	
;;;75     	return (totalTicks >= timeOutTicks);
00003e  42b7              CMP      r7,r6
000040  d301              BCC      |L10.70|
000042  2001              MOVS     r0,#1
                  |L10.68|
;;;76     }
000044  bdf8              POP      {r3-r7,pc}
                  |L10.70|
000046  2000              MOVS     r0,#0                 ;75
000048  e7fc              B        |L10.68|
;;;77     
                          ENDP

00004a  0000              DCW      0x0000
                  |L10.76|
00004c  23232320          DCB      "### initTicks=%d newTicks=%d timeOutTicks=%d\n",0
000050  696e6974
000054  5469636b
000058  733d2564
00005c  206e6577
000060  5469636b
000064  733d2564
000068  2074696d
00006c  654f7574
000070  5469636b
000074  733d2564
000078  0a00    
00007a  00                DCB      0
00007b  00                DCB      0
                  |L10.124|
                          DCD      __FUNCTION__
                  |L10.128|
000080  23232320          DCB      "### function=%s line=%d \n",0
000084  66756e63
000088  74696f6e
00008c  3d257320
000090  6c696e65
000094  3d256420
000098  0a00    
00009a  00                DCB      0
00009b  00                DCB      0

                          AREA ||i.SwTimer_isTimerOutEx||, CODE, READONLY, ALIGN=1

                  SwTimer_isTimerOutEx PROC
;;;50     
;;;51     Bool SwTimer_isTimerOutEx(SwTimer* pTimer)
000000  b5f8              PUSH     {r3-r7,lr}
;;;52     {
000002  4604              MOV      r4,r0
;;;53     	return SwTimer_isTimerOut(pTimer->m_dwInitTicks, GET_TICKS(), pTimer->m_dwTimeoutTicks);
000004  4620              MOV      r0,r4
000006  300c              ADDS     r0,r0,#0xc
000008  f7fffffe          BL       __aeabi_uread4
00000c  4605              MOV      r5,r0
00000e  f7fffffe          BL       GetTime
000012  4606              MOV      r6,r0
000014  4620              MOV      r0,r4
000016  3010              ADDS     r0,r0,#0x10
000018  f7fffffe          BL       __aeabi_uread4
00001c  4607              MOV      r7,r0
00001e  462a              MOV      r2,r5
000020  4631              MOV      r1,r6
000022  f7fffffe          BL       SwTimer_isTimerOut
;;;54     }
000026  bdf8              POP      {r3-r7,pc}
;;;55     
                          ENDP


                          AREA ||i.TimerArray_Get||, CODE, READONLY, ALIGN=1

                  TimerArray_Get PROC
;;;114    
;;;115    SwTimer* TimerArray_Get(SwTimer* pTimerArray, int nCount, uint8 timerId)
000000  b510              PUSH     {r4,lr}
;;;116    {
000002  4603              MOV      r3,r0
;;;117    	int i = 0; 
000004  2400              MOVS     r4,#0
;;;118    
;;;119    	for(i = 0; i < nCount; i++, pTimerArray++)
000006  bf00              NOP      
000008  e006              B        |L12.24|
                  |L12.10|
;;;120    	{
;;;121    		if(pTimerArray->m_nTimerId == timerId)
00000a  7d58              LDRB     r0,[r3,#0x15]
00000c  4290              CMP      r0,r2
00000e  d101              BNE      |L12.20|
;;;122    		{
;;;123    			return pTimerArray;
000010  4618              MOV      r0,r3
                  |L12.18|
;;;124    		}
;;;125    	}
;;;126    
;;;127    	return Null;
;;;128    }
000012  bd10              POP      {r4,pc}
                  |L12.20|
000014  1c64              ADDS     r4,r4,#1              ;119
000016  3322              ADDS     r3,r3,#0x22           ;119
                  |L12.24|
000018  428c              CMP      r4,r1                 ;119
00001a  dbf6              BLT      |L12.10|
00001c  2000              MOVS     r0,#0                 ;127
00001e  e7f8              B        |L12.18|
;;;129    
                          ENDP


                          AREA ||i.TimerArray_New||, CODE, READONLY, ALIGN=1

                  TimerArray_New PROC
;;;99     ////////////////////////////////////////////////////////////////////////////////
;;;100    SwTimer* TimerArray_New(SwTimer* pTimerArray, int nCount)
000000  4602              MOV      r2,r0
;;;101    {
;;;102    	int i = 0; 
000002  2300              MOVS     r3,#0
;;;103    
;;;104    	for(i = 0; i < nCount; i++, pTimerArray++)
000004  bf00              NOP      
000006  e006              B        |L13.22|
                  |L13.8|
;;;105    	{
;;;106    		if(!pTimerArray->m_base.m_isUsed)
000008  7a10              LDRB     r0,[r2,#8]
00000a  2800              CMP      r0,#0
00000c  d101              BNE      |L13.18|
;;;107    		{
;;;108    			return pTimerArray;
00000e  4610              MOV      r0,r2
                  |L13.16|
;;;109    		}
;;;110    	}
;;;111    
;;;112    	return Null;
;;;113    }
000010  4770              BX       lr
                  |L13.18|
000012  1c5b              ADDS     r3,r3,#1              ;104
000014  3222              ADDS     r2,r2,#0x22           ;104
                  |L13.22|
000016  428b              CMP      r3,r1                 ;104
000018  dbf6              BLT      |L13.8|
00001a  2000              MOVS     r0,#0                 ;112
00001c  e7f8              B        |L13.16|
;;;114    
                          ENDP


                          AREA ||i.TimerManager_AddTimer||, CODE, READONLY, ALIGN=1

                  TimerManager_AddTimer PROC
;;;139    
;;;140    void TimerManager_AddTimer(TimerManager* pTm, SwTimer* pTimer)
000000  b570              PUSH     {r4-r6,lr}
;;;141    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;142    	pTimer->m_pTimerManager = pTm;
000006  4621              MOV      r1,r4
000008  311e              ADDS     r1,r1,#0x1e
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       __aeabi_uwrite4
;;;143    	if(Null == pTm->m_timerList)
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       __aeabi_uread4
000016  2800              CMP      r0,#0
000018  d104              BNE      |L14.36|
;;;144    	{
;;;145    		pTm->m_timerList = pTimer;
00001a  4629              MOV      r1,r5
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       __aeabi_uwrite4
000022  e006              B        |L14.50|
                  |L14.36|
;;;146    	}
;;;147    	else
;;;148    	{
;;;149    		List_AddTail((List*)pTm->m_timerList, (List*)pTimer);
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       __aeabi_uread4
00002a  4606              MOV      r6,r0
00002c  4621              MOV      r1,r4
00002e  f7fffffe          BL       List_AddTail
                  |L14.50|
;;;150    	}
;;;151    }	
000032  bd70              POP      {r4-r6,pc}
;;;152    
                          ENDP


                          AREA ||i.TimerManager_Init||, CODE, READONLY, ALIGN=1

                  TimerManager_Init PROC
;;;131    
;;;132    void TimerManager_Init(TimerManager* pTm)
000000  b510              PUSH     {r4,lr}
;;;133    {
000002  4604              MOV      r4,r0
;;;134    	memset(pTm, 0, sizeof(TimerManager));
000004  2108              MOVS     r1,#8
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       __aeabi_memclr
;;;135    	#ifdef TIMER_TEST
;;;136    	SwTimer_Test();
;;;137    	#endif
;;;138    }
00000c  bd10              POP      {r4,pc}
;;;139    
                          ENDP


                          AREA ||i.TimerManager_RemoveTimer||, CODE, READONLY, ALIGN=1

                  TimerManager_RemoveTimer PROC
;;;152    
;;;153    void TimerManager_RemoveTimer(SwTimer* pTimer)
000000  b570              PUSH     {r4-r6,lr}
;;;154    {
000002  4604              MOV      r4,r0
;;;155    	TimerManager* pTm = pTimer->m_pTimerManager;
000004  4620              MOV      r0,r4
000006  301e              ADDS     r0,r0,#0x1e
000008  f7fffffe          BL       __aeabi_uread4
00000c  4605              MOV      r5,r0
;;;156    	
;;;157    	if(Null == pTm || Null == pTm->m_timerList) return;
00000e  2d00              CMP      r5,#0
000010  d004              BEQ      |L16.28|
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       __aeabi_uread4
000018  2800              CMP      r0,#0
00001a  d100              BNE      |L16.30|
                  |L16.28|
;;;158    	
;;;159    	if(List_isIn((List*)pTm->m_timerList, (List*)pTimer))
;;;160    	{
;;;161    		pTm->m_timerList = (SwTimer*)List_Remove((List*)pTimer);
;;;162    	}
;;;163    }
00001c  bd70              POP      {r4-r6,pc}
                  |L16.30|
00001e  4628              MOV      r0,r5                 ;159
000020  f7fffffe          BL       __aeabi_uread4
000024  4606              MOV      r6,r0                 ;159
000026  4621              MOV      r1,r4                 ;159
000028  f7fffffe          BL       List_isIn
00002c  2800              CMP      r0,#0                 ;159
00002e  d006              BEQ      |L16.62|
000030  4620              MOV      r0,r4                 ;161
000032  f7fffffe          BL       List_Remove
000036  4606              MOV      r6,r0                 ;161
000038  4629              MOV      r1,r5                 ;161
00003a  f7fffffe          BL       __aeabi_uwrite4
                  |L16.62|
00003e  bf00              NOP      
000040  e7ec              B        |L16.28|
;;;164    
                          ENDP


                          AREA ||i.TimerManager_ResetTimer||, CODE, READONLY, ALIGN=1

                  TimerManager_ResetTimer PROC
;;;164    
;;;165    void TimerManager_ResetTimer(TimerManager* pTm, uint32 ticks)
000000  b570              PUSH     {r4-r6,lr}
;;;166    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;167    	SwTimer* pTimer = (SwTimer*)pTm->m_timerList;
000006  4630              MOV      r0,r6
000008  f7fffffe          BL       __aeabi_uread4
00000c  4604              MOV      r4,r0
;;;168    
;;;169    	pTm->m_ticks = ticks;
00000e  1d31              ADDS     r1,r6,#4
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       __aeabi_uwrite4
;;;170    	for(;pTimer != Null; pTimer = (SwTimer*)(((List*)pTimer)->m_pNext))
000016  e008              B        |L17.42|
                  |L17.24|
;;;171    	{
;;;172    		if(SwTimer_isStart(pTimer))
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       SwTimer_isStart
00001e  2800              CMP      r0,#0
000020  d002              BEQ      |L17.40|
;;;173    		{
;;;174    			SwTimer_Reset(pTimer);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       SwTimer_Reset
                  |L17.40|
000028  6824              LDR      r4,[r4,#0]            ;170
                  |L17.42|
00002a  2c00              CMP      r4,#0                 ;170
00002c  d1f4              BNE      |L17.24|
;;;175    		}
;;;176    	}
;;;177    }
00002e  bd70              POP      {r4-r6,pc}
;;;178    
                          ENDP


                          AREA ||i.TimerManager_Run||, CODE, READONLY, ALIGN=1

                  TimerManager_Run PROC
;;;178    
;;;179    void TimerManager_Run(TimerManager* pTm, uint32 ticks)
000000  b5f8              PUSH     {r3-r7,lr}
;;;180    {
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
;;;181    	//TimerManager* pTm = GetTimerManager();
;;;182    	List* pListNode = (List*)pTm->m_timerList;
000006  4630              MOV      r0,r6
000008  f7fffffe          BL       __aeabi_uread4
00000c  4604              MOV      r4,r0
;;;183    	SwTimer* pTimer = (SwTimer*)pListNode;
00000e  4625              MOV      r5,r4
;;;184    	Bool isTimeOut = False;
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
;;;185    
;;;186    	pTm->m_ticks = ticks;
000014  1d31              ADDS     r1,r6,#4
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       __aeabi_uwrite4
;;;187    	
;;;188    	if(Null == pListNode)
00001c  2c00              CMP      r4,#0
00001e  d100              BNE      |L18.34|
                  |L18.32|
;;;189    	{
;;;190    		return;
;;;191    	}
;;;192    	
;;;193    	do
;;;194    	{
;;;195    		isTimeOut = False;
;;;196    		if(SwTimer_isStart(pTimer))
;;;197    		{
;;;198    			if(SwTimer_isTimerOutEx(pTimer))
;;;199    			{
;;;200    				//SwTimer_Stop(pTimer);
;;;201    				
;;;202    				isTimeOut = True;
;;;203    				//Save the pListNode->pNext before calling SwTimer_TimerOut(), pListNode may be destoryed at SwTimer_TimerOut()
;;;204    				pListNode = pListNode->m_pNext;	
;;;205    				SwTimer_TimerOut(pTimer);
;;;206    			}
;;;207    		}
;;;208    
;;;209    		if(!isTimeOut)
;;;210    		{
;;;211    			pListNode = pListNode->m_pNext;
;;;212    		}
;;;213    		pTimer = (SwTimer*)pListNode;
;;;214    		
;;;215    	}while(pTimer);
;;;216    	
;;;217    }
000020  bdf8              POP      {r3-r7,pc}
                  |L18.34|
000022  bf00              NOP                            ;193
                  |L18.36|
000024  2000              MOVS     r0,#0                 ;195
000026  9000              STR      r0,[sp,#0]            ;195
000028  4628              MOV      r0,r5                 ;196
00002a  f7fffffe          BL       SwTimer_isStart
00002e  2800              CMP      r0,#0                 ;196
000030  d00a              BEQ      |L18.72|
000032  4628              MOV      r0,r5                 ;198
000034  f7fffffe          BL       SwTimer_isTimerOutEx
000038  2800              CMP      r0,#0                 ;198
00003a  d005              BEQ      |L18.72|
00003c  2001              MOVS     r0,#1                 ;202
00003e  9000              STR      r0,[sp,#0]            ;202
000040  6824              LDR      r4,[r4,#0]            ;204
000042  4628              MOV      r0,r5                 ;205
000044  f7fffffe          BL       SwTimer_TimerOut
                  |L18.72|
000048  9800              LDR      r0,[sp,#0]            ;209
00004a  2800              CMP      r0,#0                 ;209
00004c  d100              BNE      |L18.80|
00004e  6824              LDR      r4,[r4,#0]            ;211
                  |L18.80|
000050  4625              MOV      r5,r4                 ;213
000052  2d00              CMP      r5,#0                 ;215
000054  d1e6              BNE      |L18.36|
000056  bf00              NOP      
000058  e7e2              B        |L18.32|
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  53775469          DCB      0x53,0x77,0x54,0x69
000004  6d65725f          DCB      0x6d,0x65,0x72,0x5f
000008  69735469          DCB      0x69,0x73,0x54,0x69
00000c  6d65724f          DCB      0x6d,0x65,0x72,0x4f
000010  757400            DCB      0x75,0x74,0x00

;*** Start embedded assembler ***

#line 1 "..\\iap2\\SwTimer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_SwTimer_c_8eddae80____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___9_SwTimer_c_8eddae80____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_SwTimer_c_8eddae80____REVSH|
#line 144
|__asm___9_SwTimer_c_8eddae80____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
