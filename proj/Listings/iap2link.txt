; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\iap2link.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\iap2link.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I..\iap2 -IC:\Users\dell1\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -D__UVISION_VERSION=534 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\iap2link.crf ..\iap2\Iap2Link.c]
                          THUMB

                          AREA ||i.Iap2LinkPkt_GetCheckSum||, CODE, READONLY, ALIGN=1

                  Iap2LinkPkt_GetCheckSum PROC
;;;21     
;;;22     static uint8 Iap2LinkPkt_GetCheckSum(const void* pData, uint16 len)
000000  b570              PUSH     {r4-r6,lr}
;;;23     {
000002  4602              MOV      r2,r0
;;;24         uint16 i;
;;;25         uint8 sum = 0;
000004  2400              MOVS     r4,#0
;;;26     	uint8* pByte = (uint8*)pData;
000006  4615              MOV      r5,r2
;;;27         
;;;28         for(i = 0; i < len; i++)
000008  2300              MOVS     r3,#0
00000a  e005              B        |L1.24|
                  |L1.12|
;;;29         {
;;;30             sum += *pByte++;
00000c  782e              LDRB     r6,[r5,#0]
00000e  1c6d              ADDS     r5,r5,#1
000010  1930              ADDS     r0,r6,r4
000012  b2c4              UXTB     r4,r0
000014  1c58              ADDS     r0,r3,#1              ;28
000016  b283              UXTH     r3,r0                 ;28
                  |L1.24|
000018  428b              CMP      r3,r1                 ;28
00001a  dbf7              BLT      |L1.12|
;;;31         }
;;;32         
;;;33         return (uint8)(((~sum) & 0xff) + 1);
00001c  43e0              MVNS     r0,r4
00001e  1c40              ADDS     r0,r0,#1
000020  b2c0              UXTB     r0,r0
;;;34     }
000022  bd70              POP      {r4-r6,pc}
;;;35     
                          ENDP


                          AREA ||i.Iap2LinkPkt_Init||, CODE, READONLY, ALIGN=1

                  Iap2LinkPkt_Init PROC
;;;36     
;;;37     int Iap2LinkPkt_Init(Iap2LinkPkt* pPkt
000000  b5ff              PUSH     {r0-r7,lr}
;;;38     	, CtrlByte ctrl
;;;39     	, uint8 seq
;;;40     	, uint8 ackSeq
;;;41     	, uint8 sessionId
;;;42     	, const void* pSessionMgr
;;;43     	, uint16 pSessionMgrLen)
;;;44     {
000002  b083              SUB      sp,sp,#0xc
000004  4604              MOV      r4,r0
000006  9d0e              LDR      r5,[sp,#0x38]
;;;45     	uint8* pByte = (uint8*)pPkt;
000008  9402              STR      r4,[sp,#8]
;;;46     	uint16 totalLen = pSessionMgrLen + IAP2_PKT_HEAD_SIZE;
00000a  4628              MOV      r0,r5
00000c  3009              ADDS     r0,r0,#9
00000e  b287              UXTH     r7,r0
;;;47     	Iap2CtrlSessionMsg *pIap2CtrlSessionMsg;
;;;48     
;;;49     	if(pSessionMgrLen)
000010  2d00              CMP      r5,#0
000012  d001              BEQ      |L2.24|
;;;50     	{
;;;51     		totalLen += 1;	//Check sum
000014  1c78              ADDS     r0,r7,#1
000016  b287              UXTH     r7,r0
                  |L2.24|
;;;52     	}
;;;53     	
;;;54     	memset(pPkt, 0, sizeof(Iap2LinkPkt));
000018  210a              MOVS     r1,#0xa
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       __aeabi_memclr
;;;55     	pPkt->m_Sof = SOP;
000020  20a5              MOVS     r0,#0xa5
000022  43c0              MVNS     r0,r0
000024  7020              STRB     r0,[r4,#0]
000026  0a00              LSRS     r0,r0,#8
000028  7060              STRB     r0,[r4,#1]
;;;56     
;;;57     	pPkt->m_Len = SWAP16(totalLen);
00002a  70a7              STRB     r7,[r4,#2]
00002c  0a38              LSRS     r0,r7,#8
00002e  70e0              STRB     r0,[r4,#3]
;;;58     
;;;59     	AS_UINT8(pPkt->m_CtrlByte)	= AS_UINT8(ctrl);
000030  4668              MOV      r0,sp
000032  7c00              LDRB     r0,[r0,#0x10]
000034  7120              STRB     r0,[r4,#4]
;;;60     	pPkt->m_SeqNum 		= seq;
000036  9805              LDR      r0,[sp,#0x14]
000038  7160              STRB     r0,[r4,#5]
;;;61     	pPkt->m_AckSeqNum 	= ackSeq;
00003a  9806              LDR      r0,[sp,#0x18]
00003c  71a0              STRB     r0,[r4,#6]
;;;62     	pPkt->m_SessionId 	= sessionId;
00003e  980c              LDR      r0,[sp,#0x30]
000040  71e0              STRB     r0,[r4,#7]
;;;63     	pPkt->m_HeaderSum	= Iap2LinkPkt_GetCheckSum(pByte, IAP2_PKT_HEAD_SIZE-1);
000042  2108              MOVS     r1,#8
000044  9802              LDR      r0,[sp,#8]
000046  f7fffffe          BL       Iap2LinkPkt_GetCheckSum
00004a  7220              STRB     r0,[r4,#8]
;;;64     
;;;65     	memcpy(pPkt->m_Payload, pSessionMgr, pSessionMgrLen);
00004c  462a              MOV      r2,r5
00004e  4620              MOV      r0,r4
000050  3009              ADDS     r0,r0,#9
000052  990d              LDR      r1,[sp,#0x34]
000054  f7fffffe          BL       __aeabi_memcpy
;;;66     	 pIap2CtrlSessionMsg = (Iap2CtrlSessionMsg *)pSessionMgr;
000058  9e0d              LDR      r6,[sp,#0x34]
;;;67     	 if(pIap2CtrlSessionMsg->m_Param!=NULL)
00005a  1db0              ADDS     r0,r6,#6
00005c  2800              CMP      r0,#0
00005e  d010              BEQ      |L2.130|
;;;68     	 	if(pIap2CtrlSessionMsg->m_Param->m_Data!=NULL)
000060  1d00              ADDS     r0,r0,#4
000062  f7fffffe          BL       __aeabi_uread4
000066  2800              CMP      r0,#0
000068  d00b              BEQ      |L2.130|
;;;69     	 		{
;;;70     			free(pIap2CtrlSessionMsg->m_Param->m_Data);
00006a  4630              MOV      r0,r6
00006c  300a              ADDS     r0,r0,#0xa
00006e  f7fffffe          BL       __aeabi_uread4
000072  9001              STR      r0,[sp,#4]
000074  f7fffffe          BL       free
;;;71     			pIap2CtrlSessionMsg->m_Param->m_Data = NULL;
000078  4631              MOV      r1,r6
00007a  310a              ADDS     r1,r1,#0xa
00007c  2000              MOVS     r0,#0
00007e  f7fffffe          BL       __aeabi_uwrite4
                  |L2.130|
;;;72     	 		}
;;;73     
;;;74     	pByte = pPkt->m_Payload; 
000082  4620              MOV      r0,r4
000084  3009              ADDS     r0,r0,#9
000086  9002              STR      r0,[sp,#8]
;;;75     	pByte[pSessionMgrLen] = Iap2LinkPkt_GetCheckSum(pPkt->m_Payload, pSessionMgrLen);
000088  4629              MOV      r1,r5
00008a  f7fffffe          BL       Iap2LinkPkt_GetCheckSum
00008e  9902              LDR      r1,[sp,#8]
000090  5548              STRB     r0,[r1,r5]
;;;76     
;;;77     	return totalLen;
000092  4638              MOV      r0,r7
;;;78     	
;;;79     }
000094  b007              ADD      sp,sp,#0x1c
000096  bdf0              POP      {r4-r7,pc}
;;;80     
                          ENDP


                          AREA ||i.Iap2Link_AckInit||, CODE, READONLY, ALIGN=1

                  Iap2Link_AckInit PROC
;;;233    
;;;234    int Iap2Link_AckInit(Iap2LinkPkt* pAckPkt, const Iap2LinkPkt* pPkt)
000000  b57f              PUSH     {r0-r6,lr}
;;;235    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;236    	CtrlByte ctrlByte;
;;;237    	int nLen = 0;
000006  2600              MOVS     r6,#0
;;;238    
;;;239    	AS_UINT8(ctrlByte) = 0;
000008  2100              MOVS     r1,#0
00000a  9103              STR      r1,[sp,#0xc]
;;;240    	ctrlByte.m_AckBit = 1;
00000c  4668              MOV      r0,sp
00000e  7b00              LDRB     r0,[r0,#0xc]
000010  2140              MOVS     r1,#0x40
000012  4388              BICS     r0,r0,r1
000014  3040              ADDS     r0,r0,#0x40
000016  9003              STR      r0,[sp,#0xc]
;;;241    	nLen = Iap2LinkPkt_Init(pAckPkt
000018  2000              MOVS     r0,#0
00001a  9000              STR      r0,[sp,#0]
00001c  9001              STR      r0,[sp,#4]
00001e  9002              STR      r0,[sp,#8]
000020  7963              LDRB     r3,[r4,#5]
000022  79a2              LDRB     r2,[r4,#6]
000024  4628              MOV      r0,r5
000026  9903              LDR      r1,[sp,#0xc]
000028  f7fffffe          BL       Iap2LinkPkt_Init
00002c  4606              MOV      r6,r0
;;;242    		, ctrlByte
;;;243    		, pPkt->m_AckSeqNum
;;;244    		, pPkt->m_SeqNum
;;;245    		, 0
;;;246    		, Null
;;;247    		, 0
;;;248    		);
;;;249    	
;;;250    	//Send ACK
;;;251    	return nLen;
00002e  4630              MOV      r0,r6
;;;252    }
000030  b004              ADD      sp,sp,#0x10
000032  bd70              POP      {r4-r6,pc}
;;;253    
                          ENDP


                          AREA ||i.Iap2Link_Init||, CODE, READONLY, ALIGN=2

                  Iap2Link_Init PROC
;;;482    
;;;483    void Iap2Link_Init(Iap2Link* pIap2Link, Iap2LinkTransferFn Transfer)
000000  b570              PUSH     {r4-r6,lr}
;;;484    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;485    	memset(pIap2Link, 0, sizeof(Iap2Link));
000006  4910              LDR      r1,|L4.72|
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       __aeabi_memclr
;;;486    	
;;;487    	pIap2Link->TransferStart = Transfer;
00000e  480e              LDR      r0,|L4.72|
000010  1f00              SUBS     r0,r0,#4
000012  1821              ADDS     r1,r4,r0
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       __aeabi_uwrite4
;;;488    
;;;489    	//Init the data pointer
;;;490    	pIap2Link->m_pReqPkt = (Iap2LinkPkt*)&pIap2Link->_ReqPkt;
00001a  480b              LDR      r0,|L4.72|
00001c  383f              SUBS     r0,r0,#0x3f
00001e  1821              ADDS     r1,r4,r0
000020  4620              MOV      r0,r4
000022  3036              ADDS     r0,r0,#0x36
000024  f7fffffe          BL       __aeabi_uwrite4
;;;491    	pIap2Link->m_pRspPkt = (Iap2LinkPkt*)&pIap2Link->_RspPkt;
000028  4807              LDR      r0,|L4.72|
00002a  383b              SUBS     r0,r0,#0x3b
00002c  1821              ADDS     r1,r4,r0
00002e  4620              MOV      r0,r4
000030  3080              ADDS     r0,r0,#0x80
000032  f7fffffe          BL       __aeabi_uwrite4
;;;492    	pIap2Link->m_pAckPkt = &pIap2Link->_AckPkt;
000036  4804              LDR      r0,|L4.72|
000038  3837              SUBS     r0,r0,#0x37
00003a  1821              ADDS     r1,r4,r0
00003c  4802              LDR      r0,|L4.72|
00003e  3849              SUBS     r0,r0,#0x49
000040  1820              ADDS     r0,r4,r0
000042  f7fffffe          BL       __aeabi_uwrite4
;;;493    }
000046  bd70              POP      {r4-r6,pc}
;;;494    
                          ENDP

                  |L4.72|
                          DCD      0x00000505

                          AREA ||i.Iap2Link_Notify||, CODE, READONLY, ALIGN=1

                  Iap2Link_Notify PROC
;;;223    
;;;224    void Iap2Link_Notify(Iap2Link* pIap2Link, Iap2Event eventId)
000000  b5f8              PUSH     {r3-r7,lr}
;;;225    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;226    	pIap2Link->m_pSessionMgr->EventProc(pIap2Link->m_pSessionMgr, eventId);
000006  4620              MOV      r0,r4
000008  302b              ADDS     r0,r0,#0x2b
00000a  f7fffffe          BL       __aeabi_uread4
00000e  9000              STR      r0,[sp,#0]
000010  4620              MOV      r0,r4
000012  302b              ADDS     r0,r0,#0x2b
000014  f7fffffe          BL       __aeabi_uread4
000018  1d07              ADDS     r7,r0,#4
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       __aeabi_uread4
000020  4606              MOV      r6,r0
000022  4629              MOV      r1,r5
000024  9800              LDR      r0,[sp,#0]
000026  47b0              BLX      r6
;;;227    }
000028  bdf8              POP      {r3-r7,pc}
;;;228    
                          ENDP


                          AREA ||i.Iap2Link_Payload_Eak||, CODE, READONLY, ALIGN=1

                  Iap2Link_Payload_Eak PROC
;;;253    
;;;254    Iap2Rc Iap2Link_Payload_Eak(Iap2Link* pIap2Link, Iap2Event event, const Iap2LinkPkt* pPkt)
000000  4603              MOV      r3,r0
;;;255    {
;;;256    	return IAP2RC_SUCCESS;
000002  2000              MOVS     r0,#0
;;;257    }
000004  4770              BX       lr
;;;258    
                          ENDP


                          AREA ||i.Iap2Link_Payload_SyncLink||, CODE, READONLY, ALIGN=2

                  Iap2Link_Payload_SyncLink PROC
;;;258    
;;;259    Iap2Rc Iap2Link_Payload_SyncLink(Iap2Link* pIap2Link, Iap2Event event, const Iap2LinkPkt* pPkt)
000000  b5fe              PUSH     {r1-r7,lr}
;;;260    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;261    	//int i = 0;
;;;262    	int nLen = 0;
000008  2700              MOVS     r7,#0
;;;263    	
;;;264    	if(IAP2_EVENT_TRANSFER_SUCCESS == event)
00000a  2d06              CMP      r5,#6
00000c  d136              BNE      |L7.124|
;;;265    	{
;;;266    		if(IAP2_STATE_TX_LINK_SYNC == pIap2Link->m_State)
00000e  7820              LDRB     r0,[r4,#0]
000010  2801              CMP      r0,#1
000012  d10c              BNE      |L7.46|
;;;267    		{
;;;268    			Iap2Link_RcvData(pIap2Link, pIap2Link->m_pRspPkt, LINK_SYNC_PKT_SIZE);
000014  481a              LDR      r0,|L7.128|
000016  1820              ADDS     r0,r4,r0
000018  f7fffffe          BL       __aeabi_uread4
00001c  2217              MOVS     r2,#0x17
00001e  4601              MOV      r1,r0
000020  9001              STR      r0,[sp,#4]
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       Iap2Link_RcvData
;;;269    			pIap2Link->m_State = IAP2_STATE_RX_LINK_SYNC;
000028  2002              MOVS     r0,#2
00002a  7020              STRB     r0,[r4,#0]
00002c  e026              B        |L7.124|
                  |L7.46|
;;;270    		}
;;;271    		else if(IAP2_STATE_RX_LINK_SYNC == pIap2Link->m_State)
00002e  7820              LDRB     r0,[r4,#0]
000030  2802              CMP      r0,#2
000032  d11a              BNE      |L7.106|
;;;272    		{
;;;273    			nLen = Iap2Link_AckInit(pIap2Link->m_pAckPkt, pPkt);
000034  4812              LDR      r0,|L7.128|
000036  1d00              ADDS     r0,r0,#4
000038  1820              ADDS     r0,r4,r0
00003a  f7fffffe          BL       __aeabi_uread4
00003e  4631              MOV      r1,r6
000040  9001              STR      r0,[sp,#4]
000042  f7fffffe          BL       Iap2Link_AckInit
000046  4607              MOV      r7,r0
;;;274    			Iap2Link_TxData(pIap2Link, pIap2Link->m_pAckPkt, nLen, 0, 0);
000048  480d              LDR      r0,|L7.128|
00004a  1d00              ADDS     r0,r0,#4
00004c  1820              ADDS     r0,r4,r0
00004e  f7fffffe          BL       __aeabi_uread4
000052  9001              STR      r0,[sp,#4]
000054  2000              MOVS     r0,#0
000056  4603              MOV      r3,r0
000058  463a              MOV      r2,r7
00005a  9000              STR      r0,[sp,#0]
00005c  4620              MOV      r0,r4
00005e  9901              LDR      r1,[sp,#4]
000060  f7fffffe          BL       Iap2Link_TxData
;;;275    			pIap2Link->m_State = IAP2_STATE_TX_ACK;
000064  2003              MOVS     r0,#3
000066  7020              STRB     r0,[r4,#0]
000068  e008              B        |L7.124|
                  |L7.106|
;;;276    		}
;;;277    		else if(IAP2_STATE_TX_ACK == pIap2Link->m_State)
00006a  7820              LDRB     r0,[r4,#0]
00006c  2803              CMP      r0,#3
00006e  d105              BNE      |L7.124|
;;;278    		{
;;;279    			Iap2Link_Notify(pIap2Link, IAP2_EVENT_LINK_SYNC_DONE);
000070  2105              MOVS     r1,#5
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       Iap2Link_Notify
;;;280    			pIap2Link->m_State = IAP2_STATE_LINK_DONE;
000078  2005              MOVS     r0,#5
00007a  7020              STRB     r0,[r4,#0]
                  |L7.124|
;;;281    		}
;;;282    	}
;;;283    
;;;284    	return IAP2RC_SUCCESS;
00007c  2000              MOVS     r0,#0
;;;285    }
00007e  bdfe              POP      {r1-r7,pc}
;;;286    
                          ENDP

                  |L7.128|
                          DCD      0x000004ca

                          AREA ||i.Iap2Link_RcvData||, CODE, READONLY, ALIGN=2

                  Iap2Link_RcvData PROC
;;;202    //Secudule a receive proc
;;;203    Bool Iap2Link_RcvData(Iap2Link* pIap2Link, void* pBuff, int len)
000000  b5f8              PUSH     {r3-r7,lr}
;;;204    {
000002  4605              MOV      r5,r0
000004  460f              MOV      r7,r1
000006  4616              MOV      r6,r2
;;;205    	Irb* pIrb = &pIap2Link->m_Irb;
000008  209f              MOVS     r0,#0x9f
00000a  00c0              LSLS     r0,r0,#3
00000c  182c              ADDS     r4,r5,r0
;;;206    	//ASRT(len <= sizeof(Iap2LinkRspPkt));
;;;207    	if(!(len <= sizeof(Iap2LinkRspPkt)))
00000e  4812              LDR      r0,|L8.88|
000010  4286              CMP      r6,r0
000012  d901              BLS      |L8.24|
;;;208    		 return FALSE ;
000014  2000              MOVS     r0,#0
                  |L8.22|
;;;209    	SEGGER_RTT_printf(0,"Iap2Link_RcvData pIrb->m_isTx 	= false \n");
;;;210    		
;;;211    	pIrb->m_isTx = False;
;;;212    	pIrb->m_pBuff = (uint8*)pBuff;
;;;213    	pIrb->m_Len 	= len;
;;;214    	pIrb->m_ActLen 	= 0;
;;;215    
;;;216    	//PF(DL_MAIN, ("Receive data[%d] start.\n", len));
;;;217    	if(!pIap2Link->TransferStart(pIrb))
;;;218    	{
;;;219    		return False;
;;;220    	}
;;;221    	return True;
;;;222    }
000016  bdf8              POP      {r3-r7,pc}
                  |L8.24|
000018  a110              ADR      r1,|L8.92|
00001a  2000              MOVS     r0,#0                 ;209
00001c  f7fffffe          BL       SEGGER_RTT_printf
000020  2000              MOVS     r0,#0                 ;211
000022  7020              STRB     r0,[r4,#0]            ;211
000024  1c61              ADDS     r1,r4,#1              ;212
000026  4638              MOV      r0,r7                 ;212
000028  f7fffffe          BL       __aeabi_uwrite4
00002c  b2b1              UXTH     r1,r6                 ;213
00002e  7161              STRB     r1,[r4,#5]            ;213
000030  0a09              LSRS     r1,r1,#8              ;213
000032  71a1              STRB     r1,[r4,#6]            ;213
000034  2100              MOVS     r1,#0                 ;214
000036  71e1              STRB     r1,[r4,#7]            ;214
000038  7221              STRB     r1,[r4,#8]            ;214
00003a  4807              LDR      r0,|L8.88|
00003c  30c5              ADDS     r0,r0,#0xc5           ;217
00003e  1828              ADDS     r0,r5,r0              ;217
000040  f7fffffe          BL       __aeabi_uread4
000044  9000              STR      r0,[sp,#0]            ;217
000046  4620              MOV      r0,r4                 ;217
000048  9900              LDR      r1,[sp,#0]            ;217
00004a  4788              BLX      r1                    ;217
00004c  2800              CMP      r0,#0                 ;217
00004e  d100              BNE      |L8.82|
000050  e7e1              B        |L8.22|
                  |L8.82|
000052  2001              MOVS     r0,#1                 ;221
000054  e7df              B        |L8.22|
;;;223    
                          ENDP

000056  0000              DCW      0x0000
                  |L8.88|
                          DCD      0x0000043c
                  |L8.92|
00005c  49617032          DCB      "Iap2Link_RcvData pIrb->m_isTx \t= false \n",0
000060  4c696e6b
000064  5f526376
000068  44617461
00006c  20704972
000070  622d3e6d
000074  5f697354
000078  7820093d
00007c  2066616c
000080  7365200a
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.Iap2Link_ReTx||, CODE, READONLY, ALIGN=2

                  Iap2Link_ReTx PROC
;;;186    
;;;187    Bool Iap2Link_ReTx(Iap2Link* pIap2Link)
000000  b570              PUSH     {r4-r6,lr}
;;;188    {
000002  4604              MOV      r4,r0
;;;189    	SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
000004  23bd              MOVS     r3,#0xbd
000006  4a13              LDR      r2,|L9.84|
000008  a113              ADR      r1,|L9.88|
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       SEGGER_RTT_printf
;;;190    
;;;191    	if(!pIap2Link->TransferStart(&pIap2Link->m_Irb))
000010  4818              LDR      r0,|L9.116|
000012  1820              ADDS     r0,r4,r0
000014  f7fffffe          BL       __aeabi_uread4
000018  4605              MOV      r5,r0
00001a  209f              MOVS     r0,#0x9f
00001c  00c0              LSLS     r0,r0,#3
00001e  1820              ADDS     r0,r4,r0
000020  47a8              BLX      r5
000022  2800              CMP      r0,#0
000024  d100              BNE      |L9.40|
                  |L9.38|
;;;192    	{
;;;193    		return False;
;;;194    	}
;;;195    	SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
;;;196    
;;;197    	SwTimer_Start(&pIap2Link->m_ReTxTimer, IAP2_LINK_INIT_TIMERID, pIap2Link->m_ReSendTimeMs);
;;;198    
;;;199    	return True;
;;;200    }
000026  bd70              POP      {r4-r6,pc}
                  |L9.40|
000028  23c3              MOVS     r3,#0xc3              ;195
00002a  4a0a              LDR      r2,|L9.84|
00002c  a10a              ADR      r1,|L9.88|
00002e  2000              MOVS     r0,#0                 ;195
000030  f7fffffe          BL       SEGGER_RTT_printf
000034  480f              LDR      r0,|L9.116|
000036  381f              SUBS     r0,r0,#0x1f           ;197
000038  1821              ADDS     r1,r4,r0              ;197
00003a  7d48              LDRB     r0,[r1,#0x15]         ;197
00003c  7d09              LDRB     r1,[r1,#0x14]         ;197
00003e  0200              LSLS     r0,r0,#8              ;197
000040  4308              ORRS     r0,r0,r1              ;197
000042  4602              MOV      r2,r0                 ;197
000044  2101              MOVS     r1,#1                 ;197
000046  480b              LDR      r0,|L9.116|
000048  382f              SUBS     r0,r0,#0x2f           ;197
00004a  1820              ADDS     r0,r4,r0              ;197
00004c  f7fffffe          BL       SwTimer_Start
000050  2001              MOVS     r0,#1                 ;199
000052  e7e8              B        |L9.38|
;;;201    
                          ENDP

                  |L9.84|
                          DCD      __FUNCTION__
                  |L9.88|
000058  23232320          DCB      "### function=%s line=%d\n",0
00005c  66756e63
000060  74696f6e
000064  3d257320
000068  6c696e65
00006c  3d25640a
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L9.116|
                          DCD      0x00000501

                          AREA ||i.Iap2Link_RegSession||, CODE, READONLY, ALIGN=1

                  Iap2Link_RegSession PROC
;;;459    
;;;460    void Iap2Link_RegSession(Iap2Link* pIap2Link, SessionMgr* pSession)
000000  b570              PUSH     {r4-r6,lr}
;;;461    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;462    //	ASRT(pIap2Link->m_SessionCount < IAP2_MAX_PAYLOAD_COUNT);
;;;463    	memcpy(&pIap2Link->m_Session[pIap2Link->m_SessionCount++], pSession, sizeof(SessionIden));
000006  212f              MOVS     r1,#0x2f
000008  5d0a              LDRB     r2,[r1,r4]
00000a  5d09              LDRB     r1,[r1,r4]
00000c  1c49              ADDS     r1,r1,#1
00000e  b2cb              UXTB     r3,r1
000010  212f              MOVS     r1,#0x2f
000012  550b              STRB     r3,[r1,r4]
000014  0051              LSLS     r1,r2,#1
000016  1852              ADDS     r2,r2,r1
000018  4621              MOV      r1,r4
00001a  3130              ADDS     r1,r1,#0x30
00001c  1850              ADDS     r0,r2,r1
00001e  2203              MOVS     r2,#3
000020  4629              MOV      r1,r5
000022  f7fffffe          BL       __aeabi_memcpy
;;;464    
;;;465    	pIap2Link->m_pSessionMgr = pSession;
000026  4621              MOV      r1,r4
000028  312b              ADDS     r1,r1,#0x2b
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       __aeabi_uwrite4
;;;466    }
000030  bd70              POP      {r4-r6,pc}
;;;467    
                          ENDP


                          AREA ||i.Iap2Link_Run||, CODE, READONLY, ALIGN=2

                  Iap2Link_Run PROC
;;;437    
;;;438    void Iap2Link_Run(Iap2Link* pIap2Link)
000000  b510              PUSH     {r4,lr}
;;;439    {
000002  4604              MOV      r4,r0
;;;440    
;;;441    //if( )
;;;442    
;;;443    	SEGGER_RTT_printf(0,"### function=%s pIap2Link->m_ReTxTimer.m_isStart=%d\n",__FUNCTION__,pIap2Link->m_ReTxTimer.m_isStart);
000004  481c              LDR      r0,|L11.120|
000006  1820              ADDS     r0,r4,r0
000008  7d00              LDRB     r0,[r0,#0x14]
00000a  07c3              LSLS     r3,r0,#31
00000c  0fdb              LSRS     r3,r3,#31
00000e  4a1b              LDR      r2,|L11.124|
000010  a11b              ADR      r1,|L11.128|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       SEGGER_RTT_printf
;;;444    
;;;445    	if(pIap2Link->m_ReTxTimer.m_isStart
000018  4817              LDR      r0,|L11.120|
00001a  1820              ADDS     r0,r4,r0
00001c  7d00              LDRB     r0,[r0,#0x14]
00001e  07c0              LSLS     r0,r0,#31
000020  0fc0              LSRS     r0,r0,#31
000022  2800              CMP      r0,#0
000024  d026              BEQ      |L11.116|
;;;446    		&& SwTimer_isTimerOutEx(&pIap2Link->m_ReTxTimer))
000026  4814              LDR      r0,|L11.120|
000028  1820              ADDS     r0,r4,r0
00002a  f7fffffe          BL       SwTimer_isTimerOutEx
00002e  2800              CMP      r0,#0
000030  d020              BEQ      |L11.116|
;;;447    	{
;;;448    	
;;;449    	SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
000032  23ff              MOVS     r3,#0xff
000034  33c2              ADDS     r3,r3,#0xc2
000036  4a11              LDR      r2,|L11.124|
000038  a11f              ADR      r1,|L11.184|
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       SEGGER_RTT_printf
;;;450    		if(pIap2Link->m_ReTxCount <= pIap2Link->m_MaxReTxCount
000040  2027              MOVS     r0,#0x27
000042  0140              LSLS     r0,r0,#5
000044  1820              ADDS     r0,r4,r0
000046  7d00              LDRB     r0,[r0,#0x14]
000048  2127              MOVS     r1,#0x27
00004a  0149              LSLS     r1,r1,#5
00004c  1861              ADDS     r1,r4,r1
00004e  7d49              LDRB     r1,[r1,#0x15]
000050  4288              CMP      r0,r1
000052  dd05              BLE      |L11.96|
;;;451    			|| IAP2_LINK_RETX_COUNT_UNLIMITIED == pIap2Link->m_MaxReTxCount)
000054  2027              MOVS     r0,#0x27
000056  0140              LSLS     r0,r0,#5
000058  1820              ADDS     r0,r4,r0
00005a  7d40              LDRB     r0,[r0,#0x15]
00005c  28ff              CMP      r0,#0xff
00005e  d109              BNE      |L11.116|
                  |L11.96|
;;;452    		{
;;;453    		
;;;454    		SEGGER_RTT_printf(0,"### function=%s line=%d\n",__FUNCTION__,__LINE__);
000060  23ff              MOVS     r3,#0xff
000062  33c7              ADDS     r3,r3,#0xc7
000064  4a05              LDR      r2,|L11.124|
000066  a114              ADR      r1,|L11.184|
000068  2000              MOVS     r0,#0
00006a  f7fffffe          BL       SEGGER_RTT_printf
;;;455    			Iap2Link_ReTx(pIap2Link);
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       Iap2Link_ReTx
                  |L11.116|
;;;456    		}
;;;457    	}
;;;458    }
000074  bd10              POP      {r4,pc}
;;;459    
                          ENDP

000076  0000              DCW      0x0000
                  |L11.120|
                          DCD      0x000004d2
                  |L11.124|
                          DCD      |symbol_number.65|
                  |L11.128|
000080  23232320          DCB      "### function=%s pIap2Link->m_ReTxTimer.m_isStart=%d\n",0
000084  66756e63
000088  74696f6e
00008c  3d257320
000090  70496170
000094  324c696e
000098  6b2d3e6d
00009c  5f526554
0000a0  7854696d
0000a4  65722e6d
0000a8  5f697353
0000ac  74617274
0000b0  3d25640a
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L11.184|
0000b8  23232320          DCB      "### function=%s line=%d\n",0
0000bc  66756e63
0000c0  74696f6e
0000c4  3d257320
0000c8  6c696e65
0000cc  3d25640a
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0

                          AREA ||i.Iap2Link_SendSyncPkt||, CODE, READONLY, ALIGN=2

                  Iap2Link_SendSyncPkt PROC
;;;286    
;;;287    Iap2Rc Iap2Link_SendSyncPkt(Iap2Link* pIap2Link)
000000  b570              PUSH     {r4-r6,lr}
;;;288    {
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
;;;289    	int i = 0;
000006  bf00              NOP      
;;;290    	CtrlByte ctrlByte;
;;;291    	LinkPayload linkPayload;
;;;292    	Iap2LinkPkt* pPkt = pIap2Link->m_pReqPkt;
000008  4821              LDR      r0,|L12.144|
00000a  1820              ADDS     r0,r4,r0
00000c  f7fffffe          BL       __aeabi_uread4
000010  4606              MOV      r6,r0
;;;293    	
;;;294    	//Valid initialization packet
;;;295    	Iap2Link_Notify(pIap2Link, IAP2_EVENT_HAND_SHAKE);
000012  2102              MOVS     r1,#2
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       Iap2Link_Notify
;;;296    
;;;297    	//Sends a SYN packet containing desired connection parameters in the Link Synchronization Payload
;;;298    	LinkPayload_Init(&linkPayload);
00001a  a803              ADD      r0,sp,#0xc
00001c  f7fffffe          BL       LinkPayload_Init
;;;299    	memcpy(linkPayload.m_Session, pIap2Link->m_Session, sizeof(SessionIden) * pIap2Link->m_SessionCount);
000020  202f              MOVS     r0,#0x2f
000022  5d00              LDRB     r0,[r0,r4]
000024  0041              LSLS     r1,r0,#1
000026  1842              ADDS     r2,r0,r1
000028  4621              MOV      r1,r4
00002a  3130              ADDS     r1,r1,#0x30
00002c  a805              ADD      r0,sp,#0x14
00002e  3002              ADDS     r0,#2
000030  f7fffffe          BL       __aeabi_memcpy
;;;300    
;;;301    	AS_UINT8(ctrlByte) = 0;
000034  2100              MOVS     r1,#0
000036  9107              STR      r1,[sp,#0x1c]
;;;302    	ctrlByte.m_SynBit = 1;
000038  4668              MOV      r0,sp
00003a  7f00              LDRB     r0,[r0,#0x1c]
00003c  2180              MOVS     r1,#0x80
00003e  4388              BICS     r0,r0,r1
000040  3080              ADDS     r0,r0,#0x80
000042  9007              STR      r0,[sp,#0x1c]
;;;303    	i = Iap2LinkPkt_Init(pPkt
000044  202f              MOVS     r0,#0x2f
000046  5d00              LDRB     r0,[r0,r4]
000048  0041              LSLS     r1,r0,#1
00004a  1840              ADDS     r0,r0,r1
00004c  300a              ADDS     r0,r0,#0xa
00004e  a903              ADD      r1,sp,#0xc
000050  2200              MOVS     r2,#0
000052  9200              STR      r2,[sp,#0]
000054  9101              STR      r1,[sp,#4]
000056  9002              STR      r0,[sp,#8]
000058  2023              MOVS     r0,#0x23
00005a  5d02              LDRB     r2,[r0,r4]
00005c  5d00              LDRB     r0,[r0,r4]
00005e  1c40              ADDS     r0,r0,#1
000060  b2c3              UXTB     r3,r0
000062  2023              MOVS     r0,#0x23
000064  5503              STRB     r3,[r0,r4]
000066  2300              MOVS     r3,#0
000068  4630              MOV      r0,r6
00006a  9907              LDR      r1,[sp,#0x1c]
00006c  f7fffffe          BL       Iap2LinkPkt_Init
000070  4605              MOV      r5,r0
;;;304    		, ctrlByte
;;;305    		, pIap2Link->m_NextSentPSN++
;;;306    		, 0
;;;307    		, 0
;;;308    		, &linkPayload
;;;309    		, LINK_PAYLOAD_HEAD_SIZE + sizeof(SessionIden) * pIap2Link->m_SessionCount
;;;310    		);
;;;311    
;;;312    	Iap2Link_TxData(pIap2Link, pPkt, i, IAP2_RETX_INTERVAL, IAP2_MAX_RETX_COUNT);
000072  200a              MOVS     r0,#0xa
000074  237d              MOVS     r3,#0x7d
000076  00db              LSLS     r3,r3,#3
000078  462a              MOV      r2,r5
00007a  4631              MOV      r1,r6
00007c  9000              STR      r0,[sp,#0]
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       Iap2Link_TxData
;;;313    	pIap2Link->m_State = IAP2_STATE_TX_LINK_SYNC;
000084  2001              MOVS     r0,#1
000086  7020              STRB     r0,[r4,#0]
;;;314    	
;;;315    	return IAP2RC_SUCCESS;
000088  2000              MOVS     r0,#0
;;;316    }
00008a  b008              ADD      sp,sp,#0x20
00008c  bd70              POP      {r4-r6,pc}
;;;317    
                          ENDP

00008e  0000              DCW      0x0000
                  |L12.144|
                          DCD      0x000004c6

                          AREA ||i.Iap2Link_Sleep||, CODE, READONLY, ALIGN=1

                  Iap2Link_Sleep PROC
;;;229    
;;;230    void Iap2Link_Sleep(Iap2Link* pIap2Link)
000000  4770              BX       lr
;;;231    {
;;;232    }
;;;233    
                          ENDP


                          AREA ||i.Iap2Link_Start||, CODE, READONLY, ALIGN=2

                  Iap2Link_Start PROC
;;;467    
;;;468    void Iap2Link_Start(Iap2Link* pIap2Link)
000000  b538              PUSH     {r3-r5,lr}
;;;469    {
000002  4604              MOV      r4,r0
;;;470    	//DetectiAP2Support
;;;471    	
;;;472    	SEGGER_RTT_printf(0,"Iap2Link_Start.\n");
000004  a10d              ADR      r1,|L14.60|
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       SEGGER_RTT_printf
;;;473    	if(!Iap2Link_TxData(pIap2Link, auth_init_data, sizeof(auth_init_data), IAP2_RETX_INTERVAL, IAP2_LINK_RETX_COUNT_UNLIMITIED))
00000c  20ff              MOVS     r0,#0xff
00000e  237d              MOVS     r3,#0x7d
000010  00db              LSLS     r3,r3,#3
000012  2206              MOVS     r2,#6
000014  490e              LDR      r1,|L14.80|
000016  9000              STR      r0,[sp,#0]
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       Iap2Link_TxData
00001e  2800              CMP      r0,#0
000020  d103              BNE      |L14.42|
;;;474    	{
;;;475    		SEGGER_RTT_printf(0,"xxxxxx Send initialization pkt failed.\n");
000022  a10c              ADR      r1,|L14.84|
000024  f7fffffe          BL       SEGGER_RTT_printf
                  |L14.40|
;;;476    		return ;
;;;477    	}
;;;478    	SEGGER_RTT_printf(0,"xxxxxxxxxxxxSend initialization pkt successful.\n");
;;;479    	pIap2Link->m_State = IAP2_STATE_INIT;
;;;480    	//pIap2Link->RxRsp = 
;;;481    }
000028  bd38              POP      {r3-r5,pc}
                  |L14.42|
00002a  a114              ADR      r1,|L14.124|
00002c  2000              MOVS     r0,#0                 ;478
00002e  f7fffffe          BL       SEGGER_RTT_printf
000032  2000              MOVS     r0,#0                 ;479
000034  7020              STRB     r0,[r4,#0]            ;479
000036  bf00              NOP      
000038  e7f6              B        |L14.40|
;;;482    
                          ENDP

00003a  0000              DCW      0x0000
                  |L14.60|
00003c  49617032          DCB      "Iap2Link_Start.\n",0
000040  4c696e6b
000044  5f537461
000048  72742e0a
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
                  |L14.80|
                          DCD      auth_init_data
                  |L14.84|
000054  78787878          DCB      "xxxxxx Send initialization pkt failed.\n",0
000058  78782053
00005c  656e6420
000060  696e6974
000064  69616c69
000068  7a617469
00006c  6f6e2070
000070  6b742066
000074  61696c65
000078  642e0a00
                  |L14.124|
00007c  78787878          DCB      "xxxxxxxxxxxxSend initialization pkt successful.\n",0
000080  78787878
000084  78787878
000088  53656e64
00008c  20696e69
000090  7469616c
000094  697a6174
000098  696f6e20
00009c  706b7420
0000a0  73756363
0000a4  65737366
0000a8  756c2e0a
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0

                          AREA ||i.Iap2Link_TimeOut||, CODE, READONLY, ALIGN=1

                  Iap2Link_TimeOut PROC
;;;112    }
;;;113    void Iap2Link_TimeOut(Iap2Link* pIap2Link, uint8 timeId)
000000  2901              CMP      r1,#1
;;;114    {
;;;115    	if(IAP2_LINK_INIT_TIMERID == timeId)
000002  d100              BNE      |L15.6|
;;;116    	{
;;;117    		if((pIap2Link->m_MaxReTxCount != IAP2_LINK_RETX_COUNT_UNLIMITIED)
000004  bf00              NOP      
                  |L15.6|
;;;118    			&& (pIap2Link->m_ReTxCount >= pIap2Link->m_MaxReTxCount))
;;;119    		{
;;;120    			//Send failed, end
;;;121    		}
;;;122    		//Iap2Link_TxData(pIap2Link, pIap2Link->m_pBuff, pIap2Link->m_Len, pIap2Link->m_ReSendTimeMs, );
;;;123    	}
;;;124    }
000006  4770              BX       lr
;;;125    
                          ENDP


                          AREA ||i.Iap2Link_TimerReset||, CODE, READONLY, ALIGN=2

                  Iap2Link_TimerReset PROC
;;;107    //////////////////////////////////////////////////////////////////////
;;;108    void Iap2Link_TimerReset(Iap2Link* pIap2Link)
000000  b510              PUSH     {r4,lr}
;;;109    {
000002  4604              MOV      r4,r0
;;;110    	//huanghanjing timer
;;;111    	SwTimer_Stop(&pIap2Link->m_ReTxTimer);
000004  4802              LDR      r0,|L16.16|
000006  1820              ADDS     r0,r4,r0
000008  f7fffffe          BL       SwTimer_Stop
;;;112    }
00000c  bd10              POP      {r4,pc}
;;;113    void Iap2Link_TimeOut(Iap2Link* pIap2Link, uint8 timeId)
                          ENDP

00000e  0000              DCW      0x0000
                  |L16.16|
                          DCD      0x000004d2

                          AREA ||i.Iap2Link_TransferDone||, CODE, READONLY, ALIGN=2

                  Iap2Link_TransferDone PROC
;;;357    
;;;358    void Iap2Link_TransferDone(Iap2Link* pIap2Link, Bool isSuccess)
000000  b5fe              PUSH     {r1-r7,lr}
;;;359    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;360    	Irb* pIrb = &pIap2Link->m_Irb;
000006  209f              MOVS     r0,#0x9f
000008  00c0              LSLS     r0,r0,#3
00000a  1827              ADDS     r7,r4,r0
;;;361    	Iap2LinkPkt* pPkt = Null;
00000c  2500              MOVS     r5,#0
;;;362    	Iap2Event eventId = isSuccess? IAP2_EVENT_TRANSFER_SUCCESS : IAP2_EVENT_TRANSFER_FAILED;
00000e  2e00              CMP      r6,#0
000010  d001              BEQ      |L17.22|
000012  2006              MOVS     r0,#6
000014  e000              B        |L17.24|
                  |L17.22|
000016  2007              MOVS     r0,#7
                  |L17.24|
000018  9001              STR      r0,[sp,#4]
;;;363    
;;;364    	SEGGER_RTT_printf(0,"### function=%s line=%d \n",__FUNCTION__,__LINE__);
00001a  23ff              MOVS     r3,#0xff
00001c  336d              ADDS     r3,r3,#0x6d
00001e  4a53              LDR      r2,|L17.364|
000020  a153              ADR      r1,|L17.368|
000022  2000              MOVS     r0,#0
000024  f7fffffe          BL       SEGGER_RTT_printf
;;;365    
;;;366    	if(!isSuccess && pIap2Link->m_ReTxTimer.m_isStart)
000028  2e00              CMP      r6,#0
00002a  d107              BNE      |L17.60|
00002c  4857              LDR      r0,|L17.396|
00002e  1820              ADDS     r0,r4,r0
000030  7d00              LDRB     r0,[r0,#0x14]
000032  07c0              LSLS     r0,r0,#31
000034  0fc0              LSRS     r0,r0,#31
000036  2800              CMP      r0,#0
000038  d000              BEQ      |L17.60|
                  |L17.58|
;;;367    	{
;;;368    		//Do nothing.
;;;369    		//Waiting for time out and re-send.
;;;370    		return;
;;;371    	}
;;;372    	
;;;373    	SEGGER_RTT_printf(0,"### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;374    	//Check if it is a handshake packet
;;;375    	#if 0
;;;376    	if(IAP2_STATE_INIT == pIap2Link->m_State)
;;;377    	{
;;;378    	
;;;379    	SEGGER_RTT_printf(0,"### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;380    		Iap2Link_handShake(pIap2Link, eventId);
;;;381    		return ;
;;;382    	}
;;;383    #endif
;;;384    	SEGGER_RTT_printf(0,"### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;385    
;;;386    	pPkt = (Iap2LinkPkt*)pIap2Link->m_Irb.m_pBuff;
;;;387    	if(pIrb->m_ActLen && !pIrb->m_isTx)	//Receive a packet
;;;388    	{
;;;389    		if(!Iap2Link_Verify(pIap2Link, pPkt, pIap2Link->m_Irb.m_ActLen))
;;;390    		{
;;;391    			SEGGER_RTT_printf(0,"Packet verify failed!\n");
;;;392    			return;
;;;393    		}
;;;394    		
;;;395    	SEGGER_RTT_printf(0,"### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;396    		//Check if it is a link packet
;;;397    		if(pPkt->m_CtrlByte.m_SlpBit)
;;;398    		{
;;;399    			SEGGER_RTT_printf(0,"Link Sleep.\n");
;;;400    			Iap2Link_Sleep(pIap2Link);
;;;401    			return ;
;;;402    		}
;;;403    		else if(pPkt->m_CtrlByte.m_RstBit)
;;;404    		{
;;;405    			SEGGER_RTT_printf(0,"Link Reset.\n");
;;;406    			Iap2Link_SendSyncPkt(pIap2Link);
;;;407    			return ;
;;;408    		}
;;;409    		else if(pPkt->m_CtrlByte.m_AckBit && pPkt->m_CtrlByte.m_EakBit)
;;;410    		{
;;;411    		
;;;412    	SEGGER_RTT_printf(0,"### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;413    			//Extended Acknowledgement Payload
;;;414    			Iap2Link_Payload_Eak(pIap2Link, eventId, pPkt);
;;;415    			return ;
;;;416    		}
;;;417    		
;;;418    	SEGGER_RTT_printf(0,"### function=%s line=%d \n",__FUNCTION__,__LINE__);
;;;419    	}
;;;420    
;;;421    	SEGGER_RTT_printf(0,"### function=%s line=%d pIap2Link->m_State=%d\n",__FUNCTION__,__LINE__,pIap2Link->m_State);
;;;422    
;;;423    	switch(pIap2Link->m_State)
;;;424    	{
;;;425    		case IAP2_STATE_TX_LINK_SYNC:
;;;426    		case IAP2_STATE_RX_LINK_SYNC:
;;;427    		case IAP2_STATE_TX_ACK:
;;;428    			Iap2Link_Payload_SyncLink(pIap2Link, eventId, pPkt);
;;;429    			break;
;;;430    		case IAP2_STATE_LINK_DONE:
;;;431    			SessionMgr_Fsm(pIap2Link->m_pSessionMgr, eventId, pPkt);
;;;432    			break;
;;;433    	}
;;;434    	
;;;435    }
00003a  bdfe              POP      {r1-r7,pc}
                  |L17.60|
00003c  23ff              MOVS     r3,#0xff              ;373
00003e  3376              ADDS     r3,r3,#0x76           ;373
000040  4a4a              LDR      r2,|L17.364|
000042  a14b              ADR      r1,|L17.368|
000044  2000              MOVS     r0,#0                 ;373
000046  f7fffffe          BL       SEGGER_RTT_printf
00004a  23ff              MOVS     r3,#0xff              ;384
00004c  3381              ADDS     r3,r3,#0x81           ;384
00004e  4a47              LDR      r2,|L17.364|
000050  a147              ADR      r1,|L17.368|
000052  2000              MOVS     r0,#0                 ;384
000054  f7fffffe          BL       SEGGER_RTT_printf
000058  209f              MOVS     r0,#0x9f              ;386
00005a  00c0              LSLS     r0,r0,#3              ;386
00005c  1820              ADDS     r0,r4,r0              ;386
00005e  1c40              ADDS     r0,r0,#1              ;386
000060  f7fffffe          BL       __aeabi_uread4
000064  4605              MOV      r5,r0                 ;386
000066  7a39              LDRB     r1,[r7,#8]            ;387
000068  79fa              LDRB     r2,[r7,#7]            ;387
00006a  0208              LSLS     r0,r1,#8              ;387
00006c  4310              ORRS     r0,r0,r2              ;387
00006e  2800              CMP      r0,#0                 ;387
000070  d053              BEQ      |L17.282|
000072  7838              LDRB     r0,[r7,#0]            ;387
000074  2800              CMP      r0,#0                 ;387
000076  d150              BNE      |L17.282|
000078  209f              MOVS     r0,#0x9f              ;389
00007a  00c0              LSLS     r0,r0,#3              ;389
00007c  1820              ADDS     r0,r4,r0              ;389
00007e  7a01              LDRB     r1,[r0,#8]            ;389
000080  79c3              LDRB     r3,[r0,#7]            ;389
000082  0208              LSLS     r0,r1,#8              ;389
000084  4318              ORRS     r0,r0,r3              ;389
000086  4602              MOV      r2,r0                 ;389
000088  4629              MOV      r1,r5                 ;389
00008a  4620              MOV      r0,r4                 ;389
00008c  f7fffffe          BL       Iap2Link_Verify
000090  2800              CMP      r0,#0                 ;389
000092  d103              BNE      |L17.156|
000094  a13e              ADR      r1,|L17.400|
000096  f7fffffe          BL       SEGGER_RTT_printf
00009a  e7ce              B        |L17.58|
                  |L17.156|
00009c  23ff              MOVS     r3,#0xff              ;395
00009e  338c              ADDS     r3,r3,#0x8c           ;395
0000a0  4a32              LDR      r2,|L17.364|
0000a2  a133              ADR      r1,|L17.368|
0000a4  2000              MOVS     r0,#0                 ;395
0000a6  f7fffffe          BL       SEGGER_RTT_printf
0000aa  7928              LDRB     r0,[r5,#4]            ;397
0000ac  0700              LSLS     r0,r0,#28             ;397
0000ae  0fc0              LSRS     r0,r0,#31             ;397
0000b0  2800              CMP      r0,#0                 ;397
0000b2  d007              BEQ      |L17.196|
0000b4  a13c              ADR      r1,|L17.424|
0000b6  2000              MOVS     r0,#0                 ;399
0000b8  f7fffffe          BL       SEGGER_RTT_printf
0000bc  4620              MOV      r0,r4                 ;400
0000be  f7fffffe          BL       Iap2Link_Sleep
0000c2  e7ba              B        |L17.58|
                  |L17.196|
0000c4  7928              LDRB     r0,[r5,#4]            ;403
0000c6  06c0              LSLS     r0,r0,#27             ;403
0000c8  0fc0              LSRS     r0,r0,#31             ;403
0000ca  2800              CMP      r0,#0                 ;403
0000cc  d007              BEQ      |L17.222|
0000ce  a13a              ADR      r1,|L17.440|
0000d0  2000              MOVS     r0,#0                 ;405
0000d2  f7fffffe          BL       SEGGER_RTT_printf
0000d6  4620              MOV      r0,r4                 ;406
0000d8  f7fffffe          BL       Iap2Link_SendSyncPkt
0000dc  e7ad              B        |L17.58|
                  |L17.222|
0000de  7928              LDRB     r0,[r5,#4]            ;409
0000e0  0640              LSLS     r0,r0,#25             ;409
0000e2  0fc0              LSRS     r0,r0,#31             ;409
0000e4  2800              CMP      r0,#0                 ;409
0000e6  d011              BEQ      |L17.268|
0000e8  7928              LDRB     r0,[r5,#4]            ;409
0000ea  0680              LSLS     r0,r0,#26             ;409
0000ec  0fc0              LSRS     r0,r0,#31             ;409
0000ee  2800              CMP      r0,#0                 ;409
0000f0  d00c              BEQ      |L17.268|
0000f2  23ff              MOVS     r3,#0xff              ;412
0000f4  339d              ADDS     r3,r3,#0x9d           ;412
0000f6  4a1d              LDR      r2,|L17.364|
0000f8  a11d              ADR      r1,|L17.368|
0000fa  2000              MOVS     r0,#0                 ;412
0000fc  f7fffffe          BL       SEGGER_RTT_printf
000100  462a              MOV      r2,r5                 ;414
000102  4620              MOV      r0,r4                 ;414
000104  9901              LDR      r1,[sp,#4]            ;414
000106  f7fffffe          BL       Iap2Link_Payload_Eak
00010a  e796              B        |L17.58|
                  |L17.268|
00010c  23ff              MOVS     r3,#0xff              ;418
00010e  33a3              ADDS     r3,r3,#0xa3           ;418
000110  4a16              LDR      r2,|L17.364|
000112  a117              ADR      r1,|L17.368|
000114  2000              MOVS     r0,#0                 ;418
000116  f7fffffe          BL       SEGGER_RTT_printf
                  |L17.282|
00011a  7820              LDRB     r0,[r4,#0]            ;421
00011c  23ff              MOVS     r3,#0xff              ;421
00011e  33a6              ADDS     r3,r3,#0xa6           ;421
000120  4a12              LDR      r2,|L17.364|
000122  a129              ADR      r1,|L17.456|
000124  9000              STR      r0,[sp,#0]            ;421
000126  2000              MOVS     r0,#0                 ;421
000128  f7fffffe          BL       SEGGER_RTT_printf
00012c  7820              LDRB     r0,[r4,#0]            ;423
00012e  2801              CMP      r0,#1                 ;423
000130  d006              BEQ      |L17.320|
000132  2802              CMP      r0,#2                 ;423
000134  d005              BEQ      |L17.322|
000136  2803              CMP      r0,#3                 ;423
000138  d004              BEQ      |L17.324|
00013a  2805              CMP      r0,#5                 ;423
00013c  d112              BNE      |L17.356|
00013e  e007              B        |L17.336|
                  |L17.320|
000140  bf00              NOP                            ;426
                  |L17.322|
000142  bf00              NOP                            ;427
                  |L17.324|
000144  462a              MOV      r2,r5                 ;428
000146  4620              MOV      r0,r4                 ;428
000148  9901              LDR      r1,[sp,#4]            ;428
00014a  f7fffffe          BL       Iap2Link_Payload_SyncLink
00014e  e009              B        |L17.356|
                  |L17.336|
000150  4620              MOV      r0,r4                 ;431
000152  302b              ADDS     r0,r0,#0x2b           ;431
000154  f7fffffe          BL       __aeabi_uread4
000158  462a              MOV      r2,r5                 ;431
00015a  9000              STR      r0,[sp,#0]            ;431
00015c  9901              LDR      r1,[sp,#4]            ;431
00015e  f7fffffe          BL       SessionMgr_Fsm
000162  bf00              NOP                            ;432
                  |L17.356|
000164  bf00              NOP                            ;429
000166  bf00              NOP      
000168  e767              B        |L17.58|
;;;436    
                          ENDP

00016a  0000              DCW      0x0000
                  |L17.364|
                          DCD      |symbol_number.64|
                  |L17.368|
000170  23232320          DCB      "### function=%s line=%d \n",0
000174  66756e63
000178  74696f6e
00017c  3d257320
000180  6c696e65
000184  3d256420
000188  0a00    
00018a  00                DCB      0
00018b  00                DCB      0
                  |L17.396|
                          DCD      0x000004d2
                  |L17.400|
000190  5061636b          DCB      "Packet verify failed!\n",0
000194  65742076
000198  65726966
00019c  79206661
0001a0  696c6564
0001a4  210a00  
0001a7  00                DCB      0
                  |L17.424|
0001a8  4c696e6b          DCB      "Link Sleep.\n",0
0001ac  20536c65
0001b0  65702e0a
0001b4  00      
0001b5  00                DCB      0
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L17.440|
0001b8  4c696e6b          DCB      "Link Reset.\n",0
0001bc  20526573
0001c0  65742e0a
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L17.456|
0001c8  23232320          DCB      "### function=%s line=%d pIap2Link->m_State=%d\n",0
0001cc  66756e63
0001d0  74696f6e
0001d4  3d257320
0001d8  6c696e65
0001dc  3d256420
0001e0  70496170
0001e4  324c696e
0001e8  6b2d3e6d
0001ec  5f537461
0001f0  74653d25
0001f4  640a00  
0001f7  00                DCB      0

                          AREA ||i.Iap2Link_TxData||, CODE, READONLY, ALIGN=2

                  Iap2Link_TxData PROC
;;;152    
;;;153    Bool Iap2Link_TxData(Iap2Link* pIap2Link, const void* pData, int len, uint32 reSendTimeMs, uint8 maxTxCount)
000000  b5ff              PUSH     {r0-r7,lr}
;;;154    {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  4617              MOV      r7,r2
000008  461e              MOV      r6,r3
;;;155    	Irb* pIrb = &pIap2Link->m_Irb;
00000a  209f              MOVS     r0,#0x9f
00000c  00c0              LSLS     r0,r0,#3
00000e  1825              ADDS     r5,r4,r0
;;;156    	
;;;157    	SEGGER_RTT_printf(0,"Iap2Link_TxData sizeof(Iap2LinkReqPkt)=%d len=%d\n",sizeof(Iap2LinkReqPkt),len);
000010  463b              MOV      r3,r7
000012  224a              MOVS     r2,#0x4a
000014  a123              ADR      r1,|L18.164|
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       SEGGER_RTT_printf
;;;158    //	ASRT(len <= sizeof(Iap2LinkReqPkt));
;;;159    //	if(!(len <= sizeof(Iap2LinkReqPkt)))
;;;160    	//	return False;
;;;161    	pIap2Link->m_ReTxCount++;
00001c  2027              MOVS     r0,#0x27
00001e  0140              LSLS     r0,r0,#5
000020  1820              ADDS     r0,r4,r0
000022  7d00              LDRB     r0,[r0,#0x14]
000024  1c40              ADDS     r0,r0,#1
000026  2127              MOVS     r1,#0x27
000028  0149              LSLS     r1,r1,#5
00002a  1861              ADDS     r1,r4,r1
00002c  7508              STRB     r0,[r1,#0x14]
;;;162    	
;;;163    	SEGGER_RTT_printf(0,"Iap2Link_TxData pIrb->m_isTx 	= True \n");
00002e  a12a              ADR      r1,|L18.216|
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       SEGGER_RTT_printf
;;;164    	pIrb->m_isTx 	= True;
000036  2001              MOVS     r0,#1
000038  7028              STRB     r0,[r5,#0]
;;;165    	pIrb->m_pBuff 	= (uint8*)pData;
00003a  1c69              ADDS     r1,r5,#1
00003c  9802              LDR      r0,[sp,#8]
00003e  f7fffffe          BL       __aeabi_uwrite4
;;;166    	pIrb->m_Len 	= len;
000042  b2b9              UXTH     r1,r7
000044  7169              STRB     r1,[r5,#5]
000046  0a09              LSRS     r1,r1,#8
000048  71a9              STRB     r1,[r5,#6]
;;;167    	pIrb->m_ActLen 	= 0;
00004a  2100              MOVS     r1,#0
00004c  71e9              STRB     r1,[r5,#7]
00004e  7229              STRB     r1,[r5,#8]
;;;168    	
;;;169    	pIap2Link->m_MaxReTxCount = maxTxCount;
000050  2127              MOVS     r1,#0x27
000052  0149              LSLS     r1,r1,#5
000054  1861              ADDS     r1,r4,r1
000056  980a              LDR      r0,[sp,#0x28]
000058  7548              STRB     r0,[r1,#0x15]
;;;170    	pIap2Link->m_ReSendTimeMs = reSendTimeMs;
00005a  b2b0              UXTH     r0,r6
00005c  4928              LDR      r1,|L18.256|
00005e  1861              ADDS     r1,r4,r1
000060  7508              STRB     r0,[r1,#0x14]
000062  0a00              LSRS     r0,r0,#8
000064  7548              STRB     r0,[r1,#0x15]
;;;171    	
;;;172    	if(!pIap2Link->TransferStart(pIrb))
000066  4826              LDR      r0,|L18.256|
000068  301f              ADDS     r0,r0,#0x1f
00006a  1820              ADDS     r0,r4,r0
00006c  f7fffffe          BL       __aeabi_uread4
000070  9000              STR      r0,[sp,#0]
000072  4628              MOV      r0,r5
000074  9900              LDR      r1,[sp,#0]
000076  4788              BLX      r1
000078  2800              CMP      r0,#0
00007a  d105              BNE      |L18.136|
;;;173    	{
;;;174    	
;;;175    	SEGGER_RTT_printf(0,"Iap2Link_TxData	return Falsee \n");
00007c  a121              ADR      r1,|L18.260|
00007e  f7fffffe          BL       SEGGER_RTT_printf
;;;176    		return False;
000082  2000              MOVS     r0,#0
                  |L18.132|
;;;177    	}
;;;178    
;;;179    	if(maxTxCount && reSendTimeMs)
;;;180    	{
;;;181    		SwTimer_Start(&pIap2Link->m_ReTxTimer, IAP2_LINK_INIT_TIMERID, reSendTimeMs);
;;;182    	}
;;;183    	
;;;184    	return True;
;;;185    }
000084  b005              ADD      sp,sp,#0x14
000086  bdf0              POP      {r4-r7,pc}
                  |L18.136|
000088  980a              LDR      r0,[sp,#0x28]         ;179
00008a  2800              CMP      r0,#0                 ;179
00008c  d008              BEQ      |L18.160|
00008e  2e00              CMP      r6,#0                 ;179
000090  d006              BEQ      |L18.160|
000092  4632              MOV      r2,r6                 ;181
000094  2101              MOVS     r1,#1                 ;181
000096  481a              LDR      r0,|L18.256|
000098  3810              SUBS     r0,r0,#0x10           ;181
00009a  1820              ADDS     r0,r4,r0              ;181
00009c  f7fffffe          BL       SwTimer_Start
                  |L18.160|
0000a0  2001              MOVS     r0,#1                 ;184
0000a2  e7ef              B        |L18.132|
;;;186    
                          ENDP

                  |L18.164|
0000a4  49617032          DCB      "Iap2Link_TxData sizeof(Iap2LinkReqPkt)=%d len=%d\n",0
0000a8  4c696e6b
0000ac  5f547844
0000b0  61746120
0000b4  73697a65
0000b8  6f662849
0000bc  6170324c
0000c0  696e6b52
0000c4  6571506b
0000c8  74293d25
0000cc  64206c65
0000d0  6e3d2564
0000d4  0a00    
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L18.216|
0000d8  49617032          DCB      "Iap2Link_TxData pIrb->m_isTx \t= True \n",0
0000dc  4c696e6b
0000e0  5f547844
0000e4  61746120
0000e8  70497262
0000ec  2d3e6d5f
0000f0  69735478
0000f4  20093d20
0000f8  54727565
0000fc  200a00  
0000ff  00                DCB      0
                  |L18.256|
                          DCD      0x000004e2
                  |L18.260|
000104  49617032          DCB      "Iap2Link_TxData\treturn Falsee \n",0
000108  4c696e6b
00010c  5f547844
000110  61746109
000114  72657475
000118  726e2046
00011c  616c7365
000120  65200a00

                          AREA ||i.Iap2Link_Verify||, CODE, READONLY, ALIGN=2

                  Iap2Link_Verify PROC
;;;125    
;;;126    Bool Iap2Link_Verify(Iap2Link* pIap2Link, Iap2LinkPkt* pPkt, int len)
000000  b5fe              PUSH     {r1-r7,lr}
;;;127    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;128    	uint8 checkSum = 0;
000008  2700              MOVS     r7,#0
;;;129    	CtrlByte* pCtrlByte = (CtrlByte*)&pPkt->m_CtrlByte;
00000a  1d20              ADDS     r0,r4,#4
00000c  9002              STR      r0,[sp,#8]
;;;130    	Iap2LinkPkt* pTxPkt = (Iap2LinkPkt*)pIap2Link->m_Irb.m_pBuff;
00000e  209f              MOVS     r0,#0x9f
000010  00c0              LSLS     r0,r0,#3
000012  1830              ADDS     r0,r6,r0
000014  1c40              ADDS     r0,r0,#1
000016  f7fffffe          BL       __aeabi_uread4
00001a  9001              STR      r0,[sp,#4]
;;;131    	uint16 pktLen = SWAP16(pPkt->m_Len);
00001c  78e0              LDRB     r0,[r4,#3]
00001e  78a1              LDRB     r1,[r4,#2]
000020  0200              LSLS     r0,r0,#8
000022  4308              ORRS     r0,r0,r1
000024  9000              STR      r0,[sp,#0]
;;;132    
;;;133    	if(len < IAP2_PKT_HEAD_SIZE || pktLen != len || len > IAP2_MAX_PACKET_SIZE)
000026  2d09              CMP      r5,#9
000028  db05              BLT      |L19.54|
00002a  9800              LDR      r0,[sp,#0]
00002c  42a8              CMP      r0,r5
00002e  d102              BNE      |L19.54|
000030  480c              LDR      r0,|L19.100|
000032  4285              CMP      r5,r0
000034  dd01              BLE      |L19.58|
                  |L19.54|
;;;134    	{
;;;135    		return False;
000036  2000              MOVS     r0,#0
                  |L19.56|
;;;136    	}
;;;137    
;;;138    	if(pPkt->m_Sof != SOP)
;;;139    	{
;;;140    		return False;
;;;141    	}
;;;142    
;;;143    	checkSum = Iap2LinkPkt_GetCheckSum(pPkt, IAP2_PKT_HEAD_SIZE - 1);
;;;144    
;;;145    	if(checkSum != pPkt->m_HeaderSum)
;;;146    	{
;;;147    		return False;
;;;148    	}
;;;149    
;;;150    	return True;
;;;151    }
000038  bdfe              POP      {r1-r7,pc}
                  |L19.58|
00003a  7860              LDRB     r0,[r4,#1]            ;138
00003c  7821              LDRB     r1,[r4,#0]            ;138
00003e  0200              LSLS     r0,r0,#8              ;138
000040  4308              ORRS     r0,r0,r1              ;138
000042  4909              LDR      r1,|L19.104|
000044  4288              CMP      r0,r1                 ;138
000046  d001              BEQ      |L19.76|
000048  2000              MOVS     r0,#0                 ;140
00004a  e7f5              B        |L19.56|
                  |L19.76|
00004c  2108              MOVS     r1,#8                 ;143
00004e  4620              MOV      r0,r4                 ;143
000050  f7fffffe          BL       Iap2LinkPkt_GetCheckSum
000054  4607              MOV      r7,r0                 ;143
000056  7a20              LDRB     r0,[r4,#8]            ;145
000058  42b8              CMP      r0,r7                 ;145
00005a  d001              BEQ      |L19.96|
00005c  2000              MOVS     r0,#0                 ;147
00005e  e7eb              B        |L19.56|
                  |L19.96|
000060  2001              MOVS     r0,#1                 ;150
000062  e7e9              B        |L19.56|
;;;152    
                          ENDP

                  |L19.100|
                          DCD      0x0000801e
                  |L19.104|
                          DCD      0x0000ff5a

                          AREA ||i.Iap2Link_handShake||, CODE, READONLY, ALIGN=2

                  Iap2Link_handShake PROC
;;;317    
;;;318    Iap2Rc Iap2Link_handShake(Iap2Link* pIap2Link, Iap2Event eventId)
000000  b5f8              PUSH     {r3-r7,lr}
;;;319    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;320    	//Detect iAP2 Support
;;;321    	SEGGER_RTT_printf(0,"Iap2Link_handShake. 000\n");
000006  a12e              ADR      r1,|L20.192|
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SEGGER_RTT_printf
;;;322    	if(eventId != IAP2_EVENT_TRANSFER_SUCCESS)
00000e  2d06              CMP      r5,#6
000010  d005              BEQ      |L20.30|
;;;323    	{
;;;324    		SEGGER_RTT_printf(0,"iAp2 Link hand shake fialed.\n");
000012  a132              ADR      r1,|L20.220|
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       SEGGER_RTT_printf
;;;325    		return IAP2RC_FAILED;
00001a  2001              MOVS     r0,#1
                  |L20.28|
;;;326    	}
;;;327    	SEGGER_RTT_printf(0,"Iap2Link_handShake. 11\n");
;;;328    
;;;329    	if(pIap2Link->m_Irb.m_isTx)
;;;330    	{
;;;331    	
;;;332    	SEGGER_RTT_printf(0,"Iap2Link_handShake. 222\n");
;;;333    		SwTimer_Stop(&pIap2Link->m_ReTxTimer);
;;;334    		Iap2Link_RcvData(pIap2Link, pIap2Link->m_pAckPkt, sizeof(auth_init_data));
;;;335    		return IAP2RC_PENDING;
;;;336    	}
;;;337    	
;;;338    	SEGGER_RTT_printf(0,"Iap2Link_handShake. 333\n");
;;;339    	if(0 == memcmp(auth_init_data, pIap2Link->m_Irb.m_pBuff, pIap2Link->m_Irb.m_ActLen))
;;;340    	{
;;;341    	
;;;342    	SEGGER_RTT_printf(0,"Iap2Link_handShake. 444\n");
;;;343    		Iap2Link_SendSyncPkt(pIap2Link);
;;;344    	}
;;;345    	else
;;;346    	{
;;;347    	
;;;348    	SEGGER_RTT_printf(0,"Iap2Link_handShake. 555\n");
;;;349    		//indicate lack of backward compatibility
;;;350    		static uint8 lack_of_backward_compatibility[] = {0xFF,0x55,0x0E,0x00,0x13,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xEB};
;;;351    		Iap2Link_TxData(pIap2Link, lack_of_backward_compatibility, sizeof(lack_of_backward_compatibility), 0, 0);
;;;352    	}
;;;353    	SEGGER_RTT_printf(0,"Iap2Link_handShake. 666\n");
;;;354    
;;;355    	return IAP2RC_SUCCESS;
;;;356    }
00001c  bdf8              POP      {r3-r7,pc}
                  |L20.30|
00001e  a137              ADR      r1,|L20.252|
000020  2000              MOVS     r0,#0                 ;327
000022  f7fffffe          BL       SEGGER_RTT_printf
000026  2027              MOVS     r0,#0x27              ;329
000028  0140              LSLS     r0,r0,#5              ;329
00002a  1820              ADDS     r0,r4,r0              ;329
00002c  7e00              LDRB     r0,[r0,#0x18]         ;329
00002e  2800              CMP      r0,#0                 ;329
000030  d014              BEQ      |L20.92|
000032  a138              ADR      r1,|L20.276|
000034  2000              MOVS     r0,#0                 ;332
000036  f7fffffe          BL       SEGGER_RTT_printf
00003a  483d              LDR      r0,|L20.304|
00003c  1820              ADDS     r0,r4,r0              ;333
00003e  f7fffffe          BL       SwTimer_Stop
000042  483b              LDR      r0,|L20.304|
000044  1f00              SUBS     r0,r0,#4              ;334
000046  1820              ADDS     r0,r4,r0              ;334
000048  f7fffffe          BL       __aeabi_uread4
00004c  4606              MOV      r6,r0                 ;334
00004e  2206              MOVS     r2,#6                 ;334
000050  4631              MOV      r1,r6                 ;334
000052  4620              MOV      r0,r4                 ;334
000054  f7fffffe          BL       Iap2Link_RcvData
000058  2002              MOVS     r0,#2                 ;335
00005a  e7df              B        |L20.28|
                  |L20.92|
00005c  a135              ADR      r1,|L20.308|
00005e  2000              MOVS     r0,#0                 ;338
000060  f7fffffe          BL       SEGGER_RTT_printf
000064  209f              MOVS     r0,#0x9f              ;339
000066  00c0              LSLS     r0,r0,#3              ;339
000068  1820              ADDS     r0,r4,r0              ;339
00006a  1c40              ADDS     r0,r0,#1              ;339
00006c  f7fffffe          BL       __aeabi_uread4
000070  4606              MOV      r6,r0                 ;339
000072  209f              MOVS     r0,#0x9f              ;339
000074  00c0              LSLS     r0,r0,#3              ;339
000076  1820              ADDS     r0,r4,r0              ;339
000078  7a01              LDRB     r1,[r0,#8]            ;339
00007a  79c3              LDRB     r3,[r0,#7]            ;339
00007c  0208              LSLS     r0,r1,#8              ;339
00007e  4318              ORRS     r0,r0,r3              ;339
000080  4602              MOV      r2,r0                 ;339
000082  4631              MOV      r1,r6                 ;339
000084  4832              LDR      r0,|L20.336|
000086  f7fffffe          BL       memcmp
00008a  2800              CMP      r0,#0                 ;339
00008c  d106              BNE      |L20.156|
00008e  a131              ADR      r1,|L20.340|
000090  f7fffffe          BL       SEGGER_RTT_printf
000094  4620              MOV      r0,r4                 ;343
000096  f7fffffe          BL       Iap2Link_SendSyncPkt
00009a  e00b              B        |L20.180|
                  |L20.156|
00009c  a134              ADR      r1,|L20.368|
00009e  2000              MOVS     r0,#0                 ;348
0000a0  f7fffffe          BL       SEGGER_RTT_printf
0000a4  2000              MOVS     r0,#0                 ;351
0000a6  4603              MOV      r3,r0                 ;351
0000a8  2212              MOVS     r2,#0x12              ;351
0000aa  4938              LDR      r1,|L20.396|
0000ac  9000              STR      r0,[sp,#0]            ;351
0000ae  4620              MOV      r0,r4                 ;351
0000b0  f7fffffe          BL       Iap2Link_TxData
                  |L20.180|
0000b4  a136              ADR      r1,|L20.400|
0000b6  2000              MOVS     r0,#0                 ;353
0000b8  f7fffffe          BL       SEGGER_RTT_printf
0000bc  2000              MOVS     r0,#0                 ;355
0000be  e7ad              B        |L20.28|
;;;357    
                          ENDP

                  |L20.192|
0000c0  49617032          DCB      "Iap2Link_handShake. 000\n",0
0000c4  4c696e6b
0000c8  5f68616e
0000cc  64536861
0000d0  6b652e20
0000d4  3030300a
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L20.220|
0000dc  69417032          DCB      "iAp2 Link hand shake fialed.\n",0
0000e0  204c696e
0000e4  6b206861
0000e8  6e642073
0000ec  68616b65
0000f0  20666961
0000f4  6c65642e
0000f8  0a00    
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L20.252|
0000fc  49617032          DCB      "Iap2Link_handShake. 11\n",0
000100  4c696e6b
000104  5f68616e
000108  64536861
00010c  6b652e20
000110  31310a00
                  |L20.276|
000114  49617032          DCB      "Iap2Link_handShake. 222\n",0
000118  4c696e6b
00011c  5f68616e
000120  64536861
000124  6b652e20
000128  3232320a
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
                  |L20.304|
                          DCD      0x000004d2
                  |L20.308|
000134  49617032          DCB      "Iap2Link_handShake. 333\n",0
000138  4c696e6b
00013c  5f68616e
000140  64536861
000144  6b652e20
000148  3333330a
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
                  |L20.336|
                          DCD      auth_init_data
                  |L20.340|
000154  49617032          DCB      "Iap2Link_handShake. 444\n",0
000158  4c696e6b
00015c  5f68616e
000160  64536861
000164  6b652e20
000168  3434340a
00016c  00      
00016d  00                DCB      0
00016e  00                DCB      0
00016f  00                DCB      0
                  |L20.368|
000170  49617032          DCB      "Iap2Link_handShake. 555\n",0
000174  4c696e6b
000178  5f68616e
00017c  64536861
000180  6b652e20
000184  3535350a
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
                  |L20.396|
                          DCD      lack_of_backward_compatibility
                  |L20.400|
000190  49617032          DCB      "Iap2Link_handShake. 666\n",0
000194  4c696e6b
000198  5f68616e
00019c  64536861
0001a0  6b652e20
0001a4  3636360a
0001a8  00      
0001a9  00                DCB      0
0001aa  00                DCB      0
0001ab  00                DCB      0

                          AREA ||i.LinkPayload_AddSession||, CODE, READONLY, ALIGN=1

                  LinkPayload_AddSession PROC
;;;81     //////////////////////////////////////////////////////////////////////
;;;82     void LinkPayload_AddSession(LinkPayload* pLinkPayload, SessionIden* pSession)
000000  b570              PUSH     {r4-r6,lr}
;;;83     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;84     	memcpy(pLinkPayload->m_Session, pSession, sizeof(SessionIden));
000006  2203              MOVS     r2,#3
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  300a              ADDS     r0,r0,#0xa
00000e  f7fffffe          BL       __aeabi_memcpy
;;;85     }
000012  bd70              POP      {r4-r6,pc}
;;;86     
                          ENDP


                          AREA ||i.LinkPayload_Init||, CODE, READONLY, ALIGN=1

                  LinkPayload_Init PROC
;;;86     
;;;87     void LinkPayload_Init(LinkPayload* pLinkPayload)
000000  b510              PUSH     {r4,lr}
;;;88     {
000002  4604              MOV      r4,r0
;;;89     	memset(pLinkPayload, 0, sizeof(LinkPayload));
000004  2110              MOVS     r1,#0x10
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       __aeabi_memclr
;;;90     
;;;91     	pLinkPayload->m_LinkVer 			= IAP2_LINK_VERSION;
00000c  2001              MOVS     r0,#1
00000e  7020              STRB     r0,[r4,#0]
;;;92     	pLinkPayload->m_MaxOfOutstandingPkt = IAP2_MAX_OUTSTANDING_PKT;
000010  7060              STRB     r0,[r4,#1]
;;;93     	
;;;94     	pLinkPayload->m_MaxPktLenMsb 	= U16_MSB(IAP2_MAX_PACKET_SIZE);
000012  2080              MOVS     r0,#0x80
000014  70a0              STRB     r0,[r4,#2]
;;;95     	pLinkPayload->m_MaxPktLenLsb 	= U16_LSB(IAP2_MAX_PACKET_SIZE);
000016  201e              MOVS     r0,#0x1e
000018  70e0              STRB     r0,[r4,#3]
;;;96     	
;;;97     	pLinkPayload->m_ReTxTimeOutMsb 	= U16_MSB(IAP2_RETX_TIMEOUT);
00001a  2005              MOVS     r0,#5
00001c  7120              STRB     r0,[r4,#4]
;;;98     	pLinkPayload->m_ReTxTimeOutLsb 	= U16_LSB(IAP2_RETX_TIMEOUT);
00001e  20dc              MOVS     r0,#0xdc
000020  7160              STRB     r0,[r4,#5]
;;;99     	
;;;100    	pLinkPayload->m_AckTimeOutMsb 	= U16_MSB(IAP2_MAX_ACK_TIMEOUT);
000022  2000              MOVS     r0,#0
000024  71a0              STRB     r0,[r4,#6]
;;;101    	pLinkPayload->m_AckTimeOutLsb 	= U16_LSB(IAP2_MAX_ACK_TIMEOUT);
000026  71e0              STRB     r0,[r4,#7]
;;;102    	
;;;103    	pLinkPayload->m_MaxReTxCount 	= IAP2_MAX_RETX_COUNT;
000028  200a              MOVS     r0,#0xa
00002a  7220              STRB     r0,[r4,#8]
;;;104    	pLinkPayload->m_MaxAckCount 	= 0;
00002c  2000              MOVS     r0,#0
00002e  7260              STRB     r0,[r4,#9]
;;;105    }
000030  bd10              POP      {r4,pc}
;;;106    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_Iap2Link
                          %        1285

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  49617032          DCB      0x49,0x61,0x70,0x32
000004  4c696e6b          DCB      0x4c,0x69,0x6e,0x6b
000008  5f526554          DCB      0x5f,0x52,0x65,0x54
00000c  7800              DCB      0x78,0x00
                  |symbol_number.64|
00000e  4961              DCB      0x49,0x61
000010  70324c69          DCB      0x70,0x32,0x4c,0x69
000014  6e6b5f54          DCB      0x6e,0x6b,0x5f,0x54
000018  72616e73          DCB      0x72,0x61,0x6e,0x73
00001c  66657244          DCB      0x66,0x65,0x72,0x44
000020  6f6e6500          DCB      0x6f,0x6e,0x65,0x00
                  |symbol_number.65|
000024  49617032          DCB      0x49,0x61,0x70,0x32
000028  4c696e6b          DCB      0x4c,0x69,0x6e,0x6b
00002c  5f52756e          DCB      0x5f,0x52,0x75,0x6e
000030  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  g_pIap2Link
                          DCD      g_Iap2Link
                  auth_init_data
000004  ff550200          DCB      0xff,0x55,0x02,0x00
000008  ee10              DCB      0xee,0x10
                  lack_of_backward_compatibility
00000a  ff55              DCB      0xff,0x55
00000c  0e0013ff          DCB      0x0e,0x00,0x13,0xff
000010  ffffffff          DCB      0xff,0xff,0xff,0xff
000014  ffffffff          DCB      0xff,0xff,0xff,0xff
000018  ffffffeb          DCB      0xff,0xff,0xff,0xeb

;*** Start embedded assembler ***

#line 1 "..\\iap2\\Iap2Link.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_Iap2Link_c_d6debd24____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___10_Iap2Link_c_d6debd24____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_Iap2Link_c_d6debd24____REVSH|
#line 144
|__asm___10_Iap2Link_c_d6debd24____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
