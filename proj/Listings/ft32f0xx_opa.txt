; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\ft32f0xx_opa.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ft32f0xx_opa.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I..\iap2 -IC:\Users\dell1\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -D__UVISION_VERSION=534 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\ft32f0xx_opa.crf ..\FTLib\Src\ft32f0xx_opa.c]
                          THUMB

                          AREA ||i.OPA_Cali||, CODE, READONLY, ALIGN=2

                  OPA_Cali PROC
;;;172    */
;;;173    uint8_t OPA_Cali(void)
000000  b570              PUSH     {r4-r6,lr}
;;;174    {
;;;175      uint32_t  opadelay;
;;;176      uint32_t   outstate;
;;;177      uint8_t  CalDA, CalDB;
;;;178      uint32_t opatmp32;
;;;179    
;;;180      /* Enable the selected OPA peripheral */
;;;181        OPA->CR |= (uint32_t) (1<<0);
000002  4d4b              LDR      r5,|L1.304|
000004  6b2d              LDR      r5,[r5,#0x30]
000006  2601              MOVS     r6,#1
000008  4335              ORRS     r5,r5,r6
00000a  4e49              LDR      r6,|L1.304|
00000c  6335              STR      r5,[r6,#0x30]
;;;182    
;;;183      /* Enable OP0TM */
;;;184        OPA->CR |= (uint32_t) (1<<8);
00000e  4635              MOV      r5,r6
000010  6b2d              LDR      r5,[r5,#0x30]
000012  15b6              ASRS     r6,r6,#22
000014  4335              ORRS     r5,r5,r6
000016  4e46              LDR      r6,|L1.304|
000018  6335              STR      r5,[r6,#0x30]
;;;185    
;;;186      /* OP0NSEL = 00   ,  SET TO GND */
;;;187        OPA->CR &= (uint32_t) (~(3<<13));
00001a  4635              MOV      r5,r6
00001c  6b2d              LDR      r5,[r5,#0x30]
00001e  2603              MOVS     r6,#3
000020  0376              LSLS     r6,r6,#13
000022  43b5              BICS     r5,r5,r6
000024  4e42              LDR      r6,|L1.304|
000026  6335              STR      r5,[r6,#0x30]
;;;188    
;;;189      /* OP0PSEL = 1   ,  SET TO GND */
;;;190        OPA->CR |= (uint32_t) ((1<<15));
000028  4635              MOV      r5,r6
00002a  6b2d              LDR      r5,[r5,#0x30]
00002c  2601              MOVS     r6,#1
00002e  03f6              LSLS     r6,r6,#15
000030  4335              ORRS     r5,r5,r6
000032  4e3f              LDR      r6,|L1.304|
000034  6335              STR      r5,[r6,#0x30]
;;;191    
;;;192      /* OP0FCAPE = 0 */
;;;193        OPA->CR &= (uint32_t) (~(1<<9));
000036  4635              MOV      r5,r6
000038  6b2d              LDR      r5,[r5,#0x30]
00003a  1576              ASRS     r6,r6,#21
00003c  43b5              BICS     r5,r5,r6
00003e  4e3c              LDR      r6,|L1.304|
000040  6335              STR      r5,[r6,#0x30]
;;;194    
;;;195      /* OPTODIG = 1 */
;;;196        OPA->CR |= (uint32_t) ((1<<7));
000042  4635              MOV      r5,r6
000044  6b2d              LDR      r5,[r5,#0x30]
000046  2680              MOVS     r6,#0x80
000048  4335              ORRS     r5,r5,r6
00004a  4e39              LDR      r6,|L1.304|
00004c  6335              STR      r5,[r6,#0x30]
;;;197    
;;;198      /* OP0FR = 000 */
;;;199        OPA->CR &= (uint32_t) (~(7<<10));
00004e  4635              MOV      r5,r6
000050  6b2d              LDR      r5,[r5,#0x30]
000052  2607              MOVS     r6,#7
000054  02b6              LSLS     r6,r6,#10
000056  43b5              BICS     r5,r5,r6
000058  4e35              LDR      r6,|L1.304|
00005a  6335              STR      r5,[r6,#0x30]
;;;200      
;;;201      /* PA2 TO FLOAT */
;;;202      GPIOA ->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)2 * 2));	
00005c  2509              MOVS     r5,#9
00005e  06ed              LSLS     r5,r5,#27
000060  68ed              LDR      r5,[r5,#0xc]
000062  2630              MOVS     r6,#0x30
000064  43b5              BICS     r5,r5,r6
000066  2609              MOVS     r6,#9
000068  06f6              LSLS     r6,r6,#27
00006a  60f5              STR      r5,[r6,#0xc]
;;;203    
;;;204      //
;;;205      /* OP0COF = 00000 */
;;;206       OPA->CR &= (uint32_t) (~(0x1F<<1));
00006c  4d30              LDR      r5,|L1.304|
00006e  6b2d              LDR      r5,[r5,#0x30]
000070  263e              MOVS     r6,#0x3e
000072  43b5              BICS     r5,r5,r6
000074  4e2e              LDR      r6,|L1.304|
000076  6335              STR      r5,[r6,#0x30]
;;;207      CalDA=0;
000078  2000              MOVS     r0,#0
;;;208      opadelay=0X0FFF;
00007a  4b2e              LDR      r3,|L1.308|
;;;209      while(opadelay--);
00007c  bf00              NOP      
                  |L1.126|
00007e  461d              MOV      r5,r3
000080  1e5b              SUBS     r3,r3,#1
000082  2d00              CMP      r5,#0
000084  d1fb              BNE      |L1.126|
;;;210      outstate=OPA->CR;		// save
000086  4d2a              LDR      r5,|L1.304|
000088  6b2c              LDR      r4,[r5,#0x30]
;;;211      while(1){
00008a  e01b              B        |L1.196|
                  |L1.140|
;;;212      	CalDA++;
00008c  1c45              ADDS     r5,r0,#1
00008e  b2e8              UXTB     r0,r5
;;;213    	if(CalDA>=0x1F) break;
000090  281f              CMP      r0,#0x1f
000092  db00              BLT      |L1.150|
000094  e017              B        |L1.198|
                  |L1.150|
;;;214    	opatmp32=OPA->CR&(~(0x1f<<1));
000096  4d26              LDR      r5,|L1.304|
000098  6b2a              LDR      r2,[r5,#0x30]
00009a  263e              MOVS     r6,#0x3e
00009c  43b2              BICS     r2,r2,r6
;;;215    	OPA->CR=opatmp32|(CalDA<<1);
00009e  0045              LSLS     r5,r0,#1
0000a0  4315              ORRS     r5,r5,r2
0000a2  4e23              LDR      r6,|L1.304|
0000a4  6335              STR      r5,[r6,#0x30]
;;;216      	opadelay=0X0FFF;
0000a6  4b23              LDR      r3,|L1.308|
;;;217    	while(opadelay--);
0000a8  bf00              NOP      
                  |L1.170|
0000aa  461d              MOV      r5,r3
0000ac  1e5b              SUBS     r3,r3,#1
0000ae  2d00              CMP      r5,#0
0000b0  d1fb              BNE      |L1.170|
;;;218    	if((outstate^OPA->CR)&(1<<16)) break;
0000b2  4d1f              LDR      r5,|L1.304|
0000b4  6b2d              LDR      r5,[r5,#0x30]
0000b6  4065              EORS     r5,r5,r4
0000b8  2601              MOVS     r6,#1
0000ba  0436              LSLS     r6,r6,#16
0000bc  4035              ANDS     r5,r5,r6
0000be  2d00              CMP      r5,#0
0000c0  d000              BEQ      |L1.196|
0000c2  e000              B        |L1.198|
                  |L1.196|
0000c4  e7e2              B        |L1.140|
                  |L1.198|
0000c6  bf00              NOP                            ;213
;;;219      }
;;;220    
;;;221      outstate=OPA->CR;		// save
0000c8  4d19              LDR      r5,|L1.304|
0000ca  6b2c              LDR      r4,[r5,#0x30]
;;;222      CalDB=CalDA;
0000cc  4601              MOV      r1,r0
;;;223       while(1){
0000ce  e01c              B        |L1.266|
                  |L1.208|
;;;224       	if(0==CalDB) break;
0000d0  2900              CMP      r1,#0
0000d2  d100              BNE      |L1.214|
0000d4  e01a              B        |L1.268|
                  |L1.214|
;;;225      	CalDB--;
0000d6  1e4d              SUBS     r5,r1,#1
0000d8  b2e9              UXTB     r1,r5
;;;226    	opatmp32=OPA->CR&(~(0x1f<<1));
0000da  4d15              LDR      r5,|L1.304|
0000dc  6b2d              LDR      r5,[r5,#0x30]
0000de  263e              MOVS     r6,#0x3e
0000e0  43b5              BICS     r5,r5,r6
0000e2  462a              MOV      r2,r5
;;;227    	OPA->CR=opatmp32|(CalDB<<1);
0000e4  004d              LSLS     r5,r1,#1
0000e6  4315              ORRS     r5,r5,r2
0000e8  4e11              LDR      r6,|L1.304|
0000ea  6335              STR      r5,[r6,#0x30]
;;;228      	opadelay=0X0FFF;
0000ec  4b11              LDR      r3,|L1.308|
;;;229    	while(opadelay--);
0000ee  bf00              NOP      
                  |L1.240|
0000f0  461d              MOV      r5,r3
0000f2  1e5b              SUBS     r3,r3,#1
0000f4  2d00              CMP      r5,#0
0000f6  d1fb              BNE      |L1.240|
;;;230    	if((outstate^OPA->CR)&(1<<16)) break;
0000f8  4d0d              LDR      r5,|L1.304|
0000fa  6b2d              LDR      r5,[r5,#0x30]
0000fc  4065              EORS     r5,r5,r4
0000fe  2601              MOVS     r6,#1
000100  0436              LSLS     r6,r6,#16
000102  4035              ANDS     r5,r5,r6
000104  2d00              CMP      r5,#0
000106  d000              BEQ      |L1.266|
000108  e000              B        |L1.268|
                  |L1.266|
00010a  e7e1              B        |L1.208|
                  |L1.268|
00010c  bf00              NOP                            ;224
;;;231      }
;;;232    
;;;233      //
;;;234      CalDA+=CalDB;
00010e  1845              ADDS     r5,r0,r1
000110  b2e8              UXTB     r0,r5
;;;235      CalDA/=2;
000112  4605              MOV      r5,r0
000114  0fc6              LSRS     r6,r0,#31
000116  1976              ADDS     r6,r6,r5
000118  1070              ASRS     r0,r6,#1
;;;236      opatmp32=OPA->CR&(~(0x1f<<1));
00011a  4d05              LDR      r5,|L1.304|
00011c  6b2d              LDR      r5,[r5,#0x30]
00011e  263e              MOVS     r6,#0x3e
000120  43b5              BICS     r5,r5,r6
000122  462a              MOV      r2,r5
;;;237      OPA->CR=opatmp32|(CalDA<<1);
000124  0045              LSLS     r5,r0,#1
000126  4315              ORRS     r5,r5,r2
000128  4e01              LDR      r6,|L1.304|
00012a  6335              STR      r5,[r6,#0x30]
;;;238    
;;;239      //
;;;240      return CalDA;
;;;241    
;;;242    }
00012c  bd70              POP      {r4-r6,pc}
;;;243    
                          ENDP

00012e  0000              DCW      0x0000
                  |L1.304|
                          DCD      0x40010000
                  |L1.308|
                          DCD      0x00000fff

                          AREA ||i.OPA_Cmd||, CODE, READONLY, ALIGN=2

                  OPA_Cmd PROC
;;;108      */
;;;109    void OPA_Cmd(FunctionalState NewState)
000000  2800              CMP      r0,#0
;;;110    {
;;;111      /* Check the parameters */
;;;112      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;113    
;;;114      if (NewState != DISABLE)
000002  d006              BEQ      |L2.18|
;;;115      {
;;;116        /* Enable the selected OPA peripheral */
;;;117        OPA->CR |= (uint32_t) (1<<0);
000004  4906              LDR      r1,|L2.32|
000006  6b09              LDR      r1,[r1,#0x30]
000008  2201              MOVS     r2,#1
00000a  4311              ORRS     r1,r1,r2
00000c  4a04              LDR      r2,|L2.32|
00000e  6311              STR      r1,[r2,#0x30]
000010  e005              B        |L2.30|
                  |L2.18|
;;;118      }
;;;119      else
;;;120      {
;;;121        /* Disable the selected OPA peripheral  */
;;;122        OPA->CR &= (uint32_t)(~((uint32_t)1<<0));
000012  4903              LDR      r1,|L2.32|
000014  6b09              LDR      r1,[r1,#0x30]
000016  0849              LSRS     r1,r1,#1
000018  0049              LSLS     r1,r1,#1
00001a  4a01              LDR      r2,|L2.32|
00001c  6311              STR      r1,[r2,#0x30]
                  |L2.30|
;;;123      }
;;;124    }
00001e  4770              BX       lr
;;;125    
                          ENDP

                  |L2.32|
                          DCD      0x40010000

                          AREA ||i.OPA_DeInit||, CODE, READONLY, ALIGN=2

                  OPA_DeInit PROC
;;;29       */
;;;30     void OPA_DeInit(void)
000000  2000              MOVS     r0,#0
;;;31     {
;;;32       OPA->CR = ((uint32_t)0x00000000);    /*!< Set OPA_CSR register to reset value */
000002  4901              LDR      r1,|L3.8|
000004  6308              STR      r0,[r1,#0x30]
;;;33     }
000006  4770              BX       lr
;;;34     
                          ENDP

                  |L3.8|
                          DCD      0x40010000

                          AREA ||i.OPA_GetOutputLevel||, CODE, READONLY, ALIGN=2

                  OPA_GetOutputLevel PROC
;;;145      */
;;;146    uint32_t OPA_GetOutputLevel(uint32_t OPA_OutLevel)
000000  4601              MOV      r1,r0
;;;147    {
;;;148      uint32_t compout = 0x0;
000002  2000              MOVS     r0,#0
;;;149    
;;;150      /* Check the parameters */
;;;151      assert_param(IS_OPA_OUTPUT_LEVEL(OPA_OutLevel));
;;;152    
;;;153      /* Check if selected comparator output is high */
;;;154      if ((OPA->CR & OPA_OutLevel) != 0)
000004  4a04              LDR      r2,|L4.24|
000006  6b12              LDR      r2,[r2,#0x30]
000008  400a              ANDS     r2,r2,r1
00000a  2a00              CMP      r2,#0
00000c  d001              BEQ      |L4.18|
;;;155      {
;;;156        compout = OPA_OutLevel;
00000e  4608              MOV      r0,r1
000010  e000              B        |L4.20|
                  |L4.18|
;;;157      }
;;;158      else
;;;159      {
;;;160        compout = OPA_OutputLevel_Low;
000012  2000              MOVS     r0,#0
                  |L4.20|
;;;161      }
;;;162    
;;;163      /* Return the comparator output level */
;;;164      return (uint32_t)(compout);
;;;165    }
000014  4770              BX       lr
;;;166    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x40010000

                          AREA ||i.OPA_Init||, CODE, READONLY, ALIGN=2

                  OPA_Init PROC
;;;49       */
;;;50     void OPA_Init(OPA_InitTypeDef* OPA_InitStruct)
000000  2100              MOVS     r1,#0
;;;51     {
;;;52       uint32_t tmpreg = 0;
;;;53     
;;;54       /* Check the parameters */
;;;55       assert_param(IS_OPA_VIP_SEL(OPA_InitStruct->OPA_OP0PSel));
;;;56       assert_param(IS_OPA_VIN_SEL(OPA_InitStruct->OPA_OP0NSel));
;;;57       assert_param(IS_OPA_FR_SEL(OPA_InitStruct->OPA_OP0FR));
;;;58       assert_param(IS_OPA_FCAP_SEL(OPA_InitStruct->OPA_OP0FCAPE));
;;;59       assert_param(IS_OPA_ODIG_SEL(OPA_InitStruct->OPA_OPTODIG));
;;;60       assert_param(IS_OPA_OIO_SEL(OPA_InitStruct->OPA_OPTOIO));
;;;61       
;;;62     
;;;63       /*!< Get the OPA_CSR register value */
;;;64       tmpreg = OPA->CR;
000002  4a09              LDR      r2,|L5.40|
000004  6b11              LDR      r1,[r2,#0x30]
;;;65     
;;;66       /*!< Clear the bits */ 
;;;67       tmpreg &= (uint32_t) ~(OPA_CR_CLEAR_MASK);
000006  0c49              LSRS     r1,r1,#17
000008  0449              LSLS     r1,r1,#17
;;;68     
;;;69       /*!< Configure OPA: OPA_VipSel, OPA_VinSel, OPA_OutputSel value and OPA_Pol */
;;;70       tmpreg |= (uint32_t)((OPA_InitStruct->OPA_OP0PSel | OPA_InitStruct->OPA_OP0NSel|
00000a  6843              LDR      r3,[r0,#4]
00000c  6802              LDR      r2,[r0,#0]
00000e  431a              ORRS     r2,r2,r3
000010  6883              LDR      r3,[r0,#8]
000012  431a              ORRS     r2,r2,r3
000014  68c3              LDR      r3,[r0,#0xc]
000016  431a              ORRS     r2,r2,r3
000018  6903              LDR      r3,[r0,#0x10]
00001a  431a              ORRS     r2,r2,r3
00001c  6943              LDR      r3,[r0,#0x14]
00001e  431a              ORRS     r2,r2,r3
000020  4311              ORRS     r1,r1,r2
;;;71                            OPA_InitStruct->OPA_OP0FR | OPA_InitStruct->OPA_OP0FCAPE | OPA_InitStruct->OPA_OPTODIG |OPA_InitStruct->OPA_OPTOIO));
;;;72     
;;;73       /*!< Write to OPA_CR register */
;;;74       OPA->CR = tmpreg;  
000022  4a01              LDR      r2,|L5.40|
000024  6311              STR      r1,[r2,#0x30]
;;;75     }
000026  4770              BX       lr
;;;76     
                          ENDP

                  |L5.40|
                          DCD      0x40010000

                          AREA ||i.OPA_StructInit||, CODE, READONLY, ALIGN=1

                  OPA_StructInit PROC
;;;82       */
;;;83     void OPA_StructInit(OPA_InitTypeDef* OPA_InitStruct)
000000  2100              MOVS     r1,#0
;;;84     {
;;;85       OPA_InitStruct->OPA_OP0PSel = OPA_VIP_SEL_PA1;
000002  6001              STR      r1,[r0,#0]
;;;86       OPA_InitStruct->OPA_OP0NSel = OPA_VIN_SEL_PA2;
000004  2101              MOVS     r1,#1
000006  0349              LSLS     r1,r1,#13
000008  6041              STR      r1,[r0,#4]
;;;87       OPA_InitStruct->OPA_OP0FR = OPA_FR_SEL_NORES;
00000a  2100              MOVS     r1,#0
00000c  6081              STR      r1,[r0,#8]
;;;88       OPA_InitStruct->OPA_OP0FCAPE = OPA_FCAP_SEL_EN;
00000e  60c1              STR      r1,[r0,#0xc]
;;;89       OPA_InitStruct->OPA_OPTODIG = OPA_ODIG_SEL_EN;
000010  2180              MOVS     r1,#0x80
000012  6101              STR      r1,[r0,#0x10]
;;;90       OPA_InitStruct->OPA_OPTOIO = OPA_OIO_SEL_EN;
000014  2140              MOVS     r1,#0x40
000016  6141              STR      r1,[r0,#0x14]
;;;91     }
000018  4770              BX       lr
;;;92     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\FTLib\\Src\\ft32f0xx_opa.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_ft32f0xx_opa_c_4cda0a11____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___14_ft32f0xx_opa_c_4cda0a11____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_ft32f0xx_opa_c_4cda0a11____REVSH|
#line 144
|__asm___14_ft32f0xx_opa_c_4cda0a11____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
