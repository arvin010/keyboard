; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\ft32f0xx_misc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ft32f0xx_misc.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I..\iap2 -IC:\Users\dell1\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -D__UVISION_VERSION=534 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\ft32f0xx_misc.crf ..\FTLib\Src\ft32f0xx_misc.c]
                          THUMB

                          AREA ||i.NVIC_Init||, CODE, READONLY, ALIGN=2

                  NVIC_Init PROC
;;;21       */
;;;22     void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  2100              MOVS     r1,#0
;;;23     {
;;;24       uint32_t tmppriority = 0x00;
;;;25       
;;;26       /* Check the parameters */
;;;27       assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;28       assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
;;;29         
;;;30       if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000002  7882              LDRB     r2,[r0,#2]
000004  2a00              CMP      r2,#0
000006  d027              BEQ      |L1.88|
;;;31       {
;;;32         /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;33         tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
000008  4a18              LDR      r2,|L1.108|
00000a  2303              MOVS     r3,#3
00000c  021b              LSLS     r3,r3,#8
00000e  18d2              ADDS     r2,r2,r3
000010  7803              LDRB     r3,[r0,#0]
000012  109b              ASRS     r3,r3,#2
000014  009b              LSLS     r3,r3,#2
000016  58d1              LDR      r1,[r2,r3]
;;;34         tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
000018  7802              LDRB     r2,[r0,#0]
00001a  0792              LSLS     r2,r2,#30
00001c  0ed3              LSRS     r3,r2,#27
00001e  22ff              MOVS     r2,#0xff
000020  409a              LSLS     r2,r2,r3
000022  460b              MOV      r3,r1
000024  4393              BICS     r3,r3,r2
000026  4619              MOV      r1,r3
;;;35         tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
000028  7842              LDRB     r2,[r0,#1]
00002a  0792              LSLS     r2,r2,#30
00002c  0e12              LSRS     r2,r2,#24
00002e  7803              LDRB     r3,[r0,#0]
000030  079b              LSLS     r3,r3,#30
000032  0edb              LSRS     r3,r3,#27
000034  409a              LSLS     r2,r2,r3
000036  4311              ORRS     r1,r1,r2
;;;36         
;;;37         NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
000038  4a0c              LDR      r2,|L1.108|
00003a  2303              MOVS     r3,#3
00003c  021b              LSLS     r3,r3,#8
00003e  18d2              ADDS     r2,r2,r3
000040  7803              LDRB     r3,[r0,#0]
000042  109b              ASRS     r3,r3,#2
000044  009b              LSLS     r3,r3,#2
000046  50d1              STR      r1,[r2,r3]
;;;38         
;;;39         /* Enable the Selected IRQ Channels --------------------------------------*/
;;;40         NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
000048  7802              LDRB     r2,[r0,#0]
00004a  06d3              LSLS     r3,r2,#27
00004c  0edb              LSRS     r3,r3,#27
00004e  2201              MOVS     r2,#1
000050  409a              LSLS     r2,r2,r3
000052  4b06              LDR      r3,|L1.108|
000054  601a              STR      r2,[r3,#0]
000056  e007              B        |L1.104|
                  |L1.88|
;;;41       }
;;;42       else
;;;43       {
;;;44         /* Disable the Selected IRQ Channels -------------------------------------*/
;;;45         NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
000058  7802              LDRB     r2,[r0,#0]
00005a  06d3              LSLS     r3,r2,#27
00005c  0edb              LSRS     r3,r3,#27
00005e  2201              MOVS     r2,#1
000060  409a              LSLS     r2,r2,r3
000062  4b02              LDR      r3,|L1.108|
000064  3380              ADDS     r3,r3,#0x80
000066  601a              STR      r2,[r3,#0]
                  |L1.104|
;;;46       }
;;;47     }
000068  4770              BX       lr
;;;48     
                          ENDP

00006a  0000              DCW      0x0000
                  |L1.108|
                          DCD      0xe000e100

                          AREA ||i.NVIC_SystemLPConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemLPConfig PROC
;;;59       */
;;;60     void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;61     {
;;;62       /* Check the parameters */
;;;63       assert_param(IS_NVIC_LP(LowPowerMode));
;;;64       
;;;65       assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;66       
;;;67       if (NewState != DISABLE)
000002  d005              BEQ      |L2.16|
;;;68       {
;;;69         SCB->SCR |= LowPowerMode;
000004  4a05              LDR      r2,|L2.28|
000006  6912              LDR      r2,[r2,#0x10]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L2.28|
00000c  611a              STR      r2,[r3,#0x10]
00000e  e004              B        |L2.26|
                  |L2.16|
;;;70       }
;;;71       else
;;;72       {
;;;73         SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
000010  4a02              LDR      r2,|L2.28|
000012  6912              LDR      r2,[r2,#0x10]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L2.28|
000018  611a              STR      r2,[r3,#0x10]
                  |L2.26|
;;;74       }
;;;75     }
00001a  4770              BX       lr
;;;76     
                          ENDP

                  |L2.28|
                          DCD      0xe000ed00

                          AREA ||i.SysTick_CLKSourceConfig||, CODE, READONLY, ALIGN=2

                  SysTick_CLKSourceConfig PROC
;;;84       */
;;;85     void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000000  2804              CMP      r0,#4
;;;86     {
;;;87       /* Check the parameters */
;;;88       assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;89       
;;;90       if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
000002  d106              BNE      |L3.18|
;;;91       {
;;;92         SysTick->CTRL |= SysTick_CLKSource_HCLK;
000004  4906              LDR      r1,|L3.32|
000006  6909              LDR      r1,[r1,#0x10]
000008  2204              MOVS     r2,#4
00000a  4311              ORRS     r1,r1,r2
00000c  4a04              LDR      r2,|L3.32|
00000e  6111              STR      r1,[r2,#0x10]
000010  e005              B        |L3.30|
                  |L3.18|
;;;93       }
;;;94       else
;;;95       {
;;;96         SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000012  4903              LDR      r1,|L3.32|
000014  6909              LDR      r1,[r1,#0x10]
000016  2204              MOVS     r2,#4
000018  4391              BICS     r1,r1,r2
00001a  4a01              LDR      r2,|L3.32|
00001c  6111              STR      r1,[r2,#0x10]
                  |L3.30|
;;;97       }
;;;98     }
00001e  4770              BX       lr
;;;99     
                          ENDP

                  |L3.32|
                          DCD      0xe000e000

;*** Start embedded assembler ***

#line 1 "..\\FTLib\\Src\\ft32f0xx_misc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_ft32f0xx_misc_c_c60eb25e____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___15_ft32f0xx_misc_c_c60eb25e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_ft32f0xx_misc_c_c60eb25e____REVSH|
#line 144
|__asm___15_ft32f0xx_misc_c_c60eb25e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
