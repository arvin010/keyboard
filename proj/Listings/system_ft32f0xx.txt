; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\system_ft32f0xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\system_ft32f0xx.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I.\RTE\_Keyboard -IC:\Users\Reidgjiao\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -IC:\Keil_v5-MDK\ARM\CMSIS\Include -D__UVISION_VERSION=529 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\system_ft32f0xx.crf ..\FTLib\CMSIS\src\system_ft32f0xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;212      */
;;;213    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;214    {
;;;215      __IO uint32_t StartUpCounter = 0, HSIStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;216    
;;;217    /******************************************************************************/
;;;218    /*            PLL (clocked by HSE) used as System clock source                */
;;;219    /******************************************************************************/
;;;220      
;;;221      /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
;;;222      /* Enable HSI */    
;;;223      RCC->CR |= ((uint32_t)RCC_CR_HSION);
000008  482f              LDR      r0,|L1.200|
00000a  6800              LDR      r0,[r0,#0]
00000c  2101              MOVS     r1,#1
00000e  4308              ORRS     r0,r0,r1
000010  492d              LDR      r1,|L1.200|
000012  6008              STR      r0,[r1,#0]
;;;224     
;;;225      /* Wait till HSI is ready and if Time out is reached exit */
;;;226      do
000014  bf00              NOP      
                  |L1.22|
;;;227      {
;;;228        HSIStatus = RCC->CR & RCC_CR_HSIRDY;
000016  482c              LDR      r0,|L1.200|
000018  6800              LDR      r0,[r0,#0]
00001a  2102              MOVS     r1,#2
00001c  4008              ANDS     r0,r0,r1
00001e  9000              STR      r0,[sp,#0]
;;;229        StartUpCounter++;  
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  9001              STR      r0,[sp,#4]
;;;230      } while((HSIStatus == 0) && (StartUpCounter != HSI_STARTUP_TIMEOUT));
000026  9800              LDR      r0,[sp,#0]
000028  2800              CMP      r0,#0
00002a  d104              BNE      |L1.54|
00002c  2105              MOVS     r1,#5
00002e  0309              LSLS     r1,r1,#12
000030  9801              LDR      r0,[sp,#4]
000032  4288              CMP      r0,r1
000034  d1ef              BNE      |L1.22|
                  |L1.54|
;;;231    
;;;232      if ((RCC->CR & RCC_CR_HSIRDY) != RESET)
000036  4824              LDR      r0,|L1.200|
000038  6800              LDR      r0,[r0,#0]
00003a  2102              MOVS     r1,#2
00003c  4008              ANDS     r0,r0,r1
00003e  2800              CMP      r0,#0
000040  d002              BEQ      |L1.72|
;;;233      {
;;;234        HSIStatus = (uint32_t)0x01;
000042  2001              MOVS     r0,#1
000044  9000              STR      r0,[sp,#0]
000046  e001              B        |L1.76|
                  |L1.72|
;;;235      }
;;;236      else
;;;237      {
;;;238        HSIStatus = (uint32_t)0x00;
000048  2000              MOVS     r0,#0
00004a  9000              STR      r0,[sp,#0]
                  |L1.76|
;;;239      }  
;;;240    
;;;241      if (HSIStatus == (uint32_t)0x01)
00004c  9800              LDR      r0,[sp,#0]
00004e  2801              CMP      r0,#1
000050  d138              BNE      |L1.196|
;;;242      {
;;;243        /* Enable Prefetch Buffer and set Flash Latency */
;;;244        FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
000052  2011              MOVS     r0,#0x11
000054  491d              LDR      r1,|L1.204|
000056  6008              STR      r0,[r1,#0]
;;;245     
;;;246        /* HCLK = SYSCLK */
;;;247        RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
000058  481b              LDR      r0,|L1.200|
00005a  6840              LDR      r0,[r0,#4]
00005c  491a              LDR      r1,|L1.200|
00005e  6048              STR      r0,[r1,#4]
;;;248          
;;;249        /* PCLK = HCLK */
;;;250        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
000060  4608              MOV      r0,r1
000062  6840              LDR      r0,[r0,#4]
000064  6048              STR      r0,[r1,#4]
;;;251    
;;;252        /* PLL configuration */
;;;253        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
000066  4608              MOV      r0,r1
000068  6840              LDR      r0,[r0,#4]
00006a  217f              MOVS     r1,#0x7f
00006c  03c9              LSLS     r1,r1,#15
00006e  4388              BICS     r0,r0,r1
000070  4915              LDR      r1,|L1.200|
000072  6048              STR      r0,[r1,#4]
;;;254        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_PREDIV | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
000074  4608              MOV      r0,r1
000076  6840              LDR      r0,[r0,#4]
000078  00c9              LSLS     r1,r1,#3
00007a  4308              ORRS     r0,r0,r1
00007c  4912              LDR      r1,|L1.200|
00007e  6048              STR      r0,[r1,#4]
;;;255                
;;;256        /* Enable PLL */
;;;257        RCC->CR |= RCC_CR_PLLON;
000080  4608              MOV      r0,r1
000082  6800              LDR      r0,[r0,#0]
000084  2101              MOVS     r1,#1
000086  0609              LSLS     r1,r1,#24
000088  4308              ORRS     r0,r0,r1
00008a  490f              LDR      r1,|L1.200|
00008c  6008              STR      r0,[r1,#0]
;;;258    
;;;259        /* Wait till PLL is ready */
;;;260        while((RCC->CR & RCC_CR_PLLRDY) == 0)
00008e  bf00              NOP      
                  |L1.144|
000090  480d              LDR      r0,|L1.200|
000092  6800              LDR      r0,[r0,#0]
000094  2101              MOVS     r1,#1
000096  0649              LSLS     r1,r1,#25
000098  4008              ANDS     r0,r0,r1
00009a  2800              CMP      r0,#0
00009c  d0f8              BEQ      |L1.144|
;;;261        {
;;;262        }
;;;263    
;;;264        /* Select PLL as system clock source */
;;;265        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
00009e  480a              LDR      r0,|L1.200|
0000a0  6840              LDR      r0,[r0,#4]
0000a2  0880              LSRS     r0,r0,#2
0000a4  0080              LSLS     r0,r0,#2
0000a6  4908              LDR      r1,|L1.200|
0000a8  6048              STR      r0,[r1,#4]
;;;266        RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
0000aa  4608              MOV      r0,r1
0000ac  6840              LDR      r0,[r0,#4]
0000ae  2102              MOVS     r1,#2
0000b0  4308              ORRS     r0,r0,r1
0000b2  4905              LDR      r1,|L1.200|
0000b4  6048              STR      r0,[r1,#4]
;;;267    
;;;268        /* Wait till PLL is used as system clock source */
;;;269        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
0000b6  bf00              NOP      
                  |L1.184|
0000b8  4803              LDR      r0,|L1.200|
0000ba  6840              LDR      r0,[r0,#4]
0000bc  210c              MOVS     r1,#0xc
0000be  4008              ANDS     r0,r0,r1
0000c0  2808              CMP      r0,#8
0000c2  d1f9              BNE      |L1.184|
                  |L1.196|
;;;270        {
;;;271        }
;;;272      }
;;;273      else
;;;274      { /* If HSE fails to start-up, the application will have wrong clock 
;;;275             configuration. User can add here some code to deal with this error */
;;;276      }  
;;;277    }
0000c4  bd0c              POP      {r2,r3,pc}
;;;278    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L1.200|
                          DCD      0x40021000
                  |L1.204|
                          DCD      0x40022000

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;157      */
;;;158    void SystemCoreClockUpdate (void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;159    {
;;;160      uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
000002  2500              MOVS     r5,#0
000004  2400              MOVS     r4,#0
000006  2600              MOVS     r6,#0
000008  2700              MOVS     r7,#0
;;;161    
;;;162      /* Get SYSCLK source -------------------------------------------------------*/
;;;163      tmp = RCC->CFGR & RCC_CFGR_SWS;
00000a  4824              LDR      r0,|L2.156|
00000c  6840              LDR      r0,[r0,#4]
00000e  210c              MOVS     r1,#0xc
000010  4008              ANDS     r0,r0,r1
000012  4605              MOV      r5,r0
;;;164      
;;;165      switch (tmp)
000014  2d00              CMP      r5,#0
000016  d004              BEQ      |L2.34|
000018  2d04              CMP      r5,#4
00001a  d006              BEQ      |L2.42|
00001c  2d08              CMP      r5,#8
00001e  d12a              BNE      |L2.118|
000020  e007              B        |L2.50|
                  |L2.34|
;;;166      {
;;;167        case 0x00:  /* HSI used as system clock */
;;;168          SystemCoreClock = HSI_VALUE;
000022  481f              LDR      r0,|L2.160|
000024  491f              LDR      r1,|L2.164|
000026  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;169          break;
000028  e029              B        |L2.126|
                  |L2.42|
;;;170        case 0x04:  /* HSE used as system clock */
;;;171          SystemCoreClock = HSE_VALUE;
00002a  481d              LDR      r0,|L2.160|
00002c  491d              LDR      r1,|L2.164|
00002e  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;172          break;
000030  e025              B        |L2.126|
                  |L2.50|
;;;173        case 0x08:  /* PLL used as system clock */
;;;174          /* Get PLL clock source and multiplication factor ----------------------*/
;;;175          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
000032  481a              LDR      r0,|L2.156|
000034  6840              LDR      r0,[r0,#4]
000036  210f              MOVS     r1,#0xf
000038  0489              LSLS     r1,r1,#18
00003a  4008              ANDS     r0,r0,r1
00003c  4604              MOV      r4,r0
;;;176          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
00003e  4817              LDR      r0,|L2.156|
000040  6840              LDR      r0,[r0,#4]
000042  2103              MOVS     r1,#3
000044  03c9              LSLS     r1,r1,#15
000046  4008              ANDS     r0,r0,r1
000048  4606              MOV      r6,r0
;;;177          pllmull = ( pllmull >> 18) + 2;
00004a  0ca0              LSRS     r0,r4,#18
00004c  1c84              ADDS     r4,r0,#2
;;;178          
;;;179          if (pllsource == 0x00)
00004e  2e00              CMP      r6,#0
000050  d104              BNE      |L2.92|
;;;180          {
;;;181            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;182            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
000052  4815              LDR      r0,|L2.168|
000054  4360              MULS     r0,r4,r0
000056  4913              LDR      r1,|L2.164|
000058  6008              STR      r0,[r1,#0]  ; SystemCoreClock
00005a  e00b              B        |L2.116|
                  |L2.92|
;;;183          }
;;;184          else
;;;185          {
;;;186            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
00005c  480f              LDR      r0,|L2.156|
00005e  6ac0              LDR      r0,[r0,#0x2c]
000060  0700              LSLS     r0,r0,#28
000062  0f00              LSRS     r0,r0,#28
000064  1c47              ADDS     r7,r0,#1
;;;187            /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;188            SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
000066  4639              MOV      r1,r7
000068  480d              LDR      r0,|L2.160|
00006a  f7fffffe          BL       __aeabi_uidivmod
00006e  4360              MULS     r0,r4,r0
000070  490c              LDR      r1,|L2.164|
000072  6008              STR      r0,[r1,#0]  ; SystemCoreClock
                  |L2.116|
;;;189          }      
;;;190          break;
000074  e003              B        |L2.126|
                  |L2.118|
;;;191        default: /* HSI used as system clock */
;;;192          SystemCoreClock = HSI_VALUE;
000076  480a              LDR      r0,|L2.160|
000078  490a              LDR      r1,|L2.164|
00007a  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;193          break;
00007c  bf00              NOP      
                  |L2.126|
00007e  bf00              NOP                            ;169
;;;194      }
;;;195      /* Compute HCLK clock frequency ----------------*/
;;;196      /* Get HCLK prescaler */
;;;197      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000080  4806              LDR      r0,|L2.156|
000082  6840              LDR      r0,[r0,#4]
000084  21f0              MOVS     r1,#0xf0
000086  4008              ANDS     r0,r0,r1
000088  0900              LSRS     r0,r0,#4
00008a  4908              LDR      r1,|L2.172|
00008c  5c0d              LDRB     r5,[r1,r0]
;;;198      /* HCLK clock frequency */
;;;199      SystemCoreClock >>= tmp;  
00008e  4805              LDR      r0,|L2.164|
000090  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000092  40e8              LSRS     r0,r0,r5
000094  4903              LDR      r1,|L2.164|
000096  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;200    }
000098  bdf8              POP      {r3-r7,pc}
;;;201    
                          ENDP

00009a  0000              DCW      0x0000
                  |L2.156|
                          DCD      0x40021000
                  |L2.160|
                          DCD      0x007a1200
                  |L2.164|
                          DCD      SystemCoreClock
                  |L2.168|
                          DCD      0x003d0900
                  |L2.172|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;89       */
;;;90     void SystemInit (void)
000000  b510              PUSH     {r4,lr}
;;;91     {    
;;;92       /* Set HSION bit */
;;;93       RCC->CR |= (uint32_t)0x00000001;
000002  481b              LDR      r0,|L3.112|
000004  6800              LDR      r0,[r0,#0]
000006  2101              MOVS     r1,#1
000008  4308              ORRS     r0,r0,r1
00000a  4919              LDR      r1,|L3.112|
00000c  6008              STR      r0,[r1,#0]
;;;94     
;;;95       /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
;;;96       RCC->CFGR &= (uint32_t)0xF8FFB80C;
00000e  4608              MOV      r0,r1
000010  6840              LDR      r0,[r0,#4]
000012  4918              LDR      r1,|L3.116|
000014  4008              ANDS     r0,r0,r1
000016  4916              LDR      r1,|L3.112|
000018  6048              STR      r0,[r1,#4]
;;;97       
;;;98       /* Reset HSEON, CSSON and PLLON bits */
;;;99       RCC->CR &= (uint32_t)0xFEF6FFFF;
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]
00001e  4916              LDR      r1,|L3.120|
000020  4008              ANDS     r0,r0,r1
000022  4913              LDR      r1,|L3.112|
000024  6008              STR      r0,[r1,#0]
;;;100    
;;;101      /* Reset HSEBYP bit */
;;;102      RCC->CR &= (uint32_t)0xFFFBFFFF;
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]
00002a  2101              MOVS     r1,#1
00002c  0489              LSLS     r1,r1,#18
00002e  4388              BICS     r0,r0,r1
000030  490f              LDR      r1,|L3.112|
000032  6008              STR      r0,[r1,#0]
;;;103    
;;;104      /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
;;;105      RCC->CFGR &= (uint32_t)0xFFC0FFFF;
000034  4608              MOV      r0,r1
000036  6840              LDR      r0,[r0,#4]
000038  213f              MOVS     r1,#0x3f
00003a  0409              LSLS     r1,r1,#16
00003c  4388              BICS     r0,r0,r1
00003e  490c              LDR      r1,|L3.112|
000040  6048              STR      r0,[r1,#4]
;;;106    
;;;107      /* Reset PREDIV1[3:0] bits */
;;;108      RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
000042  4608              MOV      r0,r1
000044  6ac0              LDR      r0,[r0,#0x2c]
000046  0900              LSRS     r0,r0,#4
000048  0100              LSLS     r0,r0,#4
00004a  62c8              STR      r0,[r1,#0x2c]
;;;109    
;;;110      /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
;;;111      RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
00004c  4608              MOV      r0,r1
00004e  6b00              LDR      r0,[r0,#0x30]
000050  21ff              MOVS     r1,#0xff
000052  3154              ADDS     r1,r1,#0x54
000054  4388              BICS     r0,r0,r1
000056  4906              LDR      r1,|L3.112|
000058  6308              STR      r0,[r1,#0x30]
;;;112    
;;;113      /* Reset HSI14 bit */
;;;114      RCC->CR2 &= (uint32_t)0xFFFFFFFE;
00005a  4608              MOV      r0,r1
00005c  6b40              LDR      r0,[r0,#0x34]
00005e  0840              LSRS     r0,r0,#1
000060  0040              LSLS     r0,r0,#1
000062  6348              STR      r0,[r1,#0x34]
;;;115    
;;;116      /* Disable all interrupts */
;;;117      RCC->CIR = 0x00000000;
000064  2000              MOVS     r0,#0
000066  6088              STR      r0,[r1,#8]
;;;118    
;;;119      /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
;;;120      SetSysClock();
000068  f7fffffe          BL       SetSysClock
;;;121    }
00006c  bd10              POP      {r4,pc}
;;;122    
                          ENDP

00006e  0000              DCW      0x0000
                  |L3.112|
                          DCD      0x40021000
                  |L3.116|
                          DCD      0xf8ffb80c
                  |L3.120|
                          DCD      0xfef6ffff

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x02dc6c00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\FTLib\\CMSIS\\src\\system_ft32f0xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_system_ft32f0xx_c_5d646a67____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___17_system_ft32f0xx_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_system_ft32f0xx_c_5d646a67____REVSH|
#line 144
|__asm___17_system_ft32f0xx_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
