; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\ft32f0xx_comp.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ft32f0xx_comp.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\FTLib\CMSIS\inc -I..\FTLib\Inc -I..\FTLib\Lib -I..\usb\inc -I..\user -I..\RTT -I.\RTE\_Keyboard -IC:\Users\Reidgjiao\AppData\Local\Arm\Packs\FMD\FT32F0xx_DFP\1.0.6\Drivers\CMSIS\FT32F0xx\Include -IC:\Keil_v5-MDK\ARM\CMSIS\Include -D__UVISION_VERSION=529 -DFT32F072x8 -DFT32F072x8 --omf_browse=.\objects\ft32f0xx_comp.crf ..\FTLib\Src\ft32f0xx_comp.c]
                          THUMB

                          AREA ||i.COMP_Cmd||, CODE, READONLY, ALIGN=2

                  COMP_Cmd PROC
;;;100      */
;;;101    void COMP_Cmd(uint32_t COMP_Selection, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;102    {
;;;103      /* Check the parameters */
;;;104      assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
;;;105      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;106    
;;;107      if (NewState != DISABLE)
000002  d007              BEQ      |L1.20|
;;;108      {
;;;109        /* Enable the selected COMP peripheral */
;;;110        COMP->CSR |= (uint32_t) (1<<COMP_Selection);
000004  4a07              LDR      r2,|L1.36|
000006  69d2              LDR      r2,[r2,#0x1c]
000008  2301              MOVS     r3,#1
00000a  4083              LSLS     r3,r3,r0
00000c  431a              ORRS     r2,r2,r3
00000e  4b05              LDR      r3,|L1.36|
000010  61da              STR      r2,[r3,#0x1c]
000012  e006              B        |L1.34|
                  |L1.20|
;;;111      }
;;;112      else
;;;113      {
;;;114        /* Disable the selected COMP peripheral  */
;;;115        COMP->CSR &= (uint32_t)(~((uint32_t)1<<COMP_Selection));
000014  4a03              LDR      r2,|L1.36|
000016  69d2              LDR      r2,[r2,#0x1c]
000018  2301              MOVS     r3,#1
00001a  4083              LSLS     r3,r3,r0
00001c  439a              BICS     r2,r2,r3
00001e  4b01              LDR      r3,|L1.36|
000020  61da              STR      r2,[r3,#0x1c]
                  |L1.34|
;;;116      }
;;;117    }
000022  4770              BX       lr
;;;118    
                          ENDP

                  |L1.36|
                          DCD      0x40010000

                          AREA ||i.COMP_DeInit||, CODE, READONLY, ALIGN=2

                  COMP_DeInit PROC
;;;25       */
;;;26     void COMP_DeInit(void)
000000  2000              MOVS     r0,#0
;;;27     {
;;;28       COMP->CSR = ((uint32_t)0x00000000);    /*!< Set COMP_CSR register to reset value */
000002  4901              LDR      r1,|L2.8|
000004  61c8              STR      r0,[r1,#0x1c]
;;;29     }
000006  4770              BX       lr
;;;30     
                          ENDP

                  |L2.8|
                          DCD      0x40010000

                          AREA ||i.COMP_GetOutputLevel||, CODE, READONLY, ALIGN=2

                  COMP_GetOutputLevel PROC
;;;138      */
;;;139    uint32_t COMP_GetOutputLevel(uint32_t COMP_Selection)
000000  4601              MOV      r1,r0
;;;140    {
;;;141      uint32_t compout = 0x0;
000002  2000              MOVS     r0,#0
;;;142    
;;;143      /* Check the parameters */
;;;144      assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
;;;145    
;;;146      /* Check if selected comparator output is high */
;;;147       if ((COMP->CSR & (COMP_CSR_COMP1OUT<<COMP_Selection)) != 0)
000004  4a06              LDR      r2,|L3.32|
000006  69d2              LDR      r2,[r2,#0x1c]
000008  2301              MOVS     r3,#1
00000a  039b              LSLS     r3,r3,#14
00000c  408b              LSLS     r3,r3,r1
00000e  401a              ANDS     r2,r2,r3
000010  2a00              CMP      r2,#0
000012  d002              BEQ      |L3.26|
;;;148      {
;;;149        compout = COMP_OutputLevel_High;
000014  2001              MOVS     r0,#1
000016  0380              LSLS     r0,r0,#14
000018  e000              B        |L3.28|
                  |L3.26|
;;;150      }
;;;151      else
;;;152      {
;;;153        compout = COMP_OutputLevel_Low;
00001a  2000              MOVS     r0,#0
                  |L3.28|
;;;154      }
;;;155    
;;;156      /* Return the comparator output level */
;;;157      return (uint32_t)(compout);
;;;158    }
00001c  4770              BX       lr
;;;159    
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      0x40010000

                          AREA ||i.COMP_Init||, CODE, READONLY, ALIGN=2

                  COMP_Init PROC
;;;45       */
;;;46     void COMP_Init(uint32_t COMP_Selection, COMP_InitTypeDef* COMP_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;47     {
000002  4602              MOV      r2,r0
;;;48       uint32_t tmpreg = 0;
000004  2000              MOVS     r0,#0
;;;49     
;;;50       /* Check the parameters */
;;;51       assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
;;;52       assert_param(IS_COMP_VIP_SEL(COMP_InitStruct->COMP_VipSel));
;;;53       assert_param(IS_COMP_VINSEL(COMP_InitStruct->COMP_VinSel));
;;;54       assert_param(IS_COMP_OUTPUT_SEL(COMP_InitStruct->COMP_OutputSel));
;;;55       assert_param(IS_COMP_POL(COMP_InitStruct->COMP_Pol));
;;;56     
;;;57       /*!< Get the COMP_CSR register value */
;;;58       tmpreg = COMP->CSR;
000006  4b09              LDR      r3,|L4.44|
000008  69d8              LDR      r0,[r3,#0x1c]
;;;59     
;;;60       /*!< Clear the bits */ 
;;;61       tmpreg &= (uint32_t) ~(COMP_CSR_CLEAR_MASK<<COMP_Selection);
00000a  4b09              LDR      r3,|L4.48|
00000c  4093              LSLS     r3,r3,r2
00000e  4604              MOV      r4,r0
000010  439c              BICS     r4,r4,r3
000012  4620              MOV      r0,r4
;;;62     
;;;63       /*!< Configure COMP: COMP_VipSel, COMP_VinSel, COMP_OutputSel value and COMP_Pol */
;;;64       tmpreg |= (uint32_t)((COMP_InitStruct->COMP_VipSel | COMP_InitStruct->COMP_VinSel|
000014  684c              LDR      r4,[r1,#4]
000016  680b              LDR      r3,[r1,#0]
000018  4323              ORRS     r3,r3,r4
00001a  688c              LDR      r4,[r1,#8]
00001c  4323              ORRS     r3,r3,r4
00001e  68cc              LDR      r4,[r1,#0xc]
000020  4323              ORRS     r3,r3,r4
000022  4318              ORRS     r0,r0,r3
;;;65                            COMP_InitStruct->COMP_OutputSel | COMP_InitStruct->COMP_Pol));
;;;66     
;;;67       /*!< Write to COMP_CSR register */
;;;68       COMP->CSR = tmpreg;  
000024  4b01              LDR      r3,|L4.44|
000026  61d8              STR      r0,[r3,#0x1c]
;;;69     }
000028  bd10              POP      {r4,pc}
;;;70     
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      0x40010000
                  |L4.48|
                          DCD      0x00003ffe

                          AREA ||i.COMP_LockConfig||, CODE, READONLY, ALIGN=2

                  COMP_LockConfig PROC
;;;202      */
;;;203    void COMP_LockConfig(uint32_t COMP_Selection)
000000  4904              LDR      r1,|L5.20|
;;;204    {
;;;205      /* Check the parameter */
;;;206      assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
;;;207    
;;;208      /* Set the lock bit corresponding to selected comparator */
;;;209      COMP->CSR |= (uint32_t) (COMP_CSR_NCOMPLOCK<<COMP_Selection);
000002  69c9              LDR      r1,[r1,#0x1c]
000004  2201              MOVS     r2,#1
000006  03d2              LSLS     r2,r2,#15
000008  4082              LSLS     r2,r2,r0
00000a  4311              ORRS     r1,r1,r2
00000c  4a01              LDR      r2,|L5.20|
00000e  61d1              STR      r1,[r2,#0x1c]
;;;210    }
000010  4770              BX       lr
;;;211    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40010000

                          AREA ||i.COMP_StructInit||, CODE, READONLY, ALIGN=2

                  COMP_StructInit PROC
;;;76       */
;;;77     void COMP_StructInit(COMP_InitTypeDef* COMP_InitStruct)
000000  2102              MOVS     r1,#2
;;;78     {
;;;79       COMP_InitStruct->COMP_VipSel = NCOMP_VIP_SEL_PAD_PA1;
000002  6001              STR      r1,[r0,#0]
;;;80       COMP_InitStruct->COMP_VinSel = NCOMP_VIN_SEL_PAD_PA0 | PCOMP_VIN_SEL_PAD_PA2;
000004  4902              LDR      r1,|L6.16|
000006  6041              STR      r1,[r0,#4]
;;;81       COMP_InitStruct->COMP_OutputSel = 0;
000008  2100              MOVS     r1,#0
00000a  6081              STR      r1,[r0,#8]
;;;82       COMP_InitStruct->COMP_Pol = 0;
00000c  60c1              STR      r1,[r0,#0xc]
;;;83     }
00000e  4770              BX       lr
;;;84     
                          ENDP

                  |L6.16|
                          DCD      0x00080010

                          AREA ||i.COMP_WindowCmd||, CODE, READONLY, ALIGN=2

                  COMP_WindowCmd PROC
;;;172      */
;;;173    void COMP_WindowCmd(FunctionalState NewState)
000000  2800              CMP      r0,#0
;;;174    {
;;;175      /* Check the parameters */
;;;176      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;177      
;;;178      if (NewState != DISABLE)
000002  d007              BEQ      |L7.20|
;;;179      {
;;;180        /* Enable the window mode */
;;;181        COMP->CSR |= (uint32_t) COMP_CSR_WNDWEN;
000004  4907              LDR      r1,|L7.36|
000006  69c9              LDR      r1,[r1,#0x1c]
000008  2201              MOVS     r2,#1
00000a  05d2              LSLS     r2,r2,#23
00000c  4311              ORRS     r1,r1,r2
00000e  4a05              LDR      r2,|L7.36|
000010  61d1              STR      r1,[r2,#0x1c]
000012  e006              B        |L7.34|
                  |L7.20|
;;;182      }
;;;183      else
;;;184      {
;;;185        /* Disable the window mode */
;;;186        COMP->CSR &= (uint32_t)(~COMP_CSR_WNDWEN);
000014  4903              LDR      r1,|L7.36|
000016  69c9              LDR      r1,[r1,#0x1c]
000018  2201              MOVS     r2,#1
00001a  05d2              LSLS     r2,r2,#23
00001c  4391              BICS     r1,r1,r2
00001e  4a01              LDR      r2,|L7.36|
000020  61d1              STR      r1,[r2,#0x1c]
                  |L7.34|
;;;187      }
;;;188    }
000022  4770              BX       lr
;;;189    
                          ENDP

                  |L7.36|
                          DCD      0x40010000

;*** Start embedded assembler ***

#line 1 "..\\FTLib\\Src\\ft32f0xx_comp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_ft32f0xx_comp_c_66e338f6____REV16|
#line 129 "..\\FTLib\\CMSIS\\inc\\core_cmInstr.h"
|__asm___15_ft32f0xx_comp_c_66e338f6____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_ft32f0xx_comp_c_66e338f6____REVSH|
#line 144
|__asm___15_ft32f0xx_comp_c_66e338f6____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
